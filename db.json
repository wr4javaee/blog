{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/yumao.jpg","path":"images/yumao.jpg","modified":0,"renderable":0},{"_id":"themes/material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"source/images/15239442308370/zuul_locator.jpg","path":"images/15239442308370/zuul_locator.jpg","modified":0,"renderable":0},{"_id":"source/images/15397653100461/15397741541838.png","path":"images/15397653100461/15397741541838.png","modified":0,"renderable":0},{"_id":"source/images/15397653100461/15398532205321.jpg","path":"images/15397653100461/15398532205321.jpg","modified":0,"renderable":0},{"_id":"source/images/15397653100461/Spring Cloud Zuul 01.jpg","path":"images/15397653100461/Spring Cloud Zuul 01.jpg","modified":0,"renderable":0},{"_id":"source/images/15397653100461/Spring Cloud Zuul 02.jpg","path":"images/15397653100461/Spring Cloud Zuul 02.jpg","modified":0,"renderable":0},{"_id":"source/images/15397653100461/Spring Cloud Zuul 02 -1-.jpg","path":"images/15397653100461/Spring Cloud Zuul 02 -1-.jpg","modified":0,"renderable":0},{"_id":"source/images/15397653100461/Spring Cloud Zuul 03.jpg","path":"images/15397653100461/Spring Cloud Zuul 03.jpg","modified":0,"renderable":0},{"_id":"source/images/blog_create/git_branch.png","path":"images/blog_create/git_branch.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/create_repository.png","path":"images/blog_create/create_repository.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/hexo_clean.png","path":"images/blog_create/hexo_clean.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/hexo_files.png","path":"images/blog_create/hexo_files.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/hexo_files_after_generate_1.png","path":"images/blog_create/hexo_files_after_generate_1.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/hexo_files_after_generate_2.png","path":"images/blog_create/hexo_files_after_generate_2.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/jekyll_default_page.png","path":"images/blog_create/jekyll_default_page.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/jekyll_files.png","path":"images/blog_create/jekyll_files.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/settings_lunch.png","path":"images/blog_create/settings_lunch.png","modified":0,"renderable":0},{"_id":"source/images/curator/retrypolicy_extends.png","path":"images/curator/retrypolicy_extends.png","modified":0,"renderable":0},{"_id":"themes/material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"source/images/15397653100461/15398449182455.jpg","path":"images/15397653100461/15398449182455.jpg","modified":0,"renderable":0},{"_id":"source/images/15397653100461/15398533229844.jpg","path":"images/15397653100461/15398533229844.jpg","modified":0,"renderable":0},{"_id":"source/images/blog_create/hexo_github.png","path":"images/blog_create/hexo_github.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/lunch_page1.png","path":"images/blog_create/lunch_page1.png","modified":0,"renderable":0},{"_id":"source/images/blog_create/settings_theme.png","path":"images/blog_create/settings_theme.png","modified":0,"renderable":0},{"_id":"source/images/db/transaction/2016_05_26_lost_update.png","path":"images/db/transaction/2016_05_26_lost_update.png","modified":0,"renderable":0},{"_id":"source/images/networking_protocol/tcp/2016_07_03_01.jpg","path":"images/networking_protocol/tcp/2016_07_03_01.jpg","modified":0,"renderable":0},{"_id":"source/images/networking_protocol/tcp/2016_07_03_02.jpg","path":"images/networking_protocol/tcp/2016_07_03_02.jpg","modified":0,"renderable":0},{"_id":"themes/material-x/source/js/volantis.js","path":"js/volantis.js","modified":0,"renderable":1},{"_id":"source/images/15397653100461/15398531067119.jpg","path":"images/15397653100461/15398531067119.jpg","modified":0,"renderable":0},{"_id":"source/images/db/transaction/2016_05_26_dirty_reads.png","path":"images/db/transaction/2016_05_26_dirty_reads.png","modified":0,"renderable":0},{"_id":"source/images/db/transaction/2016_05_26_non_repeatable_reads.png","path":"images/db/transaction/2016_05_26_non_repeatable_reads.png","modified":0,"renderable":0},{"_id":"source/images/zookeeper/zab/2016_07_18_zab_message_broadcast.png","path":"images/zookeeper/zab/2016_07_18_zab_message_broadcast.png","modified":0,"renderable":0},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1},{"_id":"source/images/15397653100461/15398306875833.jpg","path":"images/15397653100461/15398306875833.jpg","modified":0,"renderable":0},{"_id":"source/images/15397653100461/15398454116261.jpg","path":"images/15397653100461/15398454116261.jpg","modified":0,"renderable":0},{"_id":"source/images/db/transaction/2016_05_26_transaction_isolation_level.png","path":"images/db/transaction/2016_05_26_transaction_isolation_level.png","modified":0,"renderable":0},{"_id":"source/images/15397653100461/15399408807599.jpg","path":"images/15397653100461/15399408807599.jpg","modified":0,"renderable":0},{"_id":"source/images/blog_create/hexo_server_page.png","path":"images/blog_create/hexo_server_page.png","modified":0,"renderable":0},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a4a2a3821004a971b91d6f18e70770a2b7bb75c7","modified":1559743180812},{"_id":"themes/material-x/.gitignore","hash":"f875b6524d4c61e5de0a1d9efdec1fe451d7bc07","modified":1559743378416},{"_id":"themes/material-x/LICENSE","hash":"13b0862f4ed1914abe887a47df2c3ca5adfa8f3f","modified":1559743378416},{"_id":"themes/material-x/README.md","hash":"b497d2c298d6ca35c5ccf9793baa0ceab77b64bf","modified":1559743378417},{"_id":"themes/material-x/_config.yml","hash":"8cc585d802acab0bbda5fb96534ca6a71626db65","modified":1559791206318},{"_id":"source/404/index.md","hash":"c41e79322880e63ca29836224985aef1e1027828","modified":1559743180812},{"_id":"source/_posts/db_trans.md","hash":"b75c22af534593ea23c9f35c7d81c7cd8f10ffb1","modified":1559743180813},{"_id":"source/_posts/github-pages_init.md","hash":"f903c8aa7f195d62d6656be63c31b69a15204536","modified":1559743180813},{"_id":"source/_posts/spring-cloud_zuul_01.md","hash":"62cf2e56c184ea42c0f315e9c9816609adf34550","modified":1559743180814},{"_id":"source/_posts/tcp_connection.md","hash":"fca5fbfad9646816ed5d78a3f1ae784300a9beec","modified":1559743180814},{"_id":"source/_posts/zookeeper_curator.md","hash":"d0746017b06a70a1f91b5f052061c50fd6bfb155","modified":1559743180814},{"_id":"source/_posts/zookeeper_deploy_and_client_using.md","hash":"e9d3d3abcddfe597227066fd9597e03cf53a5c8f","modified":1559743180815},{"_id":"source/_posts/zookeeper_java_api.md","hash":"ff1087accfe27a884d539e07086a61e4170e27b3","modified":1559743180815},{"_id":"source/_posts/zookeeper_paxos.md","hash":"78123bf79d1d250574409854fd5cd7041222c22b","modified":1559743180816},{"_id":"source/_posts/zookeeper_summary.md","hash":"8f1bf99d233a67206c6572df064dd719634ca114","modified":1559743180816},{"_id":"source/about/index.md","hash":"0cf4b9c89b79f8172160175a4236cad8363eeafc","modified":1559743180816},{"_id":"source/images/yumao.jpg","hash":"9d1a717616b215ffac5319302cd9289ec37ae24a","modified":1559743180844},{"_id":"source/tags/index.md","hash":"64c8229e7c4d1d3b544c3d4130af9a0180f77765","modified":1559743180844},{"_id":"themes/material-x/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1559743378411},{"_id":"themes/material-x/.git/config","hash":"c154ce28242e1086bb810b259f1f50738bfce101","modified":1559743378412},{"_id":"themes/material-x/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1559743367085},{"_id":"themes/material-x/.git/index","hash":"7d8180f832277fbda6acfcd82ec6a8645f576712","modified":1559797530878},{"_id":"themes/material-x/.git/packed-refs","hash":"e6e3f3631c6543e63e6b1f69531c56e4fb6daf1b","modified":1559743378408},{"_id":"themes/material-x/layout/archive.ejs","hash":"6b36ef79379f65952df9f27475f73d191d22657e","modified":1559743378426},{"_id":"themes/material-x/layout/category.ejs","hash":"ff5b299f7b0f3668174314c57ffe0389891399a6","modified":1559743378426},{"_id":"themes/material-x/layout/index.ejs","hash":"03ba528ba647d8ad184a2dd08e1c2c3ac4dd7baa","modified":1559743378427},{"_id":"themes/material-x/layout/layout.ejs","hash":"9c262bfa12dd43d434d86deea6adf8dfdf46d5b4","modified":1559743378427},{"_id":"themes/material-x/layout/links.ejs","hash":"65fa60924151666fbb814b958ec9b5b231ab0ab9","modified":1559743378427},{"_id":"themes/material-x/layout/list.ejs","hash":"3466d6dede7aab729b2986c145d95154af0856f2","modified":1559743378427},{"_id":"themes/material-x/layout/page.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1559743378428},{"_id":"themes/material-x/layout/post.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1559743378428},{"_id":"themes/material-x/layout/tag.ejs","hash":"ddbfca0cb18d9ceb47611fa3c7e8a8b5ecf31085","modified":1559743378428},{"_id":"themes/material-x/languages/en.yml","hash":"3e0c3b617f282ca66d7cff444c9671ea7bb1a503","modified":1559743378417},{"_id":"themes/material-x/languages/zh-CN.yml","hash":"c3a9d3831f1cef9edd2429b4766c359e21673dde","modified":1559743378417},{"_id":"themes/material-x/languages/zh-HK.yml","hash":"fb5510c20171654d2ebc1ac780a1d6cc596fbd37","modified":1559743378417},{"_id":"themes/material-x/languages/zh-TW.yml","hash":"b8bc7643f790c9da2ec6741af5eeca3dc2e0417a","modified":1559743378418},{"_id":"themes/material-x/source/style.less","hash":"bd90f674eca5279de970627ce19f20fd784c293a","modified":1559743378443},{"_id":"source/images/15239442308370/zuul_locator.jpg","hash":"dfbfad210649d001e9bd5dabf71bebf2e9a48532","modified":1559743180817},{"_id":"source/images/15397653100461/15397741541838.png","hash":"c5cf2b82ecf145af272c77ade6f6c70d90933610","modified":1559743180818},{"_id":"source/images/15397653100461/15398532205321.jpg","hash":"dacd51d39ba9ca4b557c6371a7da0582857d1c62","modified":1559743180827},{"_id":"source/images/15397653100461/Spring Cloud Zuul 01.jpg","hash":"8d71268c4a20da9b99401406e110f6e761d2beb6","modified":1559743180830},{"_id":"source/images/15397653100461/Spring Cloud Zuul 02.jpg","hash":"8b553f8cab02fc1733c911799b80065884943a7e","modified":1559743180831},{"_id":"source/images/15397653100461/Spring Cloud Zuul 02 -1-.jpg","hash":"3c60a77376c8bbeefa0d2682fafe6c69ef3687d0","modified":1559743180831},{"_id":"source/images/15397653100461/Spring Cloud Zuul 03.jpg","hash":"cdf6f4d91bcd70a291c38e4be9a48f9b99de919b","modified":1559743180832},{"_id":"source/images/blog_create/git_branch.png","hash":"9c77d880ce6e0f0c35791ac17083115ca3b107ca","modified":1559743180833},{"_id":"source/images/blog_create/create_repository.png","hash":"9cf2dff102ac975b7bd6d568941a889090dd3c59","modified":1559743180833},{"_id":"source/images/blog_create/hexo_clean.png","hash":"2656b89b1834272c55bc945ed0ddb675966e8294","modified":1559743180834},{"_id":"source/images/blog_create/hexo_files.png","hash":"94171547d5c7529603c491cb22d218b7557adbb8","modified":1559743180834},{"_id":"source/images/blog_create/hexo_files_after_generate_1.png","hash":"b3b5d340cd6478f508468a7e2633a297c4d0fc20","modified":1559743180834},{"_id":"source/images/blog_create/hexo_files_after_generate_2.png","hash":"be3e2028b75a17c934e5cf53a251fb5d899ea67c","modified":1559743180835},{"_id":"source/images/blog_create/jekyll_default_page.png","hash":"6f34123cb958843bac5dd5c1b452fae69823d5ec","modified":1559743180837},{"_id":"source/images/blog_create/jekyll_files.png","hash":"4dadd12045ea80dd27f99e3aab694f231a510cb1","modified":1559743180838},{"_id":"source/images/blog_create/settings_lunch.png","hash":"10dc80584286fe3017864b205f0a4038932ba167","modified":1559743180839},{"_id":"source/images/curator/retrypolicy_extends.png","hash":"d4ae905fef78cf55251df81987acfcd37404c6d4","modified":1559743180840},{"_id":"themes/material-x/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1559743367086},{"_id":"themes/material-x/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1559743367085},{"_id":"themes/material-x/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1559743367086},{"_id":"themes/material-x/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1559743367087},{"_id":"themes/material-x/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1559743367087},{"_id":"themes/material-x/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1559743367086},{"_id":"themes/material-x/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1559743367087},{"_id":"themes/material-x/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1559743367086},{"_id":"themes/material-x/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1559743367087},{"_id":"themes/material-x/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1559743367087},{"_id":"themes/material-x/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1559743367088},{"_id":"themes/material-x/.git/logs/HEAD","hash":"2451c35299a44b37f741a5f7ad8a3a998212b039","modified":1559743378411},{"_id":"themes/material-x/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1559743367085},{"_id":"themes/material-x/.github/ISSUE_TEMPLATE/------.md","hash":"cc03dbf4326b9cd0f5a8a024bf6bb622334eca3f","modified":1559743378416},{"_id":"themes/material-x/layout/_cover/search.ejs","hash":"c5c79e41c43efadf41ffc2393152b89213351d00","modified":1559743378418},{"_id":"themes/material-x/layout/_meta/author.ejs","hash":"cebe5d05c7588fb206c64b414b0bad2fca39a7cb","modified":1559743378418},{"_id":"themes/material-x/layout/_meta/categories.ejs","hash":"4b5a6cd4a55742b5963dcd63c3bd9fb8534ba178","modified":1559743378418},{"_id":"themes/material-x/layout/_meta/counter.ejs","hash":"7a22e5cec94673edcb084680df445aa7d800ca2e","modified":1559743378419},{"_id":"themes/material-x/layout/_meta/date.ejs","hash":"0ef066dc7247464359a85d9c39010c1e7e9ffb1d","modified":1559743378419},{"_id":"themes/material-x/layout/_meta/music.ejs","hash":"1ac33225b2dfc4d5498a86266f97082a8bf135ec","modified":1559743378419},{"_id":"themes/material-x/layout/_meta/share.ejs","hash":"96cac09c9906283f454039a9f5c0302104338e64","modified":1559743378419},{"_id":"themes/material-x/layout/_meta/tags.ejs","hash":"ca10c85f988b96f332d09d20016c78974cbc925d","modified":1559743378419},{"_id":"themes/material-x/layout/_meta/thumbnail.ejs","hash":"99f3e0438be97f9462d9a9189117260d811da2e1","modified":1559743378419},{"_id":"themes/material-x/layout/_meta/title.ejs","hash":"58f30ee662f22f55ef9191e06390229beda20694","modified":1559743378419},{"_id":"themes/material-x/layout/_meta/top.ejs","hash":"e4e8bf49173f757ed19ed49d07e0db03f146e989","modified":1559743378420},{"_id":"themes/material-x/layout/_meta/updated.ejs","hash":"2d6e1e234721b930308caf61d2d086213f2389e4","modified":1559743378420},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"ca70dd02c7efb4067c453e8a9414bd3f203db926","modified":1559743378420},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"f7e366529355d06cfd4070ed9fae994be09abd25","modified":1559743378420},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"12b2fca703fa56da7a85045bf17499845c3fe5bb","modified":1559743378420},{"_id":"themes/material-x/layout/_partial/cover.ejs","hash":"61430899b26806df450ab75e021534b482ad7746","modified":1559743378421},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"ea1e86c615aa8cc6a3f6d073223e9c229a135a26","modified":1559743378421},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"d4fefdaf1b311daa5a9df2e34fd78320272c505f","modified":1559743378421},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"846d5496b7a26120ca92e038860707fa70bcaa30","modified":1559743378421},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"a51a072654643ecf850f813a31dd40d746f8ab96","modified":1559743378422},{"_id":"themes/material-x/layout/_partial/meta.ejs","hash":"9d6a39dd84cc14c31a3fc36e9e0e5ee1f168e53f","modified":1559743378422},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"6e7a5e3c2894778d8476d01603ab1790f7ccfe00","modified":1559743378422},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"03026fb8f6d18b70f6af6dae2f434ddca98d9813","modified":1559743378422},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"da987d6feed88023241ea3ee33f390fc47b5c179","modified":1559743378423},{"_id":"themes/material-x/layout/_third-party/aplayer.ejs","hash":"9260682432e0a80261435b4bd27ccf16b8d96fed","modified":1559743378423},{"_id":"themes/material-x/layout/_third-party/clipboard.ejs","hash":"628a0ff18fecc3c866070517aad19366c00f417c","modified":1559743378423},{"_id":"themes/material-x/layout/_third-party/comments.ejs","hash":"e0805f203c7527a852a414ddd21425af4fed0218","modified":1559743378423},{"_id":"themes/material-x/layout/_third-party/fancybox.ejs","hash":"a840db5c132ded3be61e748ef1feadae1435465d","modified":1559743378424},{"_id":"themes/material-x/layout/_third-party/share.ejs","hash":"5b2a57aac6df2be654e45104177a9382641d7584","modified":1559743378424},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"630967f53c7f8df561022a6230f4791b2c1fde95","modified":1559743378424},{"_id":"themes/material-x/layout/_widget/category.ejs","hash":"a4b3059bb77841a0569243b2ef474ba1fd67ca3a","modified":1559743378424},{"_id":"themes/material-x/layout/_widget/grid.ejs","hash":"33372405602c2bd6dcff42011d14998e5a2b2b70","modified":1559743378425},{"_id":"themes/material-x/layout/_widget/header.ejs","hash":"d542654385da91d26c0647aae0155a7c3fe14d1d","modified":1559743378425},{"_id":"themes/material-x/layout/_widget/list.ejs","hash":"2ce0d61c140852c84d6f0e52b063b0403836be37","modified":1559743378425},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"a02103653676ab8016b2c4e93c7cd402d4a889bc","modified":1559743378425},{"_id":"themes/material-x/layout/_widget/plain.ejs","hash":"27737e8f046ee3e8907a3ebb86e9800d405a7f4a","modified":1559743378425},{"_id":"themes/material-x/layout/_widget/related_posts.ejs","hash":"aaf497403902a6bd2066c3a7de9b99170914daa4","modified":1559743378426},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"b81b89ee0f62768e0cc97cfb2442cdb903ca559a","modified":1559743378426},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"dd5f82c8965da414d96d935645fc27f9f3f05566","modified":1559743378426},{"_id":"themes/material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1559743378429},{"_id":"themes/material-x/source/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1559743378435},{"_id":"themes/material-x/source/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1559743378435},{"_id":"themes/material-x/source/less/_archive.less","hash":"13503b9ef5d45782ad44af3b7509191da5824284","modified":1559743378437},{"_id":"themes/material-x/source/less/_article.less","hash":"98b835a7bb513a88ec4e5f163923b262eacb640d","modified":1559743378438},{"_id":"themes/material-x/source/less/_base.less","hash":"f56fe042567bc149eed3b29fe09618c60b0d6733","modified":1559743378438},{"_id":"themes/material-x/source/less/_color.less","hash":"23bfc74e8364916b4247f3b39da613ef2440d523","modified":1559750094520},{"_id":"themes/material-x/source/less/_defines.less","hash":"59912db57e6051debd70487848501e6ad0a016ed","modified":1559743378439},{"_id":"themes/material-x/source/less/_footer.less","hash":"f53de1b635591582ec9b1ec74249a622fc2cb8fa","modified":1559743378439},{"_id":"themes/material-x/source/less/_fonts.less","hash":"dabeee0210bcb139ab44a1949b6203040a346782","modified":1559749121281},{"_id":"themes/material-x/source/less/_header.less","hash":"9bb49870c459318e1dbb1302ad35645befbf9896","modified":1559743378440},{"_id":"themes/material-x/source/less/_layout.less","hash":"d44abc94ffe5e4f70ecc8e5861ae05fb49f1da88","modified":1559743378440},{"_id":"themes/material-x/source/less/_links.less","hash":"13d1ba7fa0a43b00dee925160c108f01eb212285","modified":1559743378440},{"_id":"themes/material-x/source/less/_normalize.less","hash":"f092813604db20a84c62ef889411598e78d14599","modified":1559743378441},{"_id":"themes/material-x/source/less/_main.less","hash":"a4898d344e60c08249750b5eca3c6dbd11e2a4e3","modified":1559743378441},{"_id":"themes/material-x/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1559743378441},{"_id":"themes/material-x/source/less/_search.less","hash":"7d8470699ed21c63ad6281d5934cadead109d97c","modified":1559743378441},{"_id":"themes/material-x/source/less/_side.less","hash":"85b5a080defb327d4739356ec872b4e6346c12d2","modified":1559748398560},{"_id":"themes/material-x/source/less/_toc.less","hash":"6d8c644aebe6fd6d9b657bd2b037ab4296fe80b1","modified":1559743378442},{"_id":"themes/material-x/source/less/_tog.less","hash":"73e72c4efd04a8721a87002de1a8a0201e1f5564","modified":1559743378443},{"_id":"themes/material-x/source/less/_typo.less","hash":"6a93f9fab3e1dfac4dc80dd77bf6b1223b5fb058","modified":1559743378443},{"_id":"source/images/15397653100461/15398449182455.jpg","hash":"65df07a0a2bfc1c864d87dd10110e0c9285c679c","modified":1559743180822},{"_id":"source/images/15397653100461/15398533229844.jpg","hash":"de136d7ea7d362fe24d20e6589d9896bf8398ced","modified":1559743180828},{"_id":"source/images/blog_create/hexo_github.png","hash":"e4a98cbf795c9ee8bc0300f29c0471c049bc79ec","modified":1559743180836},{"_id":"source/images/blog_create/lunch_page1.png","hash":"aae51818c3a82241b5d5536e2791a163f90c6470","modified":1559743180838},{"_id":"source/images/blog_create/settings_theme.png","hash":"ab547f02878bb10d62ecec10a966c6baa0fcc0c3","modified":1559743180840},{"_id":"source/images/db/transaction/2016_05_26_lost_update.png","hash":"481d4c6f46e22ae6533fb15912e516e83f22705c","modified":1559743180841},{"_id":"source/images/networking_protocol/tcp/2016_07_03_01.jpg","hash":"6fbddcb68da45b4aa17561bdecd20b013e006c63","modified":1559743180843},{"_id":"source/images/networking_protocol/tcp/2016_07_03_02.jpg","hash":"ccb8d1b6516ae3c7c1d64b1552ad53132399469e","modified":1559743180843},{"_id":"themes/material-x/.git/refs/heads/master","hash":"fddac67bd9033ea47aabc6619c1773deb3256755","modified":1559743378411},{"_id":"themes/material-x/source/js/volantis.js","hash":"28fcd2db5a696d2f327eb53d95e711c3f2574240","modified":1559743378437},{"_id":"source/images/15397653100461/15398531067119.jpg","hash":"c1bee0234c6e7fe71d1be52dcf8971aa84273650","modified":1559743180826},{"_id":"source/images/db/transaction/2016_05_26_dirty_reads.png","hash":"ef89b15685612b877aa4c7278ff30e6adbf84d55","modified":1559743180841},{"_id":"source/images/db/transaction/2016_05_26_non_repeatable_reads.png","hash":"52086e3df5a1a0a71f6d0878f32d693b40490225","modified":1559743180842},{"_id":"source/images/zookeeper/zab/2016_07_18_zab_message_broadcast.png","hash":"0ab1ba5a166197ad7708488be8fbee1c9afa4c47","modified":1559743180844},{"_id":"themes/material-x/.git/objects/pack/pack-790fc35b2a22e34971d2998d2646f5784a58e7d8.idx","hash":"9333b5bab1c4f7389d68af0df302aeec5a3da5e0","modified":1559743378398},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1559743378431},{"_id":"source/images/15397653100461/15398306875833.jpg","hash":"beb604ace582949c40443aa6dff0da061e16c971","modified":1559743180821},{"_id":"source/images/15397653100461/15398454116261.jpg","hash":"23e190701da3cd54cf2b9e71d6707badf7fec344","modified":1559743180824},{"_id":"themes/material-x/.git/logs/refs/heads/master","hash":"2451c35299a44b37f741a5f7ad8a3a998212b039","modified":1559743378411},{"_id":"themes/material-x/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1559743378410},{"_id":"source/images/db/transaction/2016_05_26_transaction_isolation_level.png","hash":"4be9f35f444793aae1505124919a93babc853dc9","modified":1559743180842},{"_id":"source/images/15397653100461/15399408807599.jpg","hash":"ec8d1ed91f33a353db329160944f4b75d8a0e48b","modified":1559743180830},{"_id":"source/images/blog_create/hexo_server_page.png","hash":"c892ff0546af11bbc2d3a5554554816825abf88a","modified":1559743180837},{"_id":"themes/material-x/.git/logs/refs/remotes/origin/HEAD","hash":"2451c35299a44b37f741a5f7ad8a3a998212b039","modified":1559743378410},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1559743378434},{"_id":"themes/material-x/.git/objects/pack/pack-790fc35b2a22e34971d2998d2646f5784a58e7d8.pack","hash":"11a8f8a13c5413c2e969ba9e0afa92fec4bb1eaa","modified":1559743378395},{"_id":"public/atom.xml","hash":"c96814d4896968a0f9ef4889de581cde69d21e8d","modified":1559797540174},{"_id":"public/content.json","hash":"31c0ce194c635ffe7771a12ae646958c0050d1af","modified":1559797540174},{"_id":"public/search.xml","hash":"af7c72bbf7393a4759c2823b4b535cb88d25df96","modified":1559797540425},{"_id":"public/404/index.html","hash":"cf433aa484c34fe588f1733baf68018efeebb3c1","modified":1559797540448},{"_id":"public/about/index.html","hash":"567f52741759fdca2acc732b48fa4f8ce307579a","modified":1559797540448},{"_id":"public/tags/index.html","hash":"27e6ba9778c22e52b189dac40a9da6393f4486e9","modified":1559797540448},{"_id":"public/2018/10/19/spring-cloud_zuul_01/index.html","hash":"c48132ffc57104646ae3985d0d73dfaf2a79c466","modified":1559797540448},{"_id":"public/2016/10/20/github-pages_init/index.html","hash":"12faa2bf21c86bb5feb02da4f7eb265f099bc598","modified":1559797540449},{"_id":"public/2016/07/27/zookeeper_curator/index.html","hash":"712715512f7f01d31f69ce00715faa752254afb0","modified":1559797540449},{"_id":"public/2016/07/26/zookeeper_java_api/index.html","hash":"f6766b30be5ba1e727e00524958d8f6e0a01f7cd","modified":1559797540449},{"_id":"public/2016/07/23/zookeeper_deploy_and_client_using/index.html","hash":"ff12ca34e183580bf05d54e176afd952010825d2","modified":1559797540449},{"_id":"public/2016/07/18/zookeeper_summary/index.html","hash":"5bf7fb7eea1cbad311788eb41ebcf93ccae4801a","modified":1559797540449},{"_id":"public/2016/07/10/zookeeper_paxos/index.html","hash":"3f3b294270cd8de0c689806619dcb58f8aee3556","modified":1559797540449},{"_id":"public/2016/07/03/tcp_connection/index.html","hash":"daab09775997a00024adc3b0be6f928bf931353f","modified":1559797540449},{"_id":"public/2016/05/22/db_trans/index.html","hash":"e7e9cd47e42701afad04d8c4711ad6fe17c6117e","modified":1559797540449},{"_id":"public/categories/Database/index.html","hash":"d6dd0e7411af6c679565c583bb23eff1f9c1d55d","modified":1559797540449},{"_id":"public/categories/TCP/index.html","hash":"0656a1b961b86f83184f9b306b9ad5c837c8be2f","modified":1559797540451},{"_id":"public/categories/Zookeeper/index.html","hash":"ee089f40c2281880302d312f2d794ed066194b9b","modified":1559797540451},{"_id":"public/categories/Github/index.html","hash":"fdc2b038b57d8c137911b428250630d93d573b5f","modified":1559797540451},{"_id":"public/categories/Spring-Cloud/index.html","hash":"26ef0877f7f080d7385726c1ba6de57f06a3117a","modified":1559797540451},{"_id":"public/archives/index.html","hash":"ab8a0933f235a5900de305c7d6eda7e6443efa34","modified":1559797540451},{"_id":"public/archives/2016/index.html","hash":"55631b7b231f219cff1414eb363f92471d6aa83f","modified":1559797540451},{"_id":"public/archives/2016/05/index.html","hash":"02e91ce270dcbc8b4b4edac75f5b7c56256102bb","modified":1559797540451},{"_id":"public/archives/2016/07/index.html","hash":"d5b966de1b55989a3b12569a1242592ae2d94bdf","modified":1559797540451},{"_id":"public/archives/2016/10/index.html","hash":"f0010d32bd490acb43fc14167fd01ea4227bfd23","modified":1559797540451},{"_id":"public/archives/2018/index.html","hash":"bee78878bd2b951a1cbe19dc2c99b1f792dd07fe","modified":1559797540452},{"_id":"public/archives/2018/10/index.html","hash":"49f9bd1c4b69538032a85d077093320f38061666","modified":1559797540452},{"_id":"public/index.html","hash":"95216ad64da045a523fbc461a83b89d34aabfed0","modified":1559797540452},{"_id":"public/tags/数据库/index.html","hash":"9a296a3509aa75898bed4a97478885bc1c3652dd","modified":1559797540452},{"_id":"public/tags/TCP/index.html","hash":"1f2c6e2b9784473c201682fdf61c754fbe3dbd19","modified":1559797540452},{"_id":"public/tags/Zookeeper/index.html","hash":"643f7ed655b34120224444f2df724576f502402f","modified":1559797540452},{"_id":"public/tags/Github/index.html","hash":"0eeebcba47f95625de61d7e39d9c21397426e5c8","modified":1559797540452},{"_id":"public/tags/Zuul/index.html","hash":"27ad2e73c9c08ca47515d83eae8bc2a5c088af3d","modified":1559797540452},{"_id":"public/CNAME","hash":"a4a2a3821004a971b91d6f18e70770a2b7bb75c7","modified":1559797540472},{"_id":"public/images/yumao.jpg","hash":"9d1a717616b215ffac5319302cd9289ec37ae24a","modified":1559797540472},{"_id":"public/images/15397653100461/15398532205321.jpg","hash":"dacd51d39ba9ca4b557c6371a7da0582857d1c62","modified":1559797540472},{"_id":"public/images/15397653100461/15397741541838.png","hash":"c5cf2b82ecf145af272c77ade6f6c70d90933610","modified":1559797540473},{"_id":"public/images/15397653100461/Spring Cloud Zuul 01.jpg","hash":"8d71268c4a20da9b99401406e110f6e761d2beb6","modified":1559797540473},{"_id":"public/images/15397653100461/Spring Cloud Zuul 02.jpg","hash":"8b553f8cab02fc1733c911799b80065884943a7e","modified":1559797540473},{"_id":"public/images/blog_create/git_branch.png","hash":"9c77d880ce6e0f0c35791ac17083115ca3b107ca","modified":1559797540473},{"_id":"public/images/15239442308370/zuul_locator.jpg","hash":"dfbfad210649d001e9bd5dabf71bebf2e9a48532","modified":1559797540473},{"_id":"public/images/blog_create/hexo_files.png","hash":"94171547d5c7529603c491cb22d218b7557adbb8","modified":1559797540473},{"_id":"public/images/blog_create/hexo_files_after_generate_1.png","hash":"b3b5d340cd6478f508468a7e2633a297c4d0fc20","modified":1559797540473},{"_id":"public/images/blog_create/hexo_files_after_generate_2.png","hash":"be3e2028b75a17c934e5cf53a251fb5d899ea67c","modified":1559797540473},{"_id":"public/images/blog_create/jekyll_default_page.png","hash":"6f34123cb958843bac5dd5c1b452fae69823d5ec","modified":1559797540473},{"_id":"public/images/blog_create/jekyll_files.png","hash":"4dadd12045ea80dd27f99e3aab694f231a510cb1","modified":1559797540473},{"_id":"public/images/curator/retrypolicy_extends.png","hash":"d4ae905fef78cf55251df81987acfcd37404c6d4","modified":1559797540473},{"_id":"public/images/blog_create/settings_lunch.png","hash":"10dc80584286fe3017864b205f0a4038932ba167","modified":1559797540473},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1559797540474},{"_id":"public/images/15397653100461/15398533229844.jpg","hash":"de136d7ea7d362fe24d20e6589d9896bf8398ced","modified":1559797540474},{"_id":"public/images/networking_protocol/tcp/2016_07_03_01.jpg","hash":"6fbddcb68da45b4aa17561bdecd20b013e006c63","modified":1559797540474},{"_id":"public/images/db/transaction/2016_05_26_lost_update.png","hash":"481d4c6f46e22ae6533fb15912e516e83f22705c","modified":1559797540474},{"_id":"public/images/networking_protocol/tcp/2016_07_03_02.jpg","hash":"ccb8d1b6516ae3c7c1d64b1552ad53132399469e","modified":1559797540474},{"_id":"public/images/db/transaction/2016_05_26_dirty_reads.png","hash":"ef89b15685612b877aa4c7278ff30e6adbf84d55","modified":1559797540474},{"_id":"public/images/db/transaction/2016_05_26_non_repeatable_reads.png","hash":"52086e3df5a1a0a71f6d0878f32d693b40490225","modified":1559797540474},{"_id":"public/images/zookeeper/zab/2016_07_18_zab_message_broadcast.png","hash":"0ab1ba5a166197ad7708488be8fbee1c9afa4c47","modified":1559797540474},{"_id":"public/images/15397653100461/Spring Cloud Zuul 02 -1-.jpg","hash":"3c60a77376c8bbeefa0d2682fafe6c69ef3687d0","modified":1559797540496},{"_id":"public/images/15397653100461/Spring Cloud Zuul 03.jpg","hash":"cdf6f4d91bcd70a291c38e4be9a48f9b99de919b","modified":1559797540496},{"_id":"public/images/blog_create/create_repository.png","hash":"9cf2dff102ac975b7bd6d568941a889090dd3c59","modified":1559797540496},{"_id":"public/images/blog_create/hexo_clean.png","hash":"2656b89b1834272c55bc945ed0ddb675966e8294","modified":1559797540496},{"_id":"public/images/15397653100461/15398449182455.jpg","hash":"65df07a0a2bfc1c864d87dd10110e0c9285c679c","modified":1559797540496},{"_id":"public/images/blog_create/hexo_github.png","hash":"e4a98cbf795c9ee8bc0300f29c0471c049bc79ec","modified":1559797540496},{"_id":"public/images/blog_create/lunch_page1.png","hash":"aae51818c3a82241b5d5536e2791a163f90c6470","modified":1559797540496},{"_id":"public/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1559797540501},{"_id":"public/images/blog_create/settings_theme.png","hash":"ab547f02878bb10d62ecec10a966c6baa0fcc0c3","modified":1559797540501},{"_id":"public/images/db/transaction/2016_05_26_transaction_isolation_level.png","hash":"4be9f35f444793aae1505124919a93babc853dc9","modified":1559797540501},{"_id":"public/images/15397653100461/15398531067119.jpg","hash":"c1bee0234c6e7fe71d1be52dcf8971aa84273650","modified":1559797540505},{"_id":"public/images/15397653100461/15398454116261.jpg","hash":"23e190701da3cd54cf2b9e71d6707badf7fec344","modified":1559797540505},{"_id":"public/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1559797540510},{"_id":"public/images/15397653100461/15398306875833.jpg","hash":"beb604ace582949c40443aa6dff0da061e16c971","modified":1559797540510},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1559797540602},{"_id":"public/style.css","hash":"e66b26d5eed8f6eff20287247b0c86f1e6aa2644","modified":1559797541003},{"_id":"public/images/15397653100461/15399408807599.jpg","hash":"ec8d1ed91f33a353db329160944f4b75d8a0e48b","modified":1559797541003},{"_id":"public/images/blog_create/hexo_server_page.png","hash":"c892ff0546af11bbc2d3a5554554816825abf88a","modified":1559797541007},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1559797541007},{"_id":"public/js/volantis.js","hash":"28fcd2db5a696d2f327eb53d95e711c3f2574240","modified":1559797541015}],"Category":[{"name":"Database","_id":"cjwjetpra00044ezrh2hi1le8"},{"name":"TCP","_id":"cjwjetprg00094ezrpg0h7lvs"},{"name":"Zookeeper","_id":"cjwjetprj000d4ezrjk8sg121"},{"name":"Github","_id":"cjwjetpsq000x4ezrih0qtwhc"},{"name":"Spring Cloud","_id":"cjwjetptl00144ezr6qjl1r6y"}],"Data":[],"Page":[{"title":"404","date":"2016-07-22T09:56:56.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2016-07-22 17:56:56\n---\n","updated":"2019-06-05T13:59:40.812Z","path":"404/index.html","comments":1,"layout":"page","_id":"cjwjetpr000004ezru10ekw3r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2016-07-22T02:18:45.000Z","_content":"\n### 关于我\n\n>\n>初级java码农一枚\n\n---\n\n### 联系我\n> * email：[wr4javaee@126.com](mailto:{{ site.email }})\n> * QQ：332863826\n\n---\n\n### 模板来源\n>\n>模板作者：[MOxFIVE](http://moxfive.xyz/)\n\n---","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-22 10:18:45\n---\n\n### 关于我\n\n>\n>初级java码农一枚\n\n---\n\n### 联系我\n> * email：[wr4javaee@126.com](mailto:{{ site.email }})\n> * QQ：332863826\n\n---\n\n### 模板来源\n>\n>模板作者：[MOxFIVE](http://moxfive.xyz/)\n\n---","updated":"2019-06-05T13:59:40.816Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwjetpr700024ezrsgh4g9ov","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>初级java码农一枚</p>\n</blockquote>\n<hr>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<ul>\n<li>email：<a href=\"mailto:\" target=\"_blank\" rel=\"noopener\">wr4javaee@126.com</a></li>\n<li>QQ：332863826</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"模板来源\"><a href=\"#模板来源\" class=\"headerlink\" title=\"模板来源\"></a>模板来源</h3><blockquote>\n<p>模板作者：<a href=\"http://moxfive.xyz/\" target=\"_blank\" rel=\"noopener\">MOxFIVE</a></p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>初级java码农一枚</p>\n</blockquote>\n<hr>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<ul>\n<li>email：<a href=\"mailto:\" target=\"_blank\" rel=\"noopener\">wr4javaee@126.com</a></li>\n<li>QQ：332863826</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"模板来源\"><a href=\"#模板来源\" class=\"headerlink\" title=\"模板来源\"></a>模板来源</h3><blockquote>\n<p>模板作者：<a href=\"http://moxfive.xyz/\" target=\"_blank\" rel=\"noopener\">MOxFIVE</a></p>\n</blockquote>\n<hr>\n"},{"title":"tags","date":"2016-07-22T02:17:44.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-22 10:17:44\n---\n","updated":"2019-06-05T13:59:40.844Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjwjetpsa000s4ezro65pr4c6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"数据库学习笔记 - 数据库保护","date":"2016-05-21T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\n## 什么是事务（Transaction）\n\n事务是用户定义的数据操作系列，这些操作可作为一个完整的工作单元（数据库的逻辑工作单位）。\n<!-- more -->\n\n---\n\n\n\n## 事务的特性（ACID）\n\n* 原子性（Atomicity）事务中的操作要么都做，要么都不做。\n* 一致性（Consistency）只有合法的数据可以被写入数据库，否则事务应该将其回滚到最初状态。\n* 隔离性（Isolation）数据库中一个事务的执行不能被其他事务干扰。\n* 持久性（Durability）事务一旦提交，其对数据库中数据的改变就是永久的。\n\n---\n\n\n\n## 并发控制\n\n并发问题导致的异常情况归类如下：\n\n#### 丢失更新（Lost Update）\n\n两个事务都同时更新一行数据，第一个事务的提交结果被第二个事务的提交结果破坏。\n\n\n\n![lost_update](/images/db/transaction/2016_05_26_lost_update.png)\n\n\n\n#### 脏读（Dirty Reads）\n\n一个事务读了某个失败事务运行过程中的数据。\n\n![ldirty_reads](/images/db/transaction/2016_05_26_dirty_reads.png)\n\n\n\n#### 不可重复读（Non-repeatable Reads）\n\n一个事务对同一行数据重复读取两次，但是却得到了不同的结果。\n\n![non_repeatable_reads](/images/db/transaction/2016_05_26_non_repeatable_reads.png)\n\n\n\n#### 幻读（Phantom Reads）\n\n幻读实际属于不可重复读的范畴。它指当事务T1按照一定条件读取某些数据，事务T2对其中部分记录做了删除或更新操作，当事务T1再次以相同条件读取数据时，发现少或多了某些记录。\n\n---\n\n## 事务的隔离级别\n\n#### 未授权读取（Read Uncommitted）\n也称读未提交，隔离级别最低，允许脏读。\n\n#### 授权读取（Read Committed）\n也称读已提交，允许不可重复读。\n\n#### 可重复读（Repeatable Read）\n允许出现幻读。\n\n#### 串行化（Serializable）\n最严格的事务隔离级别，要求所有事务都被串行执行。\n\n![transaction_isolation_level](/images/db/transaction/2016_05_26_transaction_isolation_level.png)\n\n| 隔离级别  | 脏读   | 可重复读 | 幻读   |\n| ----- | ---- | ---- | ---- |\n| 未授权读取 | 存在   | 不可以  | 存在   |\n| 授权读取  | 不存在  | 不可以  | 存在   |\n| 可重复读取 | 不存在  | 可以   | 存在   |\n| 串行化   | 不存在  | 可以   | 不存在  |\n\n# 分布式事务\n\n## CAP定理\n一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance），最多只能同时满足其中两项。\n\n## BASE理论\n\n# 一致性协议\n\n协调者：统一调度所有分布式节点执行逻辑组件。\n参与者：被协调者调度的分布式节点。\n\n## 2PC二阶段提交协议（Two-Phase Commit）\n\n## 3PC\n\n# 锁\n\n## 悲观锁（Pessimistic Concurrency Control， PCC）\n又称排他锁，若事务T1使用悲观锁对数据进行处理，则处理完成前，其他事务均不能对数据进行更新操作。\n\n## 乐观锁 （Optimistic Concurrency Control， OCC）\n乐观锁事务控制分为三阶段，分别是：数据读取、写入校验、数据写入。\n\n","source":"_posts/db_trans.md","raw":"---\ntitle:  \"数据库学习笔记 - 数据库保护\"\ndate: 2016-05-22 00:00:00\ncategories: Database\ntags: 数据库\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\n## 什么是事务（Transaction）\n\n事务是用户定义的数据操作系列，这些操作可作为一个完整的工作单元（数据库的逻辑工作单位）。\n<!-- more -->\n\n---\n\n\n\n## 事务的特性（ACID）\n\n* 原子性（Atomicity）事务中的操作要么都做，要么都不做。\n* 一致性（Consistency）只有合法的数据可以被写入数据库，否则事务应该将其回滚到最初状态。\n* 隔离性（Isolation）数据库中一个事务的执行不能被其他事务干扰。\n* 持久性（Durability）事务一旦提交，其对数据库中数据的改变就是永久的。\n\n---\n\n\n\n## 并发控制\n\n并发问题导致的异常情况归类如下：\n\n#### 丢失更新（Lost Update）\n\n两个事务都同时更新一行数据，第一个事务的提交结果被第二个事务的提交结果破坏。\n\n\n\n![lost_update](/images/db/transaction/2016_05_26_lost_update.png)\n\n\n\n#### 脏读（Dirty Reads）\n\n一个事务读了某个失败事务运行过程中的数据。\n\n![ldirty_reads](/images/db/transaction/2016_05_26_dirty_reads.png)\n\n\n\n#### 不可重复读（Non-repeatable Reads）\n\n一个事务对同一行数据重复读取两次，但是却得到了不同的结果。\n\n![non_repeatable_reads](/images/db/transaction/2016_05_26_non_repeatable_reads.png)\n\n\n\n#### 幻读（Phantom Reads）\n\n幻读实际属于不可重复读的范畴。它指当事务T1按照一定条件读取某些数据，事务T2对其中部分记录做了删除或更新操作，当事务T1再次以相同条件读取数据时，发现少或多了某些记录。\n\n---\n\n## 事务的隔离级别\n\n#### 未授权读取（Read Uncommitted）\n也称读未提交，隔离级别最低，允许脏读。\n\n#### 授权读取（Read Committed）\n也称读已提交，允许不可重复读。\n\n#### 可重复读（Repeatable Read）\n允许出现幻读。\n\n#### 串行化（Serializable）\n最严格的事务隔离级别，要求所有事务都被串行执行。\n\n![transaction_isolation_level](/images/db/transaction/2016_05_26_transaction_isolation_level.png)\n\n| 隔离级别  | 脏读   | 可重复读 | 幻读   |\n| ----- | ---- | ---- | ---- |\n| 未授权读取 | 存在   | 不可以  | 存在   |\n| 授权读取  | 不存在  | 不可以  | 存在   |\n| 可重复读取 | 不存在  | 可以   | 存在   |\n| 串行化   | 不存在  | 可以   | 不存在  |\n\n# 分布式事务\n\n## CAP定理\n一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance），最多只能同时满足其中两项。\n\n## BASE理论\n\n# 一致性协议\n\n协调者：统一调度所有分布式节点执行逻辑组件。\n参与者：被协调者调度的分布式节点。\n\n## 2PC二阶段提交协议（Two-Phase Commit）\n\n## 3PC\n\n# 锁\n\n## 悲观锁（Pessimistic Concurrency Control， PCC）\n又称排他锁，若事务T1使用悲观锁对数据进行处理，则处理完成前，其他事务均不能对数据进行更新操作。\n\n## 乐观锁 （Optimistic Concurrency Control， OCC）\n乐观锁事务控制分为三阶段，分别是：数据读取、写入校验、数据写入。\n\n","slug":"db_trans","published":1,"updated":"2019-06-05T13:59:40.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetpr200014ezrbrg4qlsu","content":"<h2 id=\"什么是事务（Transaction）\"><a href=\"#什么是事务（Transaction）\" class=\"headerlink\" title=\"什么是事务（Transaction）\"></a>什么是事务（Transaction）</h2><p>事务是用户定义的数据操作系列，这些操作可作为一个完整的工作单元（数据库的逻辑工作单位）。</p>\n<a id=\"more\"></a>\n\n<hr>\n<h2 id=\"事务的特性（ACID）\"><a href=\"#事务的特性（ACID）\" class=\"headerlink\" title=\"事务的特性（ACID）\"></a>事务的特性（ACID）</h2><ul>\n<li>原子性（Atomicity）事务中的操作要么都做，要么都不做。</li>\n<li>一致性（Consistency）只有合法的数据可以被写入数据库，否则事务应该将其回滚到最初状态。</li>\n<li>隔离性（Isolation）数据库中一个事务的执行不能被其他事务干扰。</li>\n<li>持久性（Durability）事务一旦提交，其对数据库中数据的改变就是永久的。</li>\n</ul>\n<hr>\n<h2 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h2><p>并发问题导致的异常情况归类如下：</p>\n<h4 id=\"丢失更新（Lost-Update）\"><a href=\"#丢失更新（Lost-Update）\" class=\"headerlink\" title=\"丢失更新（Lost Update）\"></a>丢失更新（Lost Update）</h4><p>两个事务都同时更新一行数据，第一个事务的提交结果被第二个事务的提交结果破坏。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_lost_update.png\" alt=\"lost_update\"></p>\n<h4 id=\"脏读（Dirty-Reads）\"><a href=\"#脏读（Dirty-Reads）\" class=\"headerlink\" title=\"脏读（Dirty Reads）\"></a>脏读（Dirty Reads）</h4><p>一个事务读了某个失败事务运行过程中的数据。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_dirty_reads.png\" alt=\"ldirty_reads\"></p>\n<h4 id=\"不可重复读（Non-repeatable-Reads）\"><a href=\"#不可重复读（Non-repeatable-Reads）\" class=\"headerlink\" title=\"不可重复读（Non-repeatable Reads）\"></a>不可重复读（Non-repeatable Reads）</h4><p>一个事务对同一行数据重复读取两次，但是却得到了不同的结果。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_non_repeatable_reads.png\" alt=\"non_repeatable_reads\"></p>\n<h4 id=\"幻读（Phantom-Reads）\"><a href=\"#幻读（Phantom-Reads）\" class=\"headerlink\" title=\"幻读（Phantom Reads）\"></a>幻读（Phantom Reads）</h4><p>幻读实际属于不可重复读的范畴。它指当事务T1按照一定条件读取某些数据，事务T2对其中部分记录做了删除或更新操作，当事务T1再次以相同条件读取数据时，发现少或多了某些记录。</p>\n<hr>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><h4 id=\"未授权读取（Read-Uncommitted）\"><a href=\"#未授权读取（Read-Uncommitted）\" class=\"headerlink\" title=\"未授权读取（Read Uncommitted）\"></a>未授权读取（Read Uncommitted）</h4><p>也称读未提交，隔离级别最低，允许脏读。</p>\n<h4 id=\"授权读取（Read-Committed）\"><a href=\"#授权读取（Read-Committed）\" class=\"headerlink\" title=\"授权读取（Read Committed）\"></a>授权读取（Read Committed）</h4><p>也称读已提交，允许不可重复读。</p>\n<h4 id=\"可重复读（Repeatable-Read）\"><a href=\"#可重复读（Repeatable-Read）\" class=\"headerlink\" title=\"可重复读（Repeatable Read）\"></a>可重复读（Repeatable Read）</h4><p>允许出现幻读。</p>\n<h4 id=\"串行化（Serializable）\"><a href=\"#串行化（Serializable）\" class=\"headerlink\" title=\"串行化（Serializable）\"></a>串行化（Serializable）</h4><p>最严格的事务隔离级别，要求所有事务都被串行执行。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_transaction_isolation_level.png\" alt=\"transaction_isolation_level\"></p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>未授权读取</td>\n<td>存在</td>\n<td>不可以</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>授权读取</td>\n<td>不存在</td>\n<td>不可以</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>可重复读取</td>\n<td>不存在</td>\n<td>可以</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>串行化</td>\n<td>不存在</td>\n<td>可以</td>\n<td>不存在</td>\n</tr>\n</tbody></table>\n<h1 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h1><h2 id=\"CAP定理\"><a href=\"#CAP定理\" class=\"headerlink\" title=\"CAP定理\"></a>CAP定理</h2><p>一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance），最多只能同时满足其中两项。</p>\n<h2 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h2><h1 id=\"一致性协议\"><a href=\"#一致性协议\" class=\"headerlink\" title=\"一致性协议\"></a>一致性协议</h1><p>协调者：统一调度所有分布式节点执行逻辑组件。<br>参与者：被协调者调度的分布式节点。</p>\n<h2 id=\"2PC二阶段提交协议（Two-Phase-Commit）\"><a href=\"#2PC二阶段提交协议（Two-Phase-Commit）\" class=\"headerlink\" title=\"2PC二阶段提交协议（Two-Phase Commit）\"></a>2PC二阶段提交协议（Two-Phase Commit）</h2><h2 id=\"3PC\"><a href=\"#3PC\" class=\"headerlink\" title=\"3PC\"></a>3PC</h2><h1 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h1><h2 id=\"悲观锁（Pessimistic-Concurrency-Control，-PCC）\"><a href=\"#悲观锁（Pessimistic-Concurrency-Control，-PCC）\" class=\"headerlink\" title=\"悲观锁（Pessimistic Concurrency Control， PCC）\"></a>悲观锁（Pessimistic Concurrency Control， PCC）</h2><p>又称排他锁，若事务T1使用悲观锁对数据进行处理，则处理完成前，其他事务均不能对数据进行更新操作。</p>\n<h2 id=\"乐观锁-（Optimistic-Concurrency-Control，-OCC）\"><a href=\"#乐观锁-（Optimistic-Concurrency-Control，-OCC）\" class=\"headerlink\" title=\"乐观锁 （Optimistic Concurrency Control， OCC）\"></a>乐观锁 （Optimistic Concurrency Control， OCC）</h2><p>乐观锁事务控制分为三阶段，分别是：数据读取、写入校验、数据写入。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是事务（Transaction）\"><a href=\"#什么是事务（Transaction）\" class=\"headerlink\" title=\"什么是事务（Transaction）\"></a>什么是事务（Transaction）</h2><p>事务是用户定义的数据操作系列，这些操作可作为一个完整的工作单元（数据库的逻辑工作单位）。</p>","more":"<hr>\n<h2 id=\"事务的特性（ACID）\"><a href=\"#事务的特性（ACID）\" class=\"headerlink\" title=\"事务的特性（ACID）\"></a>事务的特性（ACID）</h2><ul>\n<li>原子性（Atomicity）事务中的操作要么都做，要么都不做。</li>\n<li>一致性（Consistency）只有合法的数据可以被写入数据库，否则事务应该将其回滚到最初状态。</li>\n<li>隔离性（Isolation）数据库中一个事务的执行不能被其他事务干扰。</li>\n<li>持久性（Durability）事务一旦提交，其对数据库中数据的改变就是永久的。</li>\n</ul>\n<hr>\n<h2 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h2><p>并发问题导致的异常情况归类如下：</p>\n<h4 id=\"丢失更新（Lost-Update）\"><a href=\"#丢失更新（Lost-Update）\" class=\"headerlink\" title=\"丢失更新（Lost Update）\"></a>丢失更新（Lost Update）</h4><p>两个事务都同时更新一行数据，第一个事务的提交结果被第二个事务的提交结果破坏。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_lost_update.png\" alt=\"lost_update\"></p>\n<h4 id=\"脏读（Dirty-Reads）\"><a href=\"#脏读（Dirty-Reads）\" class=\"headerlink\" title=\"脏读（Dirty Reads）\"></a>脏读（Dirty Reads）</h4><p>一个事务读了某个失败事务运行过程中的数据。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_dirty_reads.png\" alt=\"ldirty_reads\"></p>\n<h4 id=\"不可重复读（Non-repeatable-Reads）\"><a href=\"#不可重复读（Non-repeatable-Reads）\" class=\"headerlink\" title=\"不可重复读（Non-repeatable Reads）\"></a>不可重复读（Non-repeatable Reads）</h4><p>一个事务对同一行数据重复读取两次，但是却得到了不同的结果。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_non_repeatable_reads.png\" alt=\"non_repeatable_reads\"></p>\n<h4 id=\"幻读（Phantom-Reads）\"><a href=\"#幻读（Phantom-Reads）\" class=\"headerlink\" title=\"幻读（Phantom Reads）\"></a>幻读（Phantom Reads）</h4><p>幻读实际属于不可重复读的范畴。它指当事务T1按照一定条件读取某些数据，事务T2对其中部分记录做了删除或更新操作，当事务T1再次以相同条件读取数据时，发现少或多了某些记录。</p>\n<hr>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><h4 id=\"未授权读取（Read-Uncommitted）\"><a href=\"#未授权读取（Read-Uncommitted）\" class=\"headerlink\" title=\"未授权读取（Read Uncommitted）\"></a>未授权读取（Read Uncommitted）</h4><p>也称读未提交，隔离级别最低，允许脏读。</p>\n<h4 id=\"授权读取（Read-Committed）\"><a href=\"#授权读取（Read-Committed）\" class=\"headerlink\" title=\"授权读取（Read Committed）\"></a>授权读取（Read Committed）</h4><p>也称读已提交，允许不可重复读。</p>\n<h4 id=\"可重复读（Repeatable-Read）\"><a href=\"#可重复读（Repeatable-Read）\" class=\"headerlink\" title=\"可重复读（Repeatable Read）\"></a>可重复读（Repeatable Read）</h4><p>允许出现幻读。</p>\n<h4 id=\"串行化（Serializable）\"><a href=\"#串行化（Serializable）\" class=\"headerlink\" title=\"串行化（Serializable）\"></a>串行化（Serializable）</h4><p>最严格的事务隔离级别，要求所有事务都被串行执行。</p>\n<p><img src=\"/images/db/transaction/2016_05_26_transaction_isolation_level.png\" alt=\"transaction_isolation_level\"></p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>未授权读取</td>\n<td>存在</td>\n<td>不可以</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>授权读取</td>\n<td>不存在</td>\n<td>不可以</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>可重复读取</td>\n<td>不存在</td>\n<td>可以</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>串行化</td>\n<td>不存在</td>\n<td>可以</td>\n<td>不存在</td>\n</tr>\n</tbody></table>\n<h1 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h1><h2 id=\"CAP定理\"><a href=\"#CAP定理\" class=\"headerlink\" title=\"CAP定理\"></a>CAP定理</h2><p>一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance），最多只能同时满足其中两项。</p>\n<h2 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h2><h1 id=\"一致性协议\"><a href=\"#一致性协议\" class=\"headerlink\" title=\"一致性协议\"></a>一致性协议</h1><p>协调者：统一调度所有分布式节点执行逻辑组件。<br>参与者：被协调者调度的分布式节点。</p>\n<h2 id=\"2PC二阶段提交协议（Two-Phase-Commit）\"><a href=\"#2PC二阶段提交协议（Two-Phase-Commit）\" class=\"headerlink\" title=\"2PC二阶段提交协议（Two-Phase Commit）\"></a>2PC二阶段提交协议（Two-Phase Commit）</h2><h2 id=\"3PC\"><a href=\"#3PC\" class=\"headerlink\" title=\"3PC\"></a>3PC</h2><h1 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h1><h2 id=\"悲观锁（Pessimistic-Concurrency-Control，-PCC）\"><a href=\"#悲观锁（Pessimistic-Concurrency-Control，-PCC）\" class=\"headerlink\" title=\"悲观锁（Pessimistic Concurrency Control， PCC）\"></a>悲观锁（Pessimistic Concurrency Control， PCC）</h2><p>又称排他锁，若事务T1使用悲观锁对数据进行处理，则处理完成前，其他事务均不能对数据进行更新操作。</p>\n<h2 id=\"乐观锁-（Optimistic-Concurrency-Control，-OCC）\"><a href=\"#乐观锁-（Optimistic-Concurrency-Control，-OCC）\" class=\"headerlink\" title=\"乐观锁 （Optimistic Concurrency Control， OCC）\"></a>乐观锁 （Optimistic Concurrency Control， OCC）</h2><p>乐观锁事务控制分为三阶段，分别是：数据读取、写入校验、数据写入。</p>"},{"title":"TCP长连接与短连接的区别","date":"2016-07-02T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\n## TCP连接\n\n当网络通信时采用TCP协议时，在真正的读写操作之前，server与client之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立是需要三次握手的，而释放则需要4次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。\n\n<!-- more -->\n\n经典的三次握手示意图：\n\n![tcp_connection](/images/networking_protocol/tcp/2016_07_03_01.jpg)\n\n经典的四次握手关闭图：\n![tcp_connection](/images/networking_protocol/tcp/2016_07_03_02.jpg)\n\n---\n\n\n\n\n## TCP短连接\n我们模拟一下TCP短连接的情况，client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次读写就完成了，这时候双方任何一个都可以发起close操作，不过一般都是client先发起close操作。为什么呢，一般的server不会回复完client后立即关闭连接的，当然不排除有特殊的情况。从上面的描述看，短连接一般只会在client/server间传递一次读写操作\n\n短连接的优点是：管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段\n\n---\n\n## TCP长连接\n\n接下来我们再模拟一下长连接的情况，client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。\n\n首先说一下TCP/IP详解上讲到的TCP保活功能，保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃，从而可以代表客户使用资源。如果客户已经消失，使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，则服务器将应远等待客户端的数据，保活功能就是试图在服务器端检测到这种半开放的连接。\n\n如果一个给定的连接在两小时内没有任何的动作，则服务器就向客户发一个探测报文段，客户主机必须处于以下4个状态之一：\n* 客户主机依然正常运行，并从服务器可达。客户的TCP响应正常，而服务器也知道对方是正常的，服务器在两小时后将保活定时器复位。\n* 客户主机已经崩溃，并且关闭或者正在重新启动。在任何一种情况下，客户的TCP都没有响应。服务端将不能收到对探测的响应，并在75秒后超时。服务器总共发送10个这样的探测 ，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。\n* 客户主机崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。\n* 客户机正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探查的响应。\n* \n  从上面可以看出，TCP保活功能主要为探测长连接的存活状况，不过这里存在一个问题，存活功能的探测周期太长，还有就是它只是探测TCP连接的存活，属于比较斯文的做法，遇到恶意的连接时，保活功能就不够使了。\n\n在长连接的应用场景下，client端一般不会主动关闭它们之间的连接，Client与server之间的连接如果一直不关闭的话，会存在一个问题，随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，这样可以完全避免某个蛋疼的客户端连累后端服务。\n\n长连接和短连接的产生在于client和server采取的关闭策略，具体的应用场景采用具体的策略，没有十全十美的选择，只有合适的选择。\n\n---\n\n本文转自http://www.cnblogs.com/beifei/archive/2011/06/26/2090611.html\n\n---\n","source":"_posts/tcp_connection.md","raw":"---\ntitle:  \"TCP长连接与短连接的区别\"\ndate: 2016-07-03 00:00:00\ncategories: TCP\ntags: TCP\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\n## TCP连接\n\n当网络通信时采用TCP协议时，在真正的读写操作之前，server与client之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立是需要三次握手的，而释放则需要4次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。\n\n<!-- more -->\n\n经典的三次握手示意图：\n\n![tcp_connection](/images/networking_protocol/tcp/2016_07_03_01.jpg)\n\n经典的四次握手关闭图：\n![tcp_connection](/images/networking_protocol/tcp/2016_07_03_02.jpg)\n\n---\n\n\n\n\n## TCP短连接\n我们模拟一下TCP短连接的情况，client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次读写就完成了，这时候双方任何一个都可以发起close操作，不过一般都是client先发起close操作。为什么呢，一般的server不会回复完client后立即关闭连接的，当然不排除有特殊的情况。从上面的描述看，短连接一般只会在client/server间传递一次读写操作\n\n短连接的优点是：管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段\n\n---\n\n## TCP长连接\n\n接下来我们再模拟一下长连接的情况，client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。\n\n首先说一下TCP/IP详解上讲到的TCP保活功能，保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃，从而可以代表客户使用资源。如果客户已经消失，使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，则服务器将应远等待客户端的数据，保活功能就是试图在服务器端检测到这种半开放的连接。\n\n如果一个给定的连接在两小时内没有任何的动作，则服务器就向客户发一个探测报文段，客户主机必须处于以下4个状态之一：\n* 客户主机依然正常运行，并从服务器可达。客户的TCP响应正常，而服务器也知道对方是正常的，服务器在两小时后将保活定时器复位。\n* 客户主机已经崩溃，并且关闭或者正在重新启动。在任何一种情况下，客户的TCP都没有响应。服务端将不能收到对探测的响应，并在75秒后超时。服务器总共发送10个这样的探测 ，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。\n* 客户主机崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。\n* 客户机正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探查的响应。\n* \n  从上面可以看出，TCP保活功能主要为探测长连接的存活状况，不过这里存在一个问题，存活功能的探测周期太长，还有就是它只是探测TCP连接的存活，属于比较斯文的做法，遇到恶意的连接时，保活功能就不够使了。\n\n在长连接的应用场景下，client端一般不会主动关闭它们之间的连接，Client与server之间的连接如果一直不关闭的话，会存在一个问题，随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，这样可以完全避免某个蛋疼的客户端连累后端服务。\n\n长连接和短连接的产生在于client和server采取的关闭策略，具体的应用场景采用具体的策略，没有十全十美的选择，只有合适的选择。\n\n---\n\n本文转自http://www.cnblogs.com/beifei/archive/2011/06/26/2090611.html\n\n---\n","slug":"tcp_connection","published":1,"updated":"2019-06-05T13:59:40.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetpr800034ezrqkz1vy5h","content":"<h2 id=\"TCP连接\"><a href=\"#TCP连接\" class=\"headerlink\" title=\"TCP连接\"></a>TCP连接</h2><p>当网络通信时采用TCP协议时，在真正的读写操作之前，server与client之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立是需要三次握手的，而释放则需要4次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。</p>\n<a id=\"more\"></a>\n\n<p>经典的三次握手示意图：</p>\n<p><img src=\"/images/networking_protocol/tcp/2016_07_03_01.jpg\" alt=\"tcp_connection\"></p>\n<p>经典的四次握手关闭图：<br><img src=\"/images/networking_protocol/tcp/2016_07_03_02.jpg\" alt=\"tcp_connection\"></p>\n<hr>\n<h2 id=\"TCP短连接\"><a href=\"#TCP短连接\" class=\"headerlink\" title=\"TCP短连接\"></a>TCP短连接</h2><p>我们模拟一下TCP短连接的情况，client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次读写就完成了，这时候双方任何一个都可以发起close操作，不过一般都是client先发起close操作。为什么呢，一般的server不会回复完client后立即关闭连接的，当然不排除有特殊的情况。从上面的描述看，短连接一般只会在client/server间传递一次读写操作</p>\n<p>短连接的优点是：管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段</p>\n<hr>\n<h2 id=\"TCP长连接\"><a href=\"#TCP长连接\" class=\"headerlink\" title=\"TCP长连接\"></a>TCP长连接</h2><p>接下来我们再模拟一下长连接的情况，client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。</p>\n<p>首先说一下TCP/IP详解上讲到的TCP保活功能，保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃，从而可以代表客户使用资源。如果客户已经消失，使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，则服务器将应远等待客户端的数据，保活功能就是试图在服务器端检测到这种半开放的连接。</p>\n<p>如果一个给定的连接在两小时内没有任何的动作，则服务器就向客户发一个探测报文段，客户主机必须处于以下4个状态之一：</p>\n<ul>\n<li>客户主机依然正常运行，并从服务器可达。客户的TCP响应正常，而服务器也知道对方是正常的，服务器在两小时后将保活定时器复位。</li>\n<li>客户主机已经崩溃，并且关闭或者正在重新启动。在任何一种情况下，客户的TCP都没有响应。服务端将不能收到对探测的响应，并在75秒后超时。服务器总共发送10个这样的探测 ，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。</li>\n<li>客户主机崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。</li>\n<li>客户机正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探查的响应。</li>\n<li>从上面可以看出，TCP保活功能主要为探测长连接的存活状况，不过这里存在一个问题，存活功能的探测周期太长，还有就是它只是探测TCP连接的存活，属于比较斯文的做法，遇到恶意的连接时，保活功能就不够使了。</li>\n</ul>\n<p>在长连接的应用场景下，client端一般不会主动关闭它们之间的连接，Client与server之间的连接如果一直不关闭的话，会存在一个问题，随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，这样可以完全避免某个蛋疼的客户端连累后端服务。</p>\n<p>长连接和短连接的产生在于client和server采取的关闭策略，具体的应用场景采用具体的策略，没有十全十美的选择，只有合适的选择。</p>\n<hr>\n<p>本文转自<a href=\"http://www.cnblogs.com/beifei/archive/2011/06/26/2090611.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/beifei/archive/2011/06/26/2090611.html</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"TCP连接\"><a href=\"#TCP连接\" class=\"headerlink\" title=\"TCP连接\"></a>TCP连接</h2><p>当网络通信时采用TCP协议时，在真正的读写操作之前，server与client之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立是需要三次握手的，而释放则需要4次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。</p>","more":"<p>经典的三次握手示意图：</p>\n<p><img src=\"/images/networking_protocol/tcp/2016_07_03_01.jpg\" alt=\"tcp_connection\"></p>\n<p>经典的四次握手关闭图：<br><img src=\"/images/networking_protocol/tcp/2016_07_03_02.jpg\" alt=\"tcp_connection\"></p>\n<hr>\n<h2 id=\"TCP短连接\"><a href=\"#TCP短连接\" class=\"headerlink\" title=\"TCP短连接\"></a>TCP短连接</h2><p>我们模拟一下TCP短连接的情况，client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次读写就完成了，这时候双方任何一个都可以发起close操作，不过一般都是client先发起close操作。为什么呢，一般的server不会回复完client后立即关闭连接的，当然不排除有特殊的情况。从上面的描述看，短连接一般只会在client/server间传递一次读写操作</p>\n<p>短连接的优点是：管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段</p>\n<hr>\n<h2 id=\"TCP长连接\"><a href=\"#TCP长连接\" class=\"headerlink\" title=\"TCP长连接\"></a>TCP长连接</h2><p>接下来我们再模拟一下长连接的情况，client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。</p>\n<p>首先说一下TCP/IP详解上讲到的TCP保活功能，保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃，从而可以代表客户使用资源。如果客户已经消失，使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，则服务器将应远等待客户端的数据，保活功能就是试图在服务器端检测到这种半开放的连接。</p>\n<p>如果一个给定的连接在两小时内没有任何的动作，则服务器就向客户发一个探测报文段，客户主机必须处于以下4个状态之一：</p>\n<ul>\n<li>客户主机依然正常运行，并从服务器可达。客户的TCP响应正常，而服务器也知道对方是正常的，服务器在两小时后将保活定时器复位。</li>\n<li>客户主机已经崩溃，并且关闭或者正在重新启动。在任何一种情况下，客户的TCP都没有响应。服务端将不能收到对探测的响应，并在75秒后超时。服务器总共发送10个这样的探测 ，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。</li>\n<li>客户主机崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。</li>\n<li>客户机正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探查的响应。</li>\n<li>从上面可以看出，TCP保活功能主要为探测长连接的存活状况，不过这里存在一个问题，存活功能的探测周期太长，还有就是它只是探测TCP连接的存活，属于比较斯文的做法，遇到恶意的连接时，保活功能就不够使了。</li>\n</ul>\n<p>在长连接的应用场景下，client端一般不会主动关闭它们之间的连接，Client与server之间的连接如果一直不关闭的话，会存在一个问题，随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，这样可以完全避免某个蛋疼的客户端连累后端服务。</p>\n<p>长连接和短连接的产生在于client和server采取的关闭策略，具体的应用场景采用具体的策略，没有十全十美的选择，只有合适的选择。</p>\n<hr>\n<p>本文转自<a href=\"http://www.cnblogs.com/beifei/archive/2011/06/26/2090611.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/beifei/archive/2011/06/26/2090611.html</a></p>\n<hr>"},{"title":"Zookeeper Curator的使用","date":"2016-07-26T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\n# 前言\nCurator是ZooKeeper的开源客户端。\n官网：http://curator.apache.org/\nAPI文档：http://curator.apache.org/apidocs/index.html\n<!-- more -->\n\n在工程中需要引入curator依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>org.apache.curator</groupId>\n\t\t<artifactId>curator-framework</artifactId>\n\t\t<version>${curator.version}</version>\n\t</dependency>\n```\n\n\n截止目前文章中使用的版本为3.2.0\n---\n\n## 创建Session\n\n###  使用CuratorFrameworkFactory创建Session\n\n可以通过newClient方法建立ZooKeeper会话，但这里推荐使用其自带的Builder模式，下面是newClient的官方API，Builder模式的case见下文。\n\n- #### newClient\n\n  ```\n  public static CuratorFramework newClient(String connectString,\n                                           RetryPolicy retryPolicy)\n  ```\n\n  Create a new client with default session timeout and default connection timeout\n\n  - Parameters:\n\n    `connectString` - list of servers to connect to\n\n    `retryPolicy` - retry policy to use\n\n  - Returns:\n\n    client\n\n\n- #### newClient\n\n  ```\n  public static CuratorFramework newClient(String connectString,\n                                           int sessionTimeoutMs,\n                                           int connectionTimeoutMs,\n                                           RetryPolicy retryPolicy)\n  ```\n\n  Create a new client\n\n  - Parameters:\n\n    `connectString` - list of servers to connect to\n\n    `sessionTimeoutMs` - session timeout\n\n    `connectionTimeoutMs` - connection timeout\n\n    `retryPolicy` - retry policy to use\n\n  - Returns:\n\n    client\n\n    ​\n\n\nRetryPolicy是Curator提供的创建会话的策略接口。\n\n```\n/**\n * Abstracts the policy to use when retrying connections\n */\npublic interface RetryPolicy\n{\n    /**\n     * Called when an operation has failed for some reason. This method should return\n     * true to make another attempt.\n     *\n     *\n     * @param retryCount the number of times retried so far (0 the first time)\n     * @param elapsedTimeMs the elapsed time in ms since the operation was attempted\n     * @param sleeper use this to sleep - DO NOT call Thread.sleep\n     * @return true/false\n     */\n    public boolean      allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper);\n}\n```\n\n官方提供的RetryPolicy的继承关系如下，我们也可通过继承RetryPolicy来实现自己的策略类。\n\n![retrypolicy_extends](images/curator/retrypolicy_extends.png)\n\n这里，我们使用ExponentialBackoffRetry这个重试策略来建立ZooKeeperSession。\n\n### case\n\n```java\npackage me.wangran.zookeeper.demo.curator;\n\nimport org.apache.curator.RetryPolicy;\nimport org.apache.curator.framework.CuratorFramework;\nimport org.apache.curator.framework.CuratorFrameworkFactory;\nimport org.apache.curator.retry.ExponentialBackoffRetry;\n\n/**\n * Curator创建SessionDemo\n * @author Wang Ran\n */\npublic class CuratorCreateSessionDemo {\n\n\tpublic static void main(String[] args) {\n\t\tcreateSessionDemo1();\n\t}\n\t\n\t/**\n\t * 使用CuratorFrameworkFactory创建Session\n\t */\n\tpublic static void createSessionDemo1() {\n\t\tString connectString = \"192.168.128.75:2181\";\n\t\tint baseSleepTimeMs = 1000; // 初始sleep时间\n\t\tint maxRetries = 100; // 最大重试次数\n\t\tint maxSleepMs = 25000; // 最大sleep时间\n\t\t// ExponentialBackoffRetry : Retry policy that retries a set number of \n\t\t// times with increasing sleep time between retries\n\t\tRetryPolicy retryPolicy = new ExponentialBackoffRetry(baseSleepTimeMs, maxRetries, maxSleepMs);\n\t\tint sessionTimeoutMs = 10000;\n\t\tint connectionTimeoutMs = 10000;\n\t\tCuratorFramework cff = CuratorFrameworkFactory.builder()\n\t\t\t\t.connectString(connectString)\n\t\t\t\t.retryPolicy(retryPolicy)\n\t\t\t\t.sessionTimeoutMs(sessionTimeoutMs)\n\t\t\t\t.connectionTimeoutMs(connectionTimeoutMs)\n\t\t\t\t.build();\n\t\tcff.start();\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"ZooKeeper current state is \" + cff.getState());\n\t}\n}\n```\n\n当我运行该代码后，控制台报错如下：\n\n```\nException in thread \"main\" java.lang.NoSuchMethodError: org.apache.zookeeper.server.quorum.flexible.QuorumMaj.<init>(Ljava/util/Map;)V\n\tat org.apache.curator.framework.imps.EnsembleTracker.<init>(EnsembleTracker.java:57)\n\tat org.apache.curator.framework.imps.CuratorFrameworkImpl.<init>(CuratorFrameworkImpl.java:158)\n\tat org.apache.curator.framework.CuratorFrameworkFactory$Builder.build(CuratorFrameworkFactory.java:156)\n\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.createSessionDemo1(CuratorCreateSessionDemo.java:36)\n\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.main(CuratorCreateSessionDemo.java:15)\n```\n\n报错的原因如下：\n\n> Curator 2.x.x - compatible with both ZooKeeper 3.4.x and ZooKeeper 3.5.x\n> Curator 3.x.x - compatible only with ZooKeeper 3.5.x and includes support for new features such as dynamic reconfiguration, etc.\n\n在依赖中，我引入的curator与zookeeper版本不兼容导致\n\n>   <properties>\n>   \t<zookeeper.version>3.4.6</zookeeper.version>\n>   \t<curator.version>3.2.0</curator.version>\n>   </properties>\n\n将zookeeper版本改为3.5.2-alpha后ZooKeeper会话创建成功，控制台输出如下：\n\n```\nZooKeeper current state is STARTED\n```\n\n这里特别说明一下，这个zookeeper版本指的是maven依赖的客户端版本，并不是zookeeper服务本身的版本。","source":"_posts/zookeeper_curator.md","raw":"---\ntitle:  \"Zookeeper Curator的使用\"\ndate: 2016-07-27 00:00:00\ncategories: Zookeeper\ntags: Zookeeper\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\n# 前言\nCurator是ZooKeeper的开源客户端。\n官网：http://curator.apache.org/\nAPI文档：http://curator.apache.org/apidocs/index.html\n<!-- more -->\n\n在工程中需要引入curator依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>org.apache.curator</groupId>\n\t\t<artifactId>curator-framework</artifactId>\n\t\t<version>${curator.version}</version>\n\t</dependency>\n```\n\n\n截止目前文章中使用的版本为3.2.0\n---\n\n## 创建Session\n\n###  使用CuratorFrameworkFactory创建Session\n\n可以通过newClient方法建立ZooKeeper会话，但这里推荐使用其自带的Builder模式，下面是newClient的官方API，Builder模式的case见下文。\n\n- #### newClient\n\n  ```\n  public static CuratorFramework newClient(String connectString,\n                                           RetryPolicy retryPolicy)\n  ```\n\n  Create a new client with default session timeout and default connection timeout\n\n  - Parameters:\n\n    `connectString` - list of servers to connect to\n\n    `retryPolicy` - retry policy to use\n\n  - Returns:\n\n    client\n\n\n- #### newClient\n\n  ```\n  public static CuratorFramework newClient(String connectString,\n                                           int sessionTimeoutMs,\n                                           int connectionTimeoutMs,\n                                           RetryPolicy retryPolicy)\n  ```\n\n  Create a new client\n\n  - Parameters:\n\n    `connectString` - list of servers to connect to\n\n    `sessionTimeoutMs` - session timeout\n\n    `connectionTimeoutMs` - connection timeout\n\n    `retryPolicy` - retry policy to use\n\n  - Returns:\n\n    client\n\n    ​\n\n\nRetryPolicy是Curator提供的创建会话的策略接口。\n\n```\n/**\n * Abstracts the policy to use when retrying connections\n */\npublic interface RetryPolicy\n{\n    /**\n     * Called when an operation has failed for some reason. This method should return\n     * true to make another attempt.\n     *\n     *\n     * @param retryCount the number of times retried so far (0 the first time)\n     * @param elapsedTimeMs the elapsed time in ms since the operation was attempted\n     * @param sleeper use this to sleep - DO NOT call Thread.sleep\n     * @return true/false\n     */\n    public boolean      allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper);\n}\n```\n\n官方提供的RetryPolicy的继承关系如下，我们也可通过继承RetryPolicy来实现自己的策略类。\n\n![retrypolicy_extends](images/curator/retrypolicy_extends.png)\n\n这里，我们使用ExponentialBackoffRetry这个重试策略来建立ZooKeeperSession。\n\n### case\n\n```java\npackage me.wangran.zookeeper.demo.curator;\n\nimport org.apache.curator.RetryPolicy;\nimport org.apache.curator.framework.CuratorFramework;\nimport org.apache.curator.framework.CuratorFrameworkFactory;\nimport org.apache.curator.retry.ExponentialBackoffRetry;\n\n/**\n * Curator创建SessionDemo\n * @author Wang Ran\n */\npublic class CuratorCreateSessionDemo {\n\n\tpublic static void main(String[] args) {\n\t\tcreateSessionDemo1();\n\t}\n\t\n\t/**\n\t * 使用CuratorFrameworkFactory创建Session\n\t */\n\tpublic static void createSessionDemo1() {\n\t\tString connectString = \"192.168.128.75:2181\";\n\t\tint baseSleepTimeMs = 1000; // 初始sleep时间\n\t\tint maxRetries = 100; // 最大重试次数\n\t\tint maxSleepMs = 25000; // 最大sleep时间\n\t\t// ExponentialBackoffRetry : Retry policy that retries a set number of \n\t\t// times with increasing sleep time between retries\n\t\tRetryPolicy retryPolicy = new ExponentialBackoffRetry(baseSleepTimeMs, maxRetries, maxSleepMs);\n\t\tint sessionTimeoutMs = 10000;\n\t\tint connectionTimeoutMs = 10000;\n\t\tCuratorFramework cff = CuratorFrameworkFactory.builder()\n\t\t\t\t.connectString(connectString)\n\t\t\t\t.retryPolicy(retryPolicy)\n\t\t\t\t.sessionTimeoutMs(sessionTimeoutMs)\n\t\t\t\t.connectionTimeoutMs(connectionTimeoutMs)\n\t\t\t\t.build();\n\t\tcff.start();\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"ZooKeeper current state is \" + cff.getState());\n\t}\n}\n```\n\n当我运行该代码后，控制台报错如下：\n\n```\nException in thread \"main\" java.lang.NoSuchMethodError: org.apache.zookeeper.server.quorum.flexible.QuorumMaj.<init>(Ljava/util/Map;)V\n\tat org.apache.curator.framework.imps.EnsembleTracker.<init>(EnsembleTracker.java:57)\n\tat org.apache.curator.framework.imps.CuratorFrameworkImpl.<init>(CuratorFrameworkImpl.java:158)\n\tat org.apache.curator.framework.CuratorFrameworkFactory$Builder.build(CuratorFrameworkFactory.java:156)\n\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.createSessionDemo1(CuratorCreateSessionDemo.java:36)\n\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.main(CuratorCreateSessionDemo.java:15)\n```\n\n报错的原因如下：\n\n> Curator 2.x.x - compatible with both ZooKeeper 3.4.x and ZooKeeper 3.5.x\n> Curator 3.x.x - compatible only with ZooKeeper 3.5.x and includes support for new features such as dynamic reconfiguration, etc.\n\n在依赖中，我引入的curator与zookeeper版本不兼容导致\n\n>   <properties>\n>   \t<zookeeper.version>3.4.6</zookeeper.version>\n>   \t<curator.version>3.2.0</curator.version>\n>   </properties>\n\n将zookeeper版本改为3.5.2-alpha后ZooKeeper会话创建成功，控制台输出如下：\n\n```\nZooKeeper current state is STARTED\n```\n\n这里特别说明一下，这个zookeeper版本指的是maven依赖的客户端版本，并不是zookeeper服务本身的版本。","slug":"zookeeper_curator","published":1,"updated":"2019-06-05T13:59:40.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetprd00064ezryslrcb2i","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Curator是ZooKeeper的开源客户端。<br>官网：<a href=\"http://curator.apache.org/\" target=\"_blank\" rel=\"noopener\">http://curator.apache.org/</a><br>API文档：<a href=\"http://curator.apache.org/apidocs/index.html\" target=\"_blank\" rel=\"noopener\">http://curator.apache.org/apidocs/index.html</a></p>\n<a id=\"more\"></a>\n\n<p>在工程中需要引入curator依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-framework<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;curator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截止目前文章中使用的版本为3-2-0\"><a href=\"#截止目前文章中使用的版本为3-2-0\" class=\"headerlink\" title=\"截止目前文章中使用的版本为3.2.0\"></a>截止目前文章中使用的版本为3.2.0</h2><h2 id=\"创建Session\"><a href=\"#创建Session\" class=\"headerlink\" title=\"创建Session\"></a>创建Session</h2><h3 id=\"使用CuratorFrameworkFactory创建Session\"><a href=\"#使用CuratorFrameworkFactory创建Session\" class=\"headerlink\" title=\"使用CuratorFrameworkFactory创建Session\"></a>使用CuratorFrameworkFactory创建Session</h3><p>可以通过newClient方法建立ZooKeeper会话，但这里推荐使用其自带的Builder模式，下面是newClient的官方API，Builder模式的case见下文。</p>\n<ul>\n<li><h4 id=\"newClient\"><a href=\"#newClient\" class=\"headerlink\" title=\"newClient\"></a>newClient</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static CuratorFramework newClient(String connectString,</span><br><span class=\"line\">                                         RetryPolicy retryPolicy)</span><br></pre></td></tr></table></figure>\n\n<p>Create a new client with default session timeout and default connection timeout</p>\n<ul>\n<li><p>Parameters:</p>\n<p><code>connectString</code> - list of servers to connect to</p>\n<p><code>retryPolicy</code> - retry policy to use</p>\n</li>\n<li><p>Returns:</p>\n<p>client</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"newClient-1\"><a href=\"#newClient-1\" class=\"headerlink\" title=\"newClient\"></a>newClient</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static CuratorFramework newClient(String connectString,</span><br><span class=\"line\">                                         int sessionTimeoutMs,</span><br><span class=\"line\">                                         int connectionTimeoutMs,</span><br><span class=\"line\">                                         RetryPolicy retryPolicy)</span><br></pre></td></tr></table></figure>\n\n<p>Create a new client</p>\n<ul>\n<li><p>Parameters:</p>\n<p><code>connectString</code> - list of servers to connect to</p>\n<p><code>sessionTimeoutMs</code> - session timeout</p>\n<p><code>connectionTimeoutMs</code> - connection timeout</p>\n<p><code>retryPolicy</code> - retry policy to use</p>\n</li>\n<li><p>Returns:</p>\n<p>client</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>RetryPolicy是Curator提供的创建会话的策略接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Abstracts the policy to use when retrying connections</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface RetryPolicy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Called when an operation has failed for some reason. This method should return</span><br><span class=\"line\">     * true to make another attempt.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param retryCount the number of times retried so far (0 the first time)</span><br><span class=\"line\">     * @param elapsedTimeMs the elapsed time in ms since the operation was attempted</span><br><span class=\"line\">     * @param sleeper use this to sleep - DO NOT call Thread.sleep</span><br><span class=\"line\">     * @return true/false</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean      allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>官方提供的RetryPolicy的继承关系如下，我们也可通过继承RetryPolicy来实现自己的策略类。</p>\n<p><img src=\"images/curator/retrypolicy_extends.png\" alt=\"retrypolicy_extends\"></p>\n<p>这里，我们使用ExponentialBackoffRetry这个重试策略来建立ZooKeeperSession。</p>\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.curator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.RetryPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Curator创建SessionDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CuratorCreateSessionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tcreateSessionDemo1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 使用CuratorFrameworkFactory创建Session</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createSessionDemo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString connectString = <span class=\"string\">\"192.168.128.75:2181\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> baseSleepTimeMs = <span class=\"number\">1000</span>; <span class=\"comment\">// 初始sleep时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxRetries = <span class=\"number\">100</span>; <span class=\"comment\">// 最大重试次数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxSleepMs = <span class=\"number\">25000</span>; <span class=\"comment\">// 最大sleep时间</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ExponentialBackoffRetry : Retry policy that retries a set number of </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// times with increasing sleep time between retries</span></span><br><span class=\"line\">\t\tRetryPolicy retryPolicy = <span class=\"keyword\">new</span> ExponentialBackoffRetry(baseSleepTimeMs, maxRetries, maxSleepMs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeoutMs = <span class=\"number\">10000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> connectionTimeoutMs = <span class=\"number\">10000</span>;</span><br><span class=\"line\">\t\tCuratorFramework cff = CuratorFrameworkFactory.builder()</span><br><span class=\"line\">\t\t\t\t.connectString(connectString)</span><br><span class=\"line\">\t\t\t\t.retryPolicy(retryPolicy)</span><br><span class=\"line\">\t\t\t\t.sessionTimeoutMs(sessionTimeoutMs)</span><br><span class=\"line\">\t\t\t\t.connectionTimeoutMs(connectionTimeoutMs)</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">\t\tcff.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeper current state is \"</span> + cff.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我运行该代码后，控制台报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: org.apache.zookeeper.server.quorum.flexible.QuorumMaj.&lt;init&gt;(Ljava/util/Map;)V</span><br><span class=\"line\">\tat org.apache.curator.framework.imps.EnsembleTracker.&lt;init&gt;(EnsembleTracker.java:57)</span><br><span class=\"line\">\tat org.apache.curator.framework.imps.CuratorFrameworkImpl.&lt;init&gt;(CuratorFrameworkImpl.java:158)</span><br><span class=\"line\">\tat org.apache.curator.framework.CuratorFrameworkFactory$Builder.build(CuratorFrameworkFactory.java:156)</span><br><span class=\"line\">\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.createSessionDemo1(CuratorCreateSessionDemo.java:36)</span><br><span class=\"line\">\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.main(CuratorCreateSessionDemo.java:15)</span><br></pre></td></tr></table></figure>\n\n<p>报错的原因如下：</p>\n<blockquote>\n<p>Curator 2.x.x - compatible with both ZooKeeper 3.4.x and ZooKeeper 3.5.x<br>Curator 3.x.x - compatible only with ZooKeeper 3.5.x and includes support for new features such as dynamic reconfiguration, etc.</p>\n</blockquote>\n<p>在依赖中，我引入的curator与zookeeper版本不兼容导致</p>\n<blockquote>\n  <properties>\n      <zookeeper.version>3.4.6</zookeeper.version>\n      <curator.version>3.2.0</curator.version>\n  </properties>\n</blockquote>\n<p>将zookeeper版本改为3.5.2-alpha后ZooKeeper会话创建成功，控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZooKeeper current state is STARTED</span><br></pre></td></tr></table></figure>\n\n<p>这里特别说明一下，这个zookeeper版本指的是maven依赖的客户端版本，并不是zookeeper服务本身的版本。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Curator是ZooKeeper的开源客户端。<br>官网：<a href=\"http://curator.apache.org/\" target=\"_blank\" rel=\"noopener\">http://curator.apache.org/</a><br>API文档：<a href=\"http://curator.apache.org/apidocs/index.html\" target=\"_blank\" rel=\"noopener\">http://curator.apache.org/apidocs/index.html</a></p>","more":"<p>在工程中需要引入curator依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-framework<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;curator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截止目前文章中使用的版本为3-2-0\"><a href=\"#截止目前文章中使用的版本为3-2-0\" class=\"headerlink\" title=\"截止目前文章中使用的版本为3.2.0\"></a>截止目前文章中使用的版本为3.2.0</h2><h2 id=\"创建Session\"><a href=\"#创建Session\" class=\"headerlink\" title=\"创建Session\"></a>创建Session</h2><h3 id=\"使用CuratorFrameworkFactory创建Session\"><a href=\"#使用CuratorFrameworkFactory创建Session\" class=\"headerlink\" title=\"使用CuratorFrameworkFactory创建Session\"></a>使用CuratorFrameworkFactory创建Session</h3><p>可以通过newClient方法建立ZooKeeper会话，但这里推荐使用其自带的Builder模式，下面是newClient的官方API，Builder模式的case见下文。</p>\n<ul>\n<li><h4 id=\"newClient\"><a href=\"#newClient\" class=\"headerlink\" title=\"newClient\"></a>newClient</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static CuratorFramework newClient(String connectString,</span><br><span class=\"line\">                                         RetryPolicy retryPolicy)</span><br></pre></td></tr></table></figure>\n\n<p>Create a new client with default session timeout and default connection timeout</p>\n<ul>\n<li><p>Parameters:</p>\n<p><code>connectString</code> - list of servers to connect to</p>\n<p><code>retryPolicy</code> - retry policy to use</p>\n</li>\n<li><p>Returns:</p>\n<p>client</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"newClient-1\"><a href=\"#newClient-1\" class=\"headerlink\" title=\"newClient\"></a>newClient</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static CuratorFramework newClient(String connectString,</span><br><span class=\"line\">                                         int sessionTimeoutMs,</span><br><span class=\"line\">                                         int connectionTimeoutMs,</span><br><span class=\"line\">                                         RetryPolicy retryPolicy)</span><br></pre></td></tr></table></figure>\n\n<p>Create a new client</p>\n<ul>\n<li><p>Parameters:</p>\n<p><code>connectString</code> - list of servers to connect to</p>\n<p><code>sessionTimeoutMs</code> - session timeout</p>\n<p><code>connectionTimeoutMs</code> - connection timeout</p>\n<p><code>retryPolicy</code> - retry policy to use</p>\n</li>\n<li><p>Returns:</p>\n<p>client</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>RetryPolicy是Curator提供的创建会话的策略接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Abstracts the policy to use when retrying connections</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface RetryPolicy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Called when an operation has failed for some reason. This method should return</span><br><span class=\"line\">     * true to make another attempt.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param retryCount the number of times retried so far (0 the first time)</span><br><span class=\"line\">     * @param elapsedTimeMs the elapsed time in ms since the operation was attempted</span><br><span class=\"line\">     * @param sleeper use this to sleep - DO NOT call Thread.sleep</span><br><span class=\"line\">     * @return true/false</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean      allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>官方提供的RetryPolicy的继承关系如下，我们也可通过继承RetryPolicy来实现自己的策略类。</p>\n<p><img src=\"images/curator/retrypolicy_extends.png\" alt=\"retrypolicy_extends\"></p>\n<p>这里，我们使用ExponentialBackoffRetry这个重试策略来建立ZooKeeperSession。</p>\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.curator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.RetryPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Curator创建SessionDemo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CuratorCreateSessionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tcreateSessionDemo1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 使用CuratorFrameworkFactory创建Session</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createSessionDemo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString connectString = <span class=\"string\">\"192.168.128.75:2181\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> baseSleepTimeMs = <span class=\"number\">1000</span>; <span class=\"comment\">// 初始sleep时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxRetries = <span class=\"number\">100</span>; <span class=\"comment\">// 最大重试次数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxSleepMs = <span class=\"number\">25000</span>; <span class=\"comment\">// 最大sleep时间</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ExponentialBackoffRetry : Retry policy that retries a set number of </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// times with increasing sleep time between retries</span></span><br><span class=\"line\">\t\tRetryPolicy retryPolicy = <span class=\"keyword\">new</span> ExponentialBackoffRetry(baseSleepTimeMs, maxRetries, maxSleepMs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeoutMs = <span class=\"number\">10000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> connectionTimeoutMs = <span class=\"number\">10000</span>;</span><br><span class=\"line\">\t\tCuratorFramework cff = CuratorFrameworkFactory.builder()</span><br><span class=\"line\">\t\t\t\t.connectString(connectString)</span><br><span class=\"line\">\t\t\t\t.retryPolicy(retryPolicy)</span><br><span class=\"line\">\t\t\t\t.sessionTimeoutMs(sessionTimeoutMs)</span><br><span class=\"line\">\t\t\t\t.connectionTimeoutMs(connectionTimeoutMs)</span><br><span class=\"line\">\t\t\t\t.build();</span><br><span class=\"line\">\t\tcff.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeper current state is \"</span> + cff.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我运行该代码后，控制台报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: org.apache.zookeeper.server.quorum.flexible.QuorumMaj.&lt;init&gt;(Ljava/util/Map;)V</span><br><span class=\"line\">\tat org.apache.curator.framework.imps.EnsembleTracker.&lt;init&gt;(EnsembleTracker.java:57)</span><br><span class=\"line\">\tat org.apache.curator.framework.imps.CuratorFrameworkImpl.&lt;init&gt;(CuratorFrameworkImpl.java:158)</span><br><span class=\"line\">\tat org.apache.curator.framework.CuratorFrameworkFactory$Builder.build(CuratorFrameworkFactory.java:156)</span><br><span class=\"line\">\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.createSessionDemo1(CuratorCreateSessionDemo.java:36)</span><br><span class=\"line\">\tat me.wangran.zookeeper.demo.curator.CuratorCreateSessionDemo.main(CuratorCreateSessionDemo.java:15)</span><br></pre></td></tr></table></figure>\n\n<p>报错的原因如下：</p>\n<blockquote>\n<p>Curator 2.x.x - compatible with both ZooKeeper 3.4.x and ZooKeeper 3.5.x<br>Curator 3.x.x - compatible only with ZooKeeper 3.5.x and includes support for new features such as dynamic reconfiguration, etc.</p>\n</blockquote>\n<p>在依赖中，我引入的curator与zookeeper版本不兼容导致</p>\n<blockquote>\n  <properties>\n      <zookeeper.version>3.4.6</zookeeper.version>\n      <curator.version>3.2.0</curator.version>\n  </properties>\n</blockquote>\n<p>将zookeeper版本改为3.5.2-alpha后ZooKeeper会话创建成功，控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZooKeeper current state is STARTED</span><br></pre></td></tr></table></figure>\n\n<p>这里特别说明一下，这个zookeeper版本指的是maven依赖的客户端版本，并不是zookeeper服务本身的版本。</p>"},{"title":"Zookeeper学习笔记二","date":"2016-07-17T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\n# 基本概念\n\n### 集群角色\n\nZooKeeper没有沿用传统集群模式（主备模式，Master/Slave），而是采用了Leader、Follower、Observer三种角色。\n\n* Leader 选举而来，为client提供读/写服务。\n* Follower 为client提供读服务，可参与选举。\n* Observer 为client提供读服务，不参与Leader选举，不参与写操作的“过半写成功”策略，通常用于提升集群读性能。\n<!-- more -->\n---\n\n\n\n\n### 会话（Session）\n\n---\n\n### 数据节点（Znode）\n\n指数据模型（Znode Tree）中的数据单元\n\n---\n\n### 版本\n\n---\n\n### 事件监听器（Watcher）\n\n---\n\n### ACL（Access Control Lists）\n\nZooKeeper定义了5种权限：\n\n* CREATE 创建子节点的权限\n* READ 获取节点数据和节点列表的权限\n* WRITE 更新节点数据的权限\n* DELETE 删除子节点的权限\n* ADMIN 设置节点ACL的权限\n\n---\n\n## ZAB协议\n\nZooKeeper原子消息广播协议（Zookeeper Atomic Broadcast）。\nZooKeeper并未采用Paxos，而是采用ZAB作为数据一致性的核心算法。\n\n### ZAB协议两种基本模式\n#### 崩溃恢复\n  服务器启动、Leader服务器挂掉时进入该模式，选举产生新Leader服务器。\n  当集群中有过半服务器（包含Leader）与Leader服务器完成状态同步（即数据同步）后，退出该模式。\n\n##### 基本特性\n* ZAB协议需要确保已在Leader提交的事务最终被所有服务器提交。\n* ZAB协议需要确保丢弃那些只在Leader服务器上被提出的事务。\n\n##### Leader选举\n算法思路：确保已被Leader提交的事务Proposal，同时丢弃已被掉过的事务Proposal。\n即保证选举出的Leader服务器拥有集群中ZXID最大的事务Proposal。\n\n##### 数据同步\nLeader服务器通过确认事务日志中所有Proposal是否已被集群中过半的服务器提交，来判断是否完成数据同步。\n\n\n\n\n\n#### 消息广播\n\n##### ZAB协议核心\n定义了可能改变ZooKeeper服务器数据状态的数据请求处理方式：\n![zab_message_broadcast](/images/zookeeper/zab/2016_07_18_zab_message_broadcast.png)\n\n* Leader服务器收到事务请求后，生成事务Proposal，并为其分配事务ID（全局单调递增的ID，ZXID），放入队列中。\n* Follower服务器接收到Proposal后，以事务日志形式写入到本地磁盘，写入成功后Respone Leader服务器“Ack”。\n* 当Leader服务器接收超过半数Follower服务器Ack响应，广播Commit消息发送给所有Follower服务器，Leader自身与收到Commit消息的Follower服务器会完成事务提交。\n\n基于TCP协议（FIFO）保证消息接收与发送的顺序性。\n\n\n\n","source":"_posts/zookeeper_summary.md","raw":"---\ntitle:  \"Zookeeper学习笔记二\"\ndate: 2016-07-18 00:00:00\ncategories: Zookeeper\ntags: Zookeeper\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\n# 基本概念\n\n### 集群角色\n\nZooKeeper没有沿用传统集群模式（主备模式，Master/Slave），而是采用了Leader、Follower、Observer三种角色。\n\n* Leader 选举而来，为client提供读/写服务。\n* Follower 为client提供读服务，可参与选举。\n* Observer 为client提供读服务，不参与Leader选举，不参与写操作的“过半写成功”策略，通常用于提升集群读性能。\n<!-- more -->\n---\n\n\n\n\n### 会话（Session）\n\n---\n\n### 数据节点（Znode）\n\n指数据模型（Znode Tree）中的数据单元\n\n---\n\n### 版本\n\n---\n\n### 事件监听器（Watcher）\n\n---\n\n### ACL（Access Control Lists）\n\nZooKeeper定义了5种权限：\n\n* CREATE 创建子节点的权限\n* READ 获取节点数据和节点列表的权限\n* WRITE 更新节点数据的权限\n* DELETE 删除子节点的权限\n* ADMIN 设置节点ACL的权限\n\n---\n\n## ZAB协议\n\nZooKeeper原子消息广播协议（Zookeeper Atomic Broadcast）。\nZooKeeper并未采用Paxos，而是采用ZAB作为数据一致性的核心算法。\n\n### ZAB协议两种基本模式\n#### 崩溃恢复\n  服务器启动、Leader服务器挂掉时进入该模式，选举产生新Leader服务器。\n  当集群中有过半服务器（包含Leader）与Leader服务器完成状态同步（即数据同步）后，退出该模式。\n\n##### 基本特性\n* ZAB协议需要确保已在Leader提交的事务最终被所有服务器提交。\n* ZAB协议需要确保丢弃那些只在Leader服务器上被提出的事务。\n\n##### Leader选举\n算法思路：确保已被Leader提交的事务Proposal，同时丢弃已被掉过的事务Proposal。\n即保证选举出的Leader服务器拥有集群中ZXID最大的事务Proposal。\n\n##### 数据同步\nLeader服务器通过确认事务日志中所有Proposal是否已被集群中过半的服务器提交，来判断是否完成数据同步。\n\n\n\n\n\n#### 消息广播\n\n##### ZAB协议核心\n定义了可能改变ZooKeeper服务器数据状态的数据请求处理方式：\n![zab_message_broadcast](/images/zookeeper/zab/2016_07_18_zab_message_broadcast.png)\n\n* Leader服务器收到事务请求后，生成事务Proposal，并为其分配事务ID（全局单调递增的ID，ZXID），放入队列中。\n* Follower服务器接收到Proposal后，以事务日志形式写入到本地磁盘，写入成功后Respone Leader服务器“Ack”。\n* 当Leader服务器接收超过半数Follower服务器Ack响应，广播Commit消息发送给所有Follower服务器，Leader自身与收到Commit消息的Follower服务器会完成事务提交。\n\n基于TCP协议（FIFO）保证消息接收与发送的顺序性。\n\n\n\n","slug":"zookeeper_summary","published":1,"updated":"2019-06-05T13:59:40.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetpre00074ezrx28w74og","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h3 id=\"集群角色\"><a href=\"#集群角色\" class=\"headerlink\" title=\"集群角色\"></a>集群角色</h3><p>ZooKeeper没有沿用传统集群模式（主备模式，Master/Slave），而是采用了Leader、Follower、Observer三种角色。</p>\n<ul>\n<li>Leader 选举而来，为client提供读/写服务。</li>\n<li>Follower 为client提供读服务，可参与选举。</li>\n<li>Observer 为client提供读服务，不参与Leader选举，不参与写操作的“过半写成功”策略，通常用于提升集群读性能。<a id=\"more\"></a>\n</li>\n</ul>\n<hr>\n<h3 id=\"会话（Session）\"><a href=\"#会话（Session）\" class=\"headerlink\" title=\"会话（Session）\"></a>会话（Session）</h3><hr>\n<h3 id=\"数据节点（Znode）\"><a href=\"#数据节点（Znode）\" class=\"headerlink\" title=\"数据节点（Znode）\"></a>数据节点（Znode）</h3><p>指数据模型（Znode Tree）中的数据单元</p>\n<hr>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><hr>\n<h3 id=\"事件监听器（Watcher）\"><a href=\"#事件监听器（Watcher）\" class=\"headerlink\" title=\"事件监听器（Watcher）\"></a>事件监听器（Watcher）</h3><hr>\n<h3 id=\"ACL（Access-Control-Lists）\"><a href=\"#ACL（Access-Control-Lists）\" class=\"headerlink\" title=\"ACL（Access Control Lists）\"></a>ACL（Access Control Lists）</h3><p>ZooKeeper定义了5种权限：</p>\n<ul>\n<li>CREATE 创建子节点的权限</li>\n<li>READ 获取节点数据和节点列表的权限</li>\n<li>WRITE 更新节点数据的权限</li>\n<li>DELETE 删除子节点的权限</li>\n<li>ADMIN 设置节点ACL的权限</li>\n</ul>\n<hr>\n<h2 id=\"ZAB协议\"><a href=\"#ZAB协议\" class=\"headerlink\" title=\"ZAB协议\"></a>ZAB协议</h2><p>ZooKeeper原子消息广播协议（Zookeeper Atomic Broadcast）。<br>ZooKeeper并未采用Paxos，而是采用ZAB作为数据一致性的核心算法。</p>\n<h3 id=\"ZAB协议两种基本模式\"><a href=\"#ZAB协议两种基本模式\" class=\"headerlink\" title=\"ZAB协议两种基本模式\"></a>ZAB协议两种基本模式</h3><h4 id=\"崩溃恢复\"><a href=\"#崩溃恢复\" class=\"headerlink\" title=\"崩溃恢复\"></a>崩溃恢复</h4><p>  服务器启动、Leader服务器挂掉时进入该模式，选举产生新Leader服务器。<br>  当集群中有过半服务器（包含Leader）与Leader服务器完成状态同步（即数据同步）后，退出该模式。</p>\n<h5 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h5><ul>\n<li>ZAB协议需要确保已在Leader提交的事务最终被所有服务器提交。</li>\n<li>ZAB协议需要确保丢弃那些只在Leader服务器上被提出的事务。</li>\n</ul>\n<h5 id=\"Leader选举\"><a href=\"#Leader选举\" class=\"headerlink\" title=\"Leader选举\"></a>Leader选举</h5><p>算法思路：确保已被Leader提交的事务Proposal，同时丢弃已被掉过的事务Proposal。<br>即保证选举出的Leader服务器拥有集群中ZXID最大的事务Proposal。</p>\n<h5 id=\"数据同步\"><a href=\"#数据同步\" class=\"headerlink\" title=\"数据同步\"></a>数据同步</h5><p>Leader服务器通过确认事务日志中所有Proposal是否已被集群中过半的服务器提交，来判断是否完成数据同步。</p>\n<h4 id=\"消息广播\"><a href=\"#消息广播\" class=\"headerlink\" title=\"消息广播\"></a>消息广播</h4><h5 id=\"ZAB协议核心\"><a href=\"#ZAB协议核心\" class=\"headerlink\" title=\"ZAB协议核心\"></a>ZAB协议核心</h5><p>定义了可能改变ZooKeeper服务器数据状态的数据请求处理方式：<br><img src=\"/images/zookeeper/zab/2016_07_18_zab_message_broadcast.png\" alt=\"zab_message_broadcast\"></p>\n<ul>\n<li>Leader服务器收到事务请求后，生成事务Proposal，并为其分配事务ID（全局单调递增的ID，ZXID），放入队列中。</li>\n<li>Follower服务器接收到Proposal后，以事务日志形式写入到本地磁盘，写入成功后Respone Leader服务器“Ack”。</li>\n<li>当Leader服务器接收超过半数Follower服务器Ack响应，广播Commit消息发送给所有Follower服务器，Leader自身与收到Commit消息的Follower服务器会完成事务提交。</li>\n</ul>\n<p>基于TCP协议（FIFO）保证消息接收与发送的顺序性。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h3 id=\"集群角色\"><a href=\"#集群角色\" class=\"headerlink\" title=\"集群角色\"></a>集群角色</h3><p>ZooKeeper没有沿用传统集群模式（主备模式，Master/Slave），而是采用了Leader、Follower、Observer三种角色。</p>\n<ul>\n<li>Leader 选举而来，为client提供读/写服务。</li>\n<li>Follower 为client提供读服务，可参与选举。</li>\n<li>Observer 为client提供读服务，不参与Leader选举，不参与写操作的“过半写成功”策略，通常用于提升集群读性能。","more":"</li>\n</ul>\n<hr>\n<h3 id=\"会话（Session）\"><a href=\"#会话（Session）\" class=\"headerlink\" title=\"会话（Session）\"></a>会话（Session）</h3><hr>\n<h3 id=\"数据节点（Znode）\"><a href=\"#数据节点（Znode）\" class=\"headerlink\" title=\"数据节点（Znode）\"></a>数据节点（Znode）</h3><p>指数据模型（Znode Tree）中的数据单元</p>\n<hr>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><hr>\n<h3 id=\"事件监听器（Watcher）\"><a href=\"#事件监听器（Watcher）\" class=\"headerlink\" title=\"事件监听器（Watcher）\"></a>事件监听器（Watcher）</h3><hr>\n<h3 id=\"ACL（Access-Control-Lists）\"><a href=\"#ACL（Access-Control-Lists）\" class=\"headerlink\" title=\"ACL（Access Control Lists）\"></a>ACL（Access Control Lists）</h3><p>ZooKeeper定义了5种权限：</p>\n<ul>\n<li>CREATE 创建子节点的权限</li>\n<li>READ 获取节点数据和节点列表的权限</li>\n<li>WRITE 更新节点数据的权限</li>\n<li>DELETE 删除子节点的权限</li>\n<li>ADMIN 设置节点ACL的权限</li>\n</ul>\n<hr>\n<h2 id=\"ZAB协议\"><a href=\"#ZAB协议\" class=\"headerlink\" title=\"ZAB协议\"></a>ZAB协议</h2><p>ZooKeeper原子消息广播协议（Zookeeper Atomic Broadcast）。<br>ZooKeeper并未采用Paxos，而是采用ZAB作为数据一致性的核心算法。</p>\n<h3 id=\"ZAB协议两种基本模式\"><a href=\"#ZAB协议两种基本模式\" class=\"headerlink\" title=\"ZAB协议两种基本模式\"></a>ZAB协议两种基本模式</h3><h4 id=\"崩溃恢复\"><a href=\"#崩溃恢复\" class=\"headerlink\" title=\"崩溃恢复\"></a>崩溃恢复</h4><p>  服务器启动、Leader服务器挂掉时进入该模式，选举产生新Leader服务器。<br>  当集群中有过半服务器（包含Leader）与Leader服务器完成状态同步（即数据同步）后，退出该模式。</p>\n<h5 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h5><ul>\n<li>ZAB协议需要确保已在Leader提交的事务最终被所有服务器提交。</li>\n<li>ZAB协议需要确保丢弃那些只在Leader服务器上被提出的事务。</li>\n</ul>\n<h5 id=\"Leader选举\"><a href=\"#Leader选举\" class=\"headerlink\" title=\"Leader选举\"></a>Leader选举</h5><p>算法思路：确保已被Leader提交的事务Proposal，同时丢弃已被掉过的事务Proposal。<br>即保证选举出的Leader服务器拥有集群中ZXID最大的事务Proposal。</p>\n<h5 id=\"数据同步\"><a href=\"#数据同步\" class=\"headerlink\" title=\"数据同步\"></a>数据同步</h5><p>Leader服务器通过确认事务日志中所有Proposal是否已被集群中过半的服务器提交，来判断是否完成数据同步。</p>\n<h4 id=\"消息广播\"><a href=\"#消息广播\" class=\"headerlink\" title=\"消息广播\"></a>消息广播</h4><h5 id=\"ZAB协议核心\"><a href=\"#ZAB协议核心\" class=\"headerlink\" title=\"ZAB协议核心\"></a>ZAB协议核心</h5><p>定义了可能改变ZooKeeper服务器数据状态的数据请求处理方式：<br><img src=\"/images/zookeeper/zab/2016_07_18_zab_message_broadcast.png\" alt=\"zab_message_broadcast\"></p>\n<ul>\n<li>Leader服务器收到事务请求后，生成事务Proposal，并为其分配事务ID（全局单调递增的ID，ZXID），放入队列中。</li>\n<li>Follower服务器接收到Proposal后，以事务日志形式写入到本地磁盘，写入成功后Respone Leader服务器“Ack”。</li>\n<li>当Leader服务器接收超过半数Follower服务器Ack响应，广播Commit消息发送给所有Follower服务器，Leader自身与收到Commit消息的Follower服务器会完成事务提交。</li>\n</ul>\n<p>基于TCP协议（FIFO）保证消息接收与发送的顺序性。</p>"},{"title":"Zookeeper学习笔记一之Paxos算法","date":"2016-07-09T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\n## 背景\n\n1990年提出的一种基于消息传递且具有高度容错性的一致性算法。\n<!-- more -->\n\n\n\n## 算法描述\n\n假设有一组可以提出提案的进程集合，对于一个一致性算法来说需保证：\n\n* 提案只有一个会被选定\n* 若没有提案提出，则没有被选定的提案\n* 提案若被选定，进程可以获取提案信息\n\n\n\n分布式系统的【三态】：成功、失败、超时。\n","source":"_posts/zookeeper_paxos.md","raw":"---\ntitle:  \"Zookeeper学习笔记一之Paxos算法\"\ndate: 2016-07-10 00:00:00\ncategories: Zookeeper\ntags: Zookeeper\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\n## 背景\n\n1990年提出的一种基于消息传递且具有高度容错性的一致性算法。\n<!-- more -->\n\n\n\n## 算法描述\n\n假设有一组可以提出提案的进程集合，对于一个一致性算法来说需保证：\n\n* 提案只有一个会被选定\n* 若没有提案提出，则没有被选定的提案\n* 提案若被选定，进程可以获取提案信息\n\n\n\n分布式系统的【三态】：成功、失败、超时。\n","slug":"zookeeper_paxos","published":1,"updated":"2019-06-05T13:59:40.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetprf00084ezrmtbihjlq","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>1990年提出的一种基于消息传递且具有高度容错性的一致性算法。</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>假设有一组可以提出提案的进程集合，对于一个一致性算法来说需保证：</p>\n<ul>\n<li>提案只有一个会被选定</li>\n<li>若没有提案提出，则没有被选定的提案</li>\n<li>提案若被选定，进程可以获取提案信息</li>\n</ul>\n<p>分布式系统的【三态】：成功、失败、超时。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>1990年提出的一种基于消息传递且具有高度容错性的一致性算法。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>假设有一组可以提出提案的进程集合，对于一个一致性算法来说需保证：</p>\n<ul>\n<li>提案只有一个会被选定</li>\n<li>若没有提案提出，则没有被选定的提案</li>\n<li>提案若被选定，进程可以获取提案信息</li>\n</ul>\n<p>分布式系统的【三态】：成功、失败、超时。</p>"},{"title":"Zookeeper的安装部署与客户端使用","date":"2016-07-22T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\nzookeeper官方网站: http://zookeeper.apache.org/\n\n## Zookeeper的安装与部署\nZookeeper通过Java编写，因此运行前需要配置好JRE\n\n### 下载\nzookeeper下载地址为http://mirrors.cnnic.cn/apache/zookeeper/\n<!-- more -->\n\n### 安装\nZookeeper官方下载的文件为.tar.gz格式，我们只需解压即可完成安装\n\n```linux\ntar -xzvf zookeeper-3.4.6.tar.gz\n```\n\n### 配置\n\n#### 创建zoo.cfg文件\n我们进入到解压后的Zookeeper目录下，找到/conf/zoo_sample.cfg文件，重命名为zoo.cfg\n\n```\n# The number of milliseconds of each tick\n# 基本事件单元，以毫秒为单位。它用来指示心跳，最小的 session 过期时间为两倍的 tickTime.\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\n# 存储内存中数据库快照的位置，如果不设置参数，更新事务日志将被存储到默认位置\ndataDir=/home/yumao/zookeeper/data\ndataLogDir=/home/yumao/zookeeper/log\n# the port at which the clients will connect\n# 监听客户端连接的端口\nclientPort=2181\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the \n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# 格式为server.id=host:port:port, 其中id为在dataDir目录下创建的myid文件中的数字, 每个机器的数字必须保证唯一, id的范围是1~255\n# 以下配置为单机配置\nserver.1=127.0.0.1:2888:3888\n\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n```\n\n#### 创建myid文件\n由于在zoo.cfg配置中指定了dataDir位置，进入dataDir=/home/yumao/zookeeper/data目录下，创建文件myid，内容为1\n\n#### 启动服务\n\n```\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh start\nJMX enabled by default\nUsing config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n\n```\n\n#### 停止服务\n```\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh stop\nJMX enabled by default\nUsing config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg\nStopping zookeeper ... STOPPED\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ \n```\n\n#### 设置环境变量\n\n在/etc/profile文件中添加\n\n```\n#Set ZooKeeper Enviroment\nexport ZOOKEEPER_HOME=/opt/zookeeper-3.4.6\nexport PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf\n```\n\n---\n\n\n\n## Zookeeper客户端的使用\n\n### 客户端启动\n\n```\nsh zkCli.sh \n```\n\n注：在执行该脚本的时候，系统报了个错\n\n> zkCli.sh: 81: /opt/zookeeper-3.4.6/bin/zkEnv.sh: Syntax error: \"(\" unexpected (expecting \"fi\")\n\n一般出现该问题是因为没有配置Zookeeper的环境变量，但还有一个问题是ubuntu本身的配置问题导致，执行以下命令后解决。\n\n```\nyumao@ubuntu:/bin$ ls -l /bin/sh\nlrwxrwxrwx 1 root root 4 May 17 10:34 /bin/sh -> dash\nyumao@ubuntu:/bin$ sudo ln -sf bash /bin/sh\nyumao@ubuntu:/bin$ ls -l /bin/sh\nlrwxrwxrwx 1 root root 4 Jul 26 03:23 /bin/sh -> bash\n```\n\n若客户端脚本成功启动，则系统控制台输出如下\n\n```\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh ./zkServer.sh start\nJMX enabled by default\nUsing config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh zkCli.sh \nConnecting to localhost:2181\n2016-07-26 03:29:22,781 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT\n2016-07-26 03:29:22,789 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=ubuntu\n2016-07-26 03:29:22,790 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.7.0_51\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/jdk1.7.0_51/jre\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.6/bin/../build/classes:/opt/zookeeper-3.4.6/bin/../build/lib/*.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/opt/zookeeper-3.4.6/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/opt/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.6/bin/../conf:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=<NA>\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=4.4.0-31-generic\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.6/bin\n2016-07-26 03:29:22,794 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@4b4cab63\nWelcome to ZooKeeper!\nJLine support is enabled\n2016-07-26 03:29:22,865 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@975] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)\n2016-07-26 03:29:22,887 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@852] - Socket connection established to localhost/127.0.0.1:2181, initiating session\n[zk: localhost:2181(CONNECTING) 0] 2016-07-26 03:29:22,936 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x15626c0466b0000, negotiated timeout = 30000\n\nWATCHER::\n\nWatchedEvent state:SyncConnected type:None path:null\n\n\n```\n\n若想以指定Zookeeper地址启动，则命令应输入\n\n> sh zkCli.sh -server ip:port\n\n---\n\n\n\n### 通过客户端创建一个Zookeeper节点\n\n> create [-s]  [-e] path data acl\n\n其中 -s或-e分别指节点的特性，-s代表顺序节点，-e则代表临时节点。若不添加-e或-s参数，默认创建持久节点。\n\nacl表示用来进行权限控制。\n\n```\nWatchedEvent state:SyncConnected type:None path:null\ncreate /test_root test_data\nCreated /test_root\n[zk: localhost:2181(CONNECTED) 1] \n```\n\n\n\n### 读取Zookeeper节点\n\n#### ls命令\n\n列出指定节点下的所有子节点。只能看到指定节点下的第一级的所有子节点。\n\n> ls path [watch]\n\n\n\ncase：在根节点下创建了/test_root持久节点后，使用ls命令查看根节点。然后再/test_root节点下创建了新的持久子节点1，再次使用ls命令查看根节点，结果无变化。\n\n```\nWatchedEvent state:SyncConnected type:None path:null\ncreate /test_root test_data\nCreated /test_root\n[zk: localhost:2181(CONNECTED) 1] ls /\n[test_root, dubbo, zookeeper]\n[zk: localhost:2181(CONNECTED) 2] create /test_root/1 test_data_1\nCreated /test_root/1\n[zk: localhost:2181(CONNECTED) 3] ls /\n[test_root, dubbo, zookeeper]\n[zk: localhost:2181(CONNECTED) 4] ls /test_root\n[1]\n[zk: localhost:2181(CONNECTED) 5]\n```\n\n\n\n#### get命令\n\n获取指定节点数据内容和属性信息\n\n> get path [watch]\n\ncase：使用get命令查看根节点test_root\n\n```\n[zk: localhost:2181(CONNECTED) 5] get /test_root\ntest_data\ncZxid = 0xbf\nctime = Tue Jul 26 03:35:51 PDT 2016\nmZxid = 0xbf\nmtime = Tue Jul 26 03:35:51 PDT 2016\npZxid = 0xc0\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 9\nnumChildren = 1\n[zk: localhost:2181(CONNECTED) 6] \n```\n\n### 更新Zookeeper节点\n#### set命令\n> set path data [version]\n\ncase: 将/test_root节点的值更新为luffy，注意更新后节点version的变化\n\n```\n[zk: localhost:2181(CONNECTED) 3] get /test_root\ntest_data\ncZxid = 0xbf\nctime = Tue Jul 26 03:35:51 PDT 2016\nmZxid = 0xbf\nmtime = Tue Jul 26 03:35:51 PDT 2016\npZxid = 0xc0\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 9\nnumChildren = 1\n[zk: localhost:2181(CONNECTED) 4] set /test_root luffy\ncZxid = 0xbf\nctime = Tue Jul 26 03:35:51 PDT 2016\nmZxid = 0xc3\nmtime = Tue Jul 26 19:24:32 PDT 2016\npZxid = 0xc0\ncversion = 1\ndataVersion = 1\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 5\nnumChildren = 1\n[zk: localhost:2181(CONNECTED) 5] \n```\n\n\n### 删除Zookeeper节点\n#### delete 命令\n> delete path [version]\n> 注意，只能删除叶子节点。\n\ncase: 将/test_root下的1节点删除。\n\n```\n[zk: localhost:2181(CONNECTED) 5] ls /test_root\n[1]\n[zk: localhost:2181(CONNECTED) 6] delete /test_root/1\n[zk: localhost:2181(CONNECTED) 7] ls /test_root      \n[]\n[zk: localhost:2181(CONNECTED) 8] \n```\n\n","source":"_posts/zookeeper_deploy_and_client_using.md","raw":"---\ntitle:  \"Zookeeper的安装部署与客户端使用\"\ndate: 2016-07-23 00:00:00\ncategories: Zookeeper\ntags: Zookeeper\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\nzookeeper官方网站: http://zookeeper.apache.org/\n\n## Zookeeper的安装与部署\nZookeeper通过Java编写，因此运行前需要配置好JRE\n\n### 下载\nzookeeper下载地址为http://mirrors.cnnic.cn/apache/zookeeper/\n<!-- more -->\n\n### 安装\nZookeeper官方下载的文件为.tar.gz格式，我们只需解压即可完成安装\n\n```linux\ntar -xzvf zookeeper-3.4.6.tar.gz\n```\n\n### 配置\n\n#### 创建zoo.cfg文件\n我们进入到解压后的Zookeeper目录下，找到/conf/zoo_sample.cfg文件，重命名为zoo.cfg\n\n```\n# The number of milliseconds of each tick\n# 基本事件单元，以毫秒为单位。它用来指示心跳，最小的 session 过期时间为两倍的 tickTime.\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\n# 存储内存中数据库快照的位置，如果不设置参数，更新事务日志将被存储到默认位置\ndataDir=/home/yumao/zookeeper/data\ndataLogDir=/home/yumao/zookeeper/log\n# the port at which the clients will connect\n# 监听客户端连接的端口\nclientPort=2181\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the \n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# 格式为server.id=host:port:port, 其中id为在dataDir目录下创建的myid文件中的数字, 每个机器的数字必须保证唯一, id的范围是1~255\n# 以下配置为单机配置\nserver.1=127.0.0.1:2888:3888\n\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n```\n\n#### 创建myid文件\n由于在zoo.cfg配置中指定了dataDir位置，进入dataDir=/home/yumao/zookeeper/data目录下，创建文件myid，内容为1\n\n#### 启动服务\n\n```\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh start\nJMX enabled by default\nUsing config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n\n```\n\n#### 停止服务\n```\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh stop\nJMX enabled by default\nUsing config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg\nStopping zookeeper ... STOPPED\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ \n```\n\n#### 设置环境变量\n\n在/etc/profile文件中添加\n\n```\n#Set ZooKeeper Enviroment\nexport ZOOKEEPER_HOME=/opt/zookeeper-3.4.6\nexport PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf\n```\n\n---\n\n\n\n## Zookeeper客户端的使用\n\n### 客户端启动\n\n```\nsh zkCli.sh \n```\n\n注：在执行该脚本的时候，系统报了个错\n\n> zkCli.sh: 81: /opt/zookeeper-3.4.6/bin/zkEnv.sh: Syntax error: \"(\" unexpected (expecting \"fi\")\n\n一般出现该问题是因为没有配置Zookeeper的环境变量，但还有一个问题是ubuntu本身的配置问题导致，执行以下命令后解决。\n\n```\nyumao@ubuntu:/bin$ ls -l /bin/sh\nlrwxrwxrwx 1 root root 4 May 17 10:34 /bin/sh -> dash\nyumao@ubuntu:/bin$ sudo ln -sf bash /bin/sh\nyumao@ubuntu:/bin$ ls -l /bin/sh\nlrwxrwxrwx 1 root root 4 Jul 26 03:23 /bin/sh -> bash\n```\n\n若客户端脚本成功启动，则系统控制台输出如下\n\n```\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh ./zkServer.sh start\nJMX enabled by default\nUsing config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\nyumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh zkCli.sh \nConnecting to localhost:2181\n2016-07-26 03:29:22,781 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT\n2016-07-26 03:29:22,789 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=ubuntu\n2016-07-26 03:29:22,790 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.7.0_51\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/jdk1.7.0_51/jre\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.6/bin/../build/classes:/opt/zookeeper-3.4.6/bin/../build/lib/*.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/opt/zookeeper-3.4.6/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/opt/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.6/bin/../conf:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\n2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=<NA>\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux\n2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=4.4.0-31-generic\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root\n2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.6/bin\n2016-07-26 03:29:22,794 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@4b4cab63\nWelcome to ZooKeeper!\nJLine support is enabled\n2016-07-26 03:29:22,865 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@975] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)\n2016-07-26 03:29:22,887 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@852] - Socket connection established to localhost/127.0.0.1:2181, initiating session\n[zk: localhost:2181(CONNECTING) 0] 2016-07-26 03:29:22,936 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x15626c0466b0000, negotiated timeout = 30000\n\nWATCHER::\n\nWatchedEvent state:SyncConnected type:None path:null\n\n\n```\n\n若想以指定Zookeeper地址启动，则命令应输入\n\n> sh zkCli.sh -server ip:port\n\n---\n\n\n\n### 通过客户端创建一个Zookeeper节点\n\n> create [-s]  [-e] path data acl\n\n其中 -s或-e分别指节点的特性，-s代表顺序节点，-e则代表临时节点。若不添加-e或-s参数，默认创建持久节点。\n\nacl表示用来进行权限控制。\n\n```\nWatchedEvent state:SyncConnected type:None path:null\ncreate /test_root test_data\nCreated /test_root\n[zk: localhost:2181(CONNECTED) 1] \n```\n\n\n\n### 读取Zookeeper节点\n\n#### ls命令\n\n列出指定节点下的所有子节点。只能看到指定节点下的第一级的所有子节点。\n\n> ls path [watch]\n\n\n\ncase：在根节点下创建了/test_root持久节点后，使用ls命令查看根节点。然后再/test_root节点下创建了新的持久子节点1，再次使用ls命令查看根节点，结果无变化。\n\n```\nWatchedEvent state:SyncConnected type:None path:null\ncreate /test_root test_data\nCreated /test_root\n[zk: localhost:2181(CONNECTED) 1] ls /\n[test_root, dubbo, zookeeper]\n[zk: localhost:2181(CONNECTED) 2] create /test_root/1 test_data_1\nCreated /test_root/1\n[zk: localhost:2181(CONNECTED) 3] ls /\n[test_root, dubbo, zookeeper]\n[zk: localhost:2181(CONNECTED) 4] ls /test_root\n[1]\n[zk: localhost:2181(CONNECTED) 5]\n```\n\n\n\n#### get命令\n\n获取指定节点数据内容和属性信息\n\n> get path [watch]\n\ncase：使用get命令查看根节点test_root\n\n```\n[zk: localhost:2181(CONNECTED) 5] get /test_root\ntest_data\ncZxid = 0xbf\nctime = Tue Jul 26 03:35:51 PDT 2016\nmZxid = 0xbf\nmtime = Tue Jul 26 03:35:51 PDT 2016\npZxid = 0xc0\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 9\nnumChildren = 1\n[zk: localhost:2181(CONNECTED) 6] \n```\n\n### 更新Zookeeper节点\n#### set命令\n> set path data [version]\n\ncase: 将/test_root节点的值更新为luffy，注意更新后节点version的变化\n\n```\n[zk: localhost:2181(CONNECTED) 3] get /test_root\ntest_data\ncZxid = 0xbf\nctime = Tue Jul 26 03:35:51 PDT 2016\nmZxid = 0xbf\nmtime = Tue Jul 26 03:35:51 PDT 2016\npZxid = 0xc0\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 9\nnumChildren = 1\n[zk: localhost:2181(CONNECTED) 4] set /test_root luffy\ncZxid = 0xbf\nctime = Tue Jul 26 03:35:51 PDT 2016\nmZxid = 0xc3\nmtime = Tue Jul 26 19:24:32 PDT 2016\npZxid = 0xc0\ncversion = 1\ndataVersion = 1\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 5\nnumChildren = 1\n[zk: localhost:2181(CONNECTED) 5] \n```\n\n\n### 删除Zookeeper节点\n#### delete 命令\n> delete path [version]\n> 注意，只能删除叶子节点。\n\ncase: 将/test_root下的1节点删除。\n\n```\n[zk: localhost:2181(CONNECTED) 5] ls /test_root\n[1]\n[zk: localhost:2181(CONNECTED) 6] delete /test_root/1\n[zk: localhost:2181(CONNECTED) 7] ls /test_root      \n[]\n[zk: localhost:2181(CONNECTED) 8] \n```\n\n","slug":"zookeeper_deploy_and_client_using","published":1,"updated":"2019-06-05T13:59:40.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetps8000r4ezr6xldkfc8","content":"<p>zookeeper官方网站: <a href=\"http://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">http://zookeeper.apache.org/</a></p>\n<h2 id=\"Zookeeper的安装与部署\"><a href=\"#Zookeeper的安装与部署\" class=\"headerlink\" title=\"Zookeeper的安装与部署\"></a>Zookeeper的安装与部署</h2><p>Zookeeper通过Java编写，因此运行前需要配置好JRE</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>zookeeper下载地址为<a href=\"http://mirrors.cnnic.cn/apache/zookeeper/\" target=\"_blank\" rel=\"noopener\">http://mirrors.cnnic.cn/apache/zookeeper/</a></p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Zookeeper官方下载的文件为.tar.gz格式，我们只需解压即可完成安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"创建zoo-cfg文件\"><a href=\"#创建zoo-cfg文件\" class=\"headerlink\" title=\"创建zoo.cfg文件\"></a>创建zoo.cfg文件</h4><p>我们进入到解压后的Zookeeper目录下，找到/conf/zoo_sample.cfg文件，重命名为zoo.cfg</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The number of milliseconds of each tick</span><br><span class=\"line\"># 基本事件单元，以毫秒为单位。它用来指示心跳，最小的 session 过期时间为两倍的 tickTime.</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"># The number of ticks that the initial </span><br><span class=\"line\"># synchronization phase can take</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"># The number of ticks that can pass between </span><br><span class=\"line\"># sending a request and getting an acknowledgement</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"># the directory where the snapshot is stored.</span><br><span class=\"line\"># do not use /tmp for storage, /tmp here is just </span><br><span class=\"line\"># example sakes.</span><br><span class=\"line\"># 存储内存中数据库快照的位置，如果不设置参数，更新事务日志将被存储到默认位置</span><br><span class=\"line\">dataDir=/home/yumao/zookeeper/data</span><br><span class=\"line\">dataLogDir=/home/yumao/zookeeper/log</span><br><span class=\"line\"># the port at which the clients will connect</span><br><span class=\"line\"># 监听客户端连接的端口</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"># the maximum number of client connections.</span><br><span class=\"line\"># increase this if you need to handle more clients</span><br><span class=\"line\">#maxClientCnxns=60</span><br><span class=\"line\">#</span><br><span class=\"line\"># Be sure to read the maintenance section of the </span><br><span class=\"line\"># administrator guide before turning on autopurge.</span><br><span class=\"line\">#</span><br><span class=\"line\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class=\"line\">#</span><br><span class=\"line\"># The number of snapshots to retain in dataDir</span><br><span class=\"line\">#autopurge.snapRetainCount=3</span><br><span class=\"line\"># 格式为server.id=host:port:port, 其中id为在dataDir目录下创建的myid文件中的数字, 每个机器的数字必须保证唯一, id的范围是1~255</span><br><span class=\"line\"># 以下配置为单机配置</span><br><span class=\"line\">server.1=127.0.0.1:2888:3888</span><br><span class=\"line\"></span><br><span class=\"line\"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class=\"line\">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建myid文件\"><a href=\"#创建myid文件\" class=\"headerlink\" title=\"创建myid文件\"></a>创建myid文件</h4><p>由于在zoo.cfg配置中指定了dataDir位置，进入dataDir=/home/yumao/zookeeper/data目录下，创建文件myid，内容为1</p>\n<h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh start</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh stop</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Stopping zookeeper ... STOPPED</span><br><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h4><p>在/etc/profile文件中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Set ZooKeeper Enviroment</span><br><span class=\"line\">export ZOOKEEPER_HOME=/opt/zookeeper-3.4.6</span><br><span class=\"line\">export PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Zookeeper客户端的使用\"><a href=\"#Zookeeper客户端的使用\" class=\"headerlink\" title=\"Zookeeper客户端的使用\"></a>Zookeeper客户端的使用</h2><h3 id=\"客户端启动\"><a href=\"#客户端启动\" class=\"headerlink\" title=\"客户端启动\"></a>客户端启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh zkCli.sh</span><br></pre></td></tr></table></figure>\n\n<p>注：在执行该脚本的时候，系统报了个错</p>\n<blockquote>\n<p>zkCli.sh: 81: /opt/zookeeper-3.4.6/bin/zkEnv.sh: Syntax error: “(“ unexpected (expecting “fi”)</p>\n</blockquote>\n<p>一般出现该问题是因为没有配置Zookeeper的环境变量，但还有一个问题是ubuntu本身的配置问题导致，执行以下命令后解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/bin$ ls -l /bin/sh</span><br><span class=\"line\">lrwxrwxrwx 1 root root 4 May 17 10:34 /bin/sh -&gt; dash</span><br><span class=\"line\">yumao@ubuntu:/bin$ sudo ln -sf bash /bin/sh</span><br><span class=\"line\">yumao@ubuntu:/bin$ ls -l /bin/sh</span><br><span class=\"line\">lrwxrwxrwx 1 root root 4 Jul 26 03:23 /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure>\n\n<p>若客户端脚本成功启动，则系统控制台输出如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh ./zkServer.sh start</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh zkCli.sh </span><br><span class=\"line\">Connecting to localhost:2181</span><br><span class=\"line\">2016-07-26 03:29:22,781 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT</span><br><span class=\"line\">2016-07-26 03:29:22,789 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=ubuntu</span><br><span class=\"line\">2016-07-26 03:29:22,790 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.7.0_51</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/jdk1.7.0_51/jre</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.6/bin/../build/classes:/opt/zookeeper-3.4.6/bin/../build/lib/*.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/opt/zookeeper-3.4.6/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/opt/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.6/bin/../conf:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=4.4.0-31-generic</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.6/bin</span><br><span class=\"line\">2016-07-26 03:29:22,794 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@4b4cab63</span><br><span class=\"line\">Welcome to ZooKeeper!</span><br><span class=\"line\">JLine support is enabled</span><br><span class=\"line\">2016-07-26 03:29:22,865 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@975] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class=\"line\">2016-07-26 03:29:22,887 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@852] - Socket connection established to localhost/127.0.0.1:2181, initiating session</span><br><span class=\"line\">[zk: localhost:2181(CONNECTING) 0] 2016-07-26 03:29:22,936 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x15626c0466b0000, negotiated timeout = 30000</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br></pre></td></tr></table></figure>\n\n<p>若想以指定Zookeeper地址启动，则命令应输入</p>\n<blockquote>\n<p>sh zkCli.sh -server ip:port</p>\n</blockquote>\n<hr>\n<h3 id=\"通过客户端创建一个Zookeeper节点\"><a href=\"#通过客户端创建一个Zookeeper节点\" class=\"headerlink\" title=\"通过客户端创建一个Zookeeper节点\"></a>通过客户端创建一个Zookeeper节点</h3><blockquote>\n<p>create [-s]  [-e] path data acl</p>\n</blockquote>\n<p>其中 -s或-e分别指节点的特性，-s代表顺序节点，-e则代表临时节点。若不添加-e或-s参数，默认创建持久节点。</p>\n<p>acl表示用来进行权限控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br><span class=\"line\">create /test_root test_data</span><br><span class=\"line\">Created /test_root</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读取Zookeeper节点\"><a href=\"#读取Zookeeper节点\" class=\"headerlink\" title=\"读取Zookeeper节点\"></a>读取Zookeeper节点</h3><h4 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h4><p>列出指定节点下的所有子节点。只能看到指定节点下的第一级的所有子节点。</p>\n<blockquote>\n<p>ls path [watch]</p>\n</blockquote>\n<p>case：在根节点下创建了/test_root持久节点后，使用ls命令查看根节点。然后再/test_root节点下创建了新的持久子节点1，再次使用ls命令查看根节点，结果无变化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br><span class=\"line\">create /test_root test_data</span><br><span class=\"line\">Created /test_root</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 1] ls /</span><br><span class=\"line\">[test_root, dubbo, zookeeper]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 2] create /test_root/1 test_data_1</span><br><span class=\"line\">Created /test_root/1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 3] ls /</span><br><span class=\"line\">[test_root, dubbo, zookeeper]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 4] ls /test_root</span><br><span class=\"line\">[1]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 5]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"get命令\"><a href=\"#get命令\" class=\"headerlink\" title=\"get命令\"></a>get命令</h4><p>获取指定节点数据内容和属性信息</p>\n<blockquote>\n<p>get path [watch]</p>\n</blockquote>\n<p>case：使用get命令查看根节点test_root</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 5] get /test_root</span><br><span class=\"line\">test_data</span><br><span class=\"line\">cZxid = 0xbf</span><br><span class=\"line\">ctime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">mZxid = 0xbf</span><br><span class=\"line\">mtime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">pZxid = 0xc0</span><br><span class=\"line\">cversion = 1</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 9</span><br><span class=\"line\">numChildren = 1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 6]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新Zookeeper节点\"><a href=\"#更新Zookeeper节点\" class=\"headerlink\" title=\"更新Zookeeper节点\"></a>更新Zookeeper节点</h3><h4 id=\"set命令\"><a href=\"#set命令\" class=\"headerlink\" title=\"set命令\"></a>set命令</h4><blockquote>\n<p>set path data [version]</p>\n</blockquote>\n<p>case: 将/test_root节点的值更新为luffy，注意更新后节点version的变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 3] get /test_root</span><br><span class=\"line\">test_data</span><br><span class=\"line\">cZxid = 0xbf</span><br><span class=\"line\">ctime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">mZxid = 0xbf</span><br><span class=\"line\">mtime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">pZxid = 0xc0</span><br><span class=\"line\">cversion = 1</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 9</span><br><span class=\"line\">numChildren = 1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 4] set /test_root luffy</span><br><span class=\"line\">cZxid = 0xbf</span><br><span class=\"line\">ctime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">mZxid = 0xc3</span><br><span class=\"line\">mtime = Tue Jul 26 19:24:32 PDT 2016</span><br><span class=\"line\">pZxid = 0xc0</span><br><span class=\"line\">cversion = 1</span><br><span class=\"line\">dataVersion = 1</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 5</span><br><span class=\"line\">numChildren = 1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 5]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除Zookeeper节点\"><a href=\"#删除Zookeeper节点\" class=\"headerlink\" title=\"删除Zookeeper节点\"></a>删除Zookeeper节点</h3><h4 id=\"delete-命令\"><a href=\"#delete-命令\" class=\"headerlink\" title=\"delete 命令\"></a>delete 命令</h4><blockquote>\n<p>delete path [version]<br>注意，只能删除叶子节点。</p>\n</blockquote>\n<p>case: 将/test_root下的1节点删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 5] ls /test_root</span><br><span class=\"line\">[1]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 6] delete /test_root/1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 7] ls /test_root      </span><br><span class=\"line\">[]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 8]</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>zookeeper官方网站: <a href=\"http://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">http://zookeeper.apache.org/</a></p>\n<h2 id=\"Zookeeper的安装与部署\"><a href=\"#Zookeeper的安装与部署\" class=\"headerlink\" title=\"Zookeeper的安装与部署\"></a>Zookeeper的安装与部署</h2><p>Zookeeper通过Java编写，因此运行前需要配置好JRE</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>zookeeper下载地址为<a href=\"http://mirrors.cnnic.cn/apache/zookeeper/\" target=\"_blank\" rel=\"noopener\">http://mirrors.cnnic.cn/apache/zookeeper/</a></p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Zookeeper官方下载的文件为.tar.gz格式，我们只需解压即可完成安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"创建zoo-cfg文件\"><a href=\"#创建zoo-cfg文件\" class=\"headerlink\" title=\"创建zoo.cfg文件\"></a>创建zoo.cfg文件</h4><p>我们进入到解压后的Zookeeper目录下，找到/conf/zoo_sample.cfg文件，重命名为zoo.cfg</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The number of milliseconds of each tick</span><br><span class=\"line\"># 基本事件单元，以毫秒为单位。它用来指示心跳，最小的 session 过期时间为两倍的 tickTime.</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"># The number of ticks that the initial </span><br><span class=\"line\"># synchronization phase can take</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"># The number of ticks that can pass between </span><br><span class=\"line\"># sending a request and getting an acknowledgement</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"># the directory where the snapshot is stored.</span><br><span class=\"line\"># do not use /tmp for storage, /tmp here is just </span><br><span class=\"line\"># example sakes.</span><br><span class=\"line\"># 存储内存中数据库快照的位置，如果不设置参数，更新事务日志将被存储到默认位置</span><br><span class=\"line\">dataDir=/home/yumao/zookeeper/data</span><br><span class=\"line\">dataLogDir=/home/yumao/zookeeper/log</span><br><span class=\"line\"># the port at which the clients will connect</span><br><span class=\"line\"># 监听客户端连接的端口</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"># the maximum number of client connections.</span><br><span class=\"line\"># increase this if you need to handle more clients</span><br><span class=\"line\">#maxClientCnxns=60</span><br><span class=\"line\">#</span><br><span class=\"line\"># Be sure to read the maintenance section of the </span><br><span class=\"line\"># administrator guide before turning on autopurge.</span><br><span class=\"line\">#</span><br><span class=\"line\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class=\"line\">#</span><br><span class=\"line\"># The number of snapshots to retain in dataDir</span><br><span class=\"line\">#autopurge.snapRetainCount=3</span><br><span class=\"line\"># 格式为server.id=host:port:port, 其中id为在dataDir目录下创建的myid文件中的数字, 每个机器的数字必须保证唯一, id的范围是1~255</span><br><span class=\"line\"># 以下配置为单机配置</span><br><span class=\"line\">server.1=127.0.0.1:2888:3888</span><br><span class=\"line\"></span><br><span class=\"line\"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class=\"line\">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建myid文件\"><a href=\"#创建myid文件\" class=\"headerlink\" title=\"创建myid文件\"></a>创建myid文件</h4><p>由于在zoo.cfg配置中指定了dataDir位置，进入dataDir=/home/yumao/zookeeper/data目录下，创建文件myid，内容为1</p>\n<h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh start</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo ./zkServer.sh stop</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Stopping zookeeper ... STOPPED</span><br><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h4><p>在/etc/profile文件中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Set ZooKeeper Enviroment</span><br><span class=\"line\">export ZOOKEEPER_HOME=/opt/zookeeper-3.4.6</span><br><span class=\"line\">export PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Zookeeper客户端的使用\"><a href=\"#Zookeeper客户端的使用\" class=\"headerlink\" title=\"Zookeeper客户端的使用\"></a>Zookeeper客户端的使用</h2><h3 id=\"客户端启动\"><a href=\"#客户端启动\" class=\"headerlink\" title=\"客户端启动\"></a>客户端启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh zkCli.sh</span><br></pre></td></tr></table></figure>\n\n<p>注：在执行该脚本的时候，系统报了个错</p>\n<blockquote>\n<p>zkCli.sh: 81: /opt/zookeeper-3.4.6/bin/zkEnv.sh: Syntax error: “(“ unexpected (expecting “fi”)</p>\n</blockquote>\n<p>一般出现该问题是因为没有配置Zookeeper的环境变量，但还有一个问题是ubuntu本身的配置问题导致，执行以下命令后解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/bin$ ls -l /bin/sh</span><br><span class=\"line\">lrwxrwxrwx 1 root root 4 May 17 10:34 /bin/sh -&gt; dash</span><br><span class=\"line\">yumao@ubuntu:/bin$ sudo ln -sf bash /bin/sh</span><br><span class=\"line\">yumao@ubuntu:/bin$ ls -l /bin/sh</span><br><span class=\"line\">lrwxrwxrwx 1 root root 4 Jul 26 03:23 /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure>\n\n<p>若客户端脚本成功启动，则系统控制台输出如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh ./zkServer.sh start</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br><span class=\"line\">yumao@ubuntu:/opt/zookeeper-3.4.6/bin$ sudo sh zkCli.sh </span><br><span class=\"line\">Connecting to localhost:2181</span><br><span class=\"line\">2016-07-26 03:29:22,781 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT</span><br><span class=\"line\">2016-07-26 03:29:22,789 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=ubuntu</span><br><span class=\"line\">2016-07-26 03:29:22,790 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.7.0_51</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/jdk1.7.0_51/jre</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.6/bin/../build/classes:/opt/zookeeper-3.4.6/bin/../build/lib/*.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/opt/zookeeper-3.4.6/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/opt/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.6/bin/../conf:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class=\"line\">2016-07-26 03:29:22,791 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</span><br><span class=\"line\">2016-07-26 03:29:22,792 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=4.4.0-31-generic</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</span><br><span class=\"line\">2016-07-26 03:29:22,793 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.6/bin</span><br><span class=\"line\">2016-07-26 03:29:22,794 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@4b4cab63</span><br><span class=\"line\">Welcome to ZooKeeper!</span><br><span class=\"line\">JLine support is enabled</span><br><span class=\"line\">2016-07-26 03:29:22,865 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@975] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class=\"line\">2016-07-26 03:29:22,887 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@852] - Socket connection established to localhost/127.0.0.1:2181, initiating session</span><br><span class=\"line\">[zk: localhost:2181(CONNECTING) 0] 2016-07-26 03:29:22,936 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x15626c0466b0000, negotiated timeout = 30000</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br></pre></td></tr></table></figure>\n\n<p>若想以指定Zookeeper地址启动，则命令应输入</p>\n<blockquote>\n<p>sh zkCli.sh -server ip:port</p>\n</blockquote>\n<hr>\n<h3 id=\"通过客户端创建一个Zookeeper节点\"><a href=\"#通过客户端创建一个Zookeeper节点\" class=\"headerlink\" title=\"通过客户端创建一个Zookeeper节点\"></a>通过客户端创建一个Zookeeper节点</h3><blockquote>\n<p>create [-s]  [-e] path data acl</p>\n</blockquote>\n<p>其中 -s或-e分别指节点的特性，-s代表顺序节点，-e则代表临时节点。若不添加-e或-s参数，默认创建持久节点。</p>\n<p>acl表示用来进行权限控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br><span class=\"line\">create /test_root test_data</span><br><span class=\"line\">Created /test_root</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读取Zookeeper节点\"><a href=\"#读取Zookeeper节点\" class=\"headerlink\" title=\"读取Zookeeper节点\"></a>读取Zookeeper节点</h3><h4 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h4><p>列出指定节点下的所有子节点。只能看到指定节点下的第一级的所有子节点。</p>\n<blockquote>\n<p>ls path [watch]</p>\n</blockquote>\n<p>case：在根节点下创建了/test_root持久节点后，使用ls命令查看根节点。然后再/test_root节点下创建了新的持久子节点1，再次使用ls命令查看根节点，结果无变化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br><span class=\"line\">create /test_root test_data</span><br><span class=\"line\">Created /test_root</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 1] ls /</span><br><span class=\"line\">[test_root, dubbo, zookeeper]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 2] create /test_root/1 test_data_1</span><br><span class=\"line\">Created /test_root/1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 3] ls /</span><br><span class=\"line\">[test_root, dubbo, zookeeper]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 4] ls /test_root</span><br><span class=\"line\">[1]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 5]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"get命令\"><a href=\"#get命令\" class=\"headerlink\" title=\"get命令\"></a>get命令</h4><p>获取指定节点数据内容和属性信息</p>\n<blockquote>\n<p>get path [watch]</p>\n</blockquote>\n<p>case：使用get命令查看根节点test_root</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 5] get /test_root</span><br><span class=\"line\">test_data</span><br><span class=\"line\">cZxid = 0xbf</span><br><span class=\"line\">ctime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">mZxid = 0xbf</span><br><span class=\"line\">mtime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">pZxid = 0xc0</span><br><span class=\"line\">cversion = 1</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 9</span><br><span class=\"line\">numChildren = 1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 6]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新Zookeeper节点\"><a href=\"#更新Zookeeper节点\" class=\"headerlink\" title=\"更新Zookeeper节点\"></a>更新Zookeeper节点</h3><h4 id=\"set命令\"><a href=\"#set命令\" class=\"headerlink\" title=\"set命令\"></a>set命令</h4><blockquote>\n<p>set path data [version]</p>\n</blockquote>\n<p>case: 将/test_root节点的值更新为luffy，注意更新后节点version的变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 3] get /test_root</span><br><span class=\"line\">test_data</span><br><span class=\"line\">cZxid = 0xbf</span><br><span class=\"line\">ctime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">mZxid = 0xbf</span><br><span class=\"line\">mtime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">pZxid = 0xc0</span><br><span class=\"line\">cversion = 1</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 9</span><br><span class=\"line\">numChildren = 1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 4] set /test_root luffy</span><br><span class=\"line\">cZxid = 0xbf</span><br><span class=\"line\">ctime = Tue Jul 26 03:35:51 PDT 2016</span><br><span class=\"line\">mZxid = 0xc3</span><br><span class=\"line\">mtime = Tue Jul 26 19:24:32 PDT 2016</span><br><span class=\"line\">pZxid = 0xc0</span><br><span class=\"line\">cversion = 1</span><br><span class=\"line\">dataVersion = 1</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 5</span><br><span class=\"line\">numChildren = 1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 5]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除Zookeeper节点\"><a href=\"#删除Zookeeper节点\" class=\"headerlink\" title=\"删除Zookeeper节点\"></a>删除Zookeeper节点</h3><h4 id=\"delete-命令\"><a href=\"#delete-命令\" class=\"headerlink\" title=\"delete 命令\"></a>delete 命令</h4><blockquote>\n<p>delete path [version]<br>注意，只能删除叶子节点。</p>\n</blockquote>\n<p>case: 将/test_root下的1节点删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 5] ls /test_root</span><br><span class=\"line\">[1]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 6] delete /test_root/1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 7] ls /test_root      </span><br><span class=\"line\">[]</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 8]</span><br></pre></td></tr></table></figure>"},{"title":"基于Github搭建个人博客","date":"2016-10-19T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\n# 基于Github搭建个人博客\n\n## Github Pages\n\n### 什么是github pages？\n\nGitHub Pages is a static site hosting service.\n\nGitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository. To learn more about the different types of GitHub Pages sites, see \"[User, organization, and project pages](https://help.github.com/articles/user-organization-and-project-pages/).\"\n\nYou can create and publish GitHub Pages online using the [Automatic Page Generator](https://help.github.com/articles/creating-pages-with-the-automatic-generator). If you prefer to work locally, you can use [GitHub Desktop](http://desktop.github.com) or the [command line](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line).\n\n\n\n 由用户编写的、免费的、托管在github上的静态网页\n\n---\n\n<!-- more -->\n\n### 如何搭建Github Pages \n\n官方教程\n\n https://pages.github.com/\n\nhttps://help.github.com/articles/user-organization-and-project-pages/\n\n搭建github博客基本分为如下几步：\n\n* 第一步，create a repository\n* 第二步， clone the repository\n* 第三步，create your website pages\n* 第四步，commit and push your files\n\n\n\ngithub pages为我们搭建的个人博客地址是有规则的：\n例如，我的github地址为https://github.com/wr4javaee\n那么，我的博客主页地址为https://wr4javaee.github.io\n\n若我的项目名称叫blog，那么对应的pages地址就是https://wr4javaee.github.io/blog\n\n\n\n* 注册github账号\n\nhttps://github.com/join\n\nonepieceworld@qq.com&3377128016，protosssoul@qq.com&2027194199\n\n![](/images/blog_create/create_repository.png)\n\ngithub为我们准备了两种搭建博客方式，一种是github提供模板，我们只需写md文档即可。另一种是从头搭建。\n\n我们先介绍第一种方式。\n\n\n\n#### 方法一，利用github pages模板搭建博客\n\n进入项目->settings->github pages->launch\n\n![](/images/blog_create/settings_lunch.png)\n\n\n\n点击launch后，进入\n\n![](/images/blog_create/lunch_page1.png)\n\n\n\n\n\n填写好项目名称、项目描述后，进入下一步，选择项目模板\n\n![](/images/blog_create/settings_theme.png)\n\n选择好模板后，点击 publish page即可提交。\n\n稍等片刻后，github即可为我们搭建好项目对应的网站。\n\n通过访问https://onepieceworld.github.io/test/\n\n\n\n\n#### 方法二，从头搭建博客\n\n若我们查看github模板为我们创建的博客，会发现github为我们自动创建了一个分支gh-pages作为默认分支，博客的文件都提交在这个特定的分支中。\n\n![](/images/blog_create/git_branch.png)\n\n那么，若我们从头搭建博客，就得模仿这一步骤。github规定，只有该分支中的页面，才会生成静态网页文件。\n\n我们新创建一个reponsitory，名为test1\n\nhttps://github.com/onepieceworld/test1.git\n\n\n\n接下来，我们创建一个全新的gh-pages分支，并将其作为默认分支\n\n```\nyumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages\n```\n\n\n\n为新的空白分支创建默认页面并提交\n\n```\nyumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages\nSwitched to a new branch 'gh-pages'\nyumao@ubuntu:~/github/test1$ git branch \nyumao@ubuntu:~/github/test1$ echo \"Hello World!\" > index.html\nyumao@ubuntu:~/github/test1$ git add index.html \nyumao@ubuntu:~/github/test1$ git commit -a -m \"commit index pages\"\n[gh-pages (root-commit) 0fab7c5] commit index pages\n 1 file changed, 1 insertion(+)\n create mode 100644 index.html\nyumao@ubuntu:~/github/test1$ git push origin gh-pages \n```\n\n\n\n提交成功后，访问https://onepieceworld.github.io/test1/，\n\n可以看到，github已经自动为我们将静态文件部署。\n\n---\n\n\n\n## 利用Jekyll搭建个人博客\n\n[Jekyll官方网站](http://jekyll.com.cn)\n[Jekyll github](https://github.com/jekyll/jekyll)\n\n\n### 什么是Jekyll？\n\nJekyll is a simple, blog-aware, static site generator perfect for \npersonal, project, or organization sites. Think of it like a file-based \nCMS, without all the complexity. Jekyll takes your content, renders \nMarkdown and Liquid templates, and spits out a complete, static website \nready to be served by Apache, Nginx or another web server. Jekyll is the\n engine behind [GitHub Pages](https://pages.github.com), which you can use to host sites right from your GitHub repositories.\n\n一个可以将纯文本转化为静态网站文件的生成器。\n\n基于Jekyll，我们可以只关注编写纯文本，如markdown，而无需将精力放在HTML本身。\n\n\n\n### Jekyll的简易用法\n\n> [Jekyll官方使用简介](http://jekyll.bootcss.com/)，内容很详细\n> [作者阮一峰关于Jekyll与Github Blog的入门教程](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)，推荐大家阅读\n\n\n\n首先，Jekyll依赖Ruby\n\n安装Ruby环境过程中会遇到GWF，需要用到淘宝提供的RubyGems镜像服务，它与官方服务同步频率为15分钟。\n\n[淘宝RubyGems镜像]: https://ruby.taobao.org/\n\n\n\nRuby环境搭建好后，我们通过以下命令安装Jekyll\n\n```\n~ $ gem install jekyll\n```\n\n\n\n接下来，利用jekyll命令jekyll new my-awesome-site自动创建jekyll项目\n\n```\nyumao@ubuntu:~/github$ jekyll new jekyll_test\nNew jekyll site installed in /home/yumao/github/jekyll_test. \nRunning bundle install in /home/yumao/github/jekyll_test... \nFetching gem metadata from https://rubygems.org/................\nFetching version metadata from https://rubygems.org/...\nFetching dependency metadata from https://rubygems.org/..\nResolving dependencies...\nUsing addressable 2.4.0\nUsing colorator 1.1.0\nUsing ffi 1.9.14\nUsing forwardable-extended 2.6.0\nUsing sass 3.4.22\nUsing rb-fsevent 0.9.7\nUsing kramdown 1.12.0\nUsing liquid 3.0.6\nUsing mercenary 0.3.6\nUsing rouge 1.11.1\nUsing safe_yaml 1.0.4\nUsing minima 2.0.0\nUsing bundler 1.13.5\nUsing rb-inotify 0.9.7\nUsing pathutil 0.14.0\nUsing jekyll-sass-converter 1.4.0\nUsing listen 3.0.8\nUsing jekyll-watch 1.5.0\nUsing jekyll 3.3.0\nUsing jekyll-feed 0.8.0\nBundle complete! 3 Gemfile dependencies, 20 gems now installed.\nUse `bundle show [gemname]` to see where a bundled gem is installed.\nyumao@ubuntu:~/github$ \n```\n\n\n\n进入项目目录下，执行Jekyll命令 jekyll serve，启动项目\n\n```\nyumao@ubuntu:~/github$ cd jekyll_test/\nyumao@ubuntu:~/github/jekyll_test$ jekyll serve\nWARN: Unresolved specs during Gem::Specification.reset:\n      rouge (~> 1.7)\n      jekyll-watch (~> 1.1)\nWARN: Clearing out unresolved specs.\nPlease report a bug if this causes problems.\nConfiguration file: /home/yumao/github/jekyll_test/_config.yml\nConfiguration file: /home/yumao/github/jekyll_test/_config.yml\n            Source: /home/yumao/github/jekyll_test\n       Destination: /home/yumao/github/jekyll_test/_site\n Incremental build: disabled. Enable with --incremental\n      Generating... \n                    done in 0.286 seconds.\n Auto-regeneration: enabled for '/home/yumao/github/jekyll_test'\nConfiguration file: /home/yumao/github/jekyll_test/_config.yml\n    Server address: http://127.0.0.1:4000/\n  Server running... press ctrl-c to stop.\n\n```\n\n![](/images/blog_create/jekyll_default_page.png)\n\n\n\n至此，一个简易的jekyll项目就搭建好了，我们将它部署到github中，每次只要新增md文档，提交到github后，其会自动编译jekyll项目，自动解析成静态网页文件。\n\n\n\n### Jekyll的目录结构\n\n\n\n\n![](/images/blog_create/jekyll_files.png)\n\n```\n.\n├── _config.yml\n├── _drafts\n|   ├── begin-with-the-crazy-ideas.textile\n|   └── on-simplicity-in-technology.markdown\n├── _includes\n|   ├── footer.html\n|   └── header.html\n├── _layouts\n|   ├── default.html\n|   └── post.html\n├── _posts\n|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile\n|   └── 2009-04-26-barcamp-boston-4-roundup.textile\n├── _data\n|   └── members.yml\n├── _site\n└── index.html\n```\n\n\n\n| 文件 / 目录                                  | 描述                                       |\n| ---------------------------------------- | ---------------------------------------- |\n| `_config.yml`                            | 保存[配置](http://jekyll.com.cn/docs/configuration/)数据。很多配置选项都会直接从命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。 |\n| `_drafts`                                | drafts 是未发布的文章。这些文件的格式中都没有 `title.MARKUP` 数据。学习如何使用 [drafts](http://jekyll.com.cn/docs/drafts/). |\n| `_includes`                              | 你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签          `{nclude file.ext`          来把文件 `_includes/file.ext` 包含进来。 |\n| `_layouts`                               | layouts 是包裹在文章外部的模板。布局可以在 [YAML 头信息](http://jekyll.com.cn/docs/frontmatter/)中根据不同文章进行选择。          这将在下一个部分进行介绍。标签          `content`          可以将content插入页面中。 |\n| `_posts`                                 | 这里放的就是你的文章了。文件格式很重要，必须要符合:          `YEAR-MONTH-DAY-title.MARKUP`。          The [permalinks](http://jekyll.com.cn/docs/permalinks/) 可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。 |\n| `_data`                                  | Well-formatted site data should be placed here. The jekyll engine will           autoload all yaml files (ends with `.yml` or `.yaml`)           in this directory. If there's a file `members.yml` under the directory,           then you can access contents of the file through `site.data.members`. |\n| `_site`                                  | 一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 `.gitignore` 文件中。 |\n| `index.html` and other HTML, Markdown, Textile files | 如果这些文件中包含 [YAML 头信息](http://jekyll.com.cn/docs/frontmatter/) 部分，Jekyll 就会自动将它们进行转换。当然，其他的如 `.html`， `.markdown`，          `.md`，或者 `.textile` 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。 |\n| Other Files/Folders                      | 其他一些未被提及的目录和文件如          `css` 还有 `images` 文件夹，          `favicon.ico` 等文件都将被完全拷贝到生成的 site 中。 这里有一些[使用 Jekyll 的站点](http://jekyll.com.cn/docs/sites/)，如果你感兴趣就来看看吧。 |\n\n\n\n#### _config.yml配置文件\n\n[官方配置文件说明](http://jekyll.com.cn/docs/configuration/)\n\n\n\n### 使用Jekyll的开源模板\n\n网络上免费的Jekyll主题非常多，推荐2个主题网站\n\n>\n>[Jekyll主题网站一](http://jekyllthemes.org/)\n>\n>[Jekyll主题网站二](http://jekyllthemes.io/)\n\n\n\n这里为大家推荐一个我喜欢的主题来源\n\n> [Gaohaoyang](http://gaohaoyang.github.io)\n\ngithub地址\n\nhttps://github.com/Gaohaoyang/gaohaoyang.github.io.git\n\n\n\n### Jekyll的优缺点\n\nJekyll是比较流行的博客系统，其主题、插件数量上比较丰富，且上手简单。\n缺点为文章量多的时候，生成速度慢。\n\n---\n\n\n\n## 利用Hexo搭建个人博客\n\n### Hexo与Jekyll的区别\nHexo是基于Node.js编写的静态博客系统，使用Jekyl我们可以将原生的markdown文档上传到github，由github自动解析成静态html文件。但hexo为本地将markdown文档解析后，将生成的静态html文件直接上传到github中。\n\n由于hexo基于nodejs，因此其生成html速度较Jekyll快，相对更灵活。主题数量然有Jade/Stylus/Less等各种方言支持。\n\n|        | 语言     | 活跃度  | 开箱即用 | 主题数量 | 主题系统 | 生成速度 | 博客适应性 | 非博客适应性 |\n| ------ | ------ | ---- | ---- | ---- | ---- | ---- | ----- | ------ |\n| Jekyll | Ruby   | S    | B    | A    | A    | C    | A     | C      |\n| Hexo   | NodeJS | B    | A    | A    | B    | A    | A     | B      |\n\n\n\n### Hexo官方文档\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n\n\n### 安装Hexo\n\nHexo基于Node.js，因此首先应安装Node.js环境。\n\ncURL：\n\n```\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\nWget\n```\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n安装完成后，重启终端执行下列命令完成安装Node.js\n```\n$ nvm install stable\n```\n\n若环境准备就绪，使用以下命令安装Hexo\n\n```\n$ npm install -g hexo-cli\n```\n\n\n\n### 使用Hexo建立网站\n\n使用以下命令初始化网站\n\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n\n\n建站后的文件目录如下：\n\n![](/images/blog_create/hexo_files.png)\n\n\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n* scaffolds模板文件夹\n\n建站的模板，hexo依赖于此模板来生成静态文件。\n\n*  _config.yml配置文件\n\n[hexo官方配置文件说明](https://hexo.io/zh-cn/docs/configuration.html)\n\n以下为hexo的默认配置\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\n# 网站标题\ntitle: Hexo \n# 网站副标题\nsubtitle: \n# 网站描述\ndescription: \nauthor: John Doe\n# 网站使用的语言\nlanguage: \n# 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\ntimezone: \n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 #http://yoursite.com/blog 并把 root 设为 /blog/。\nurl: http://yoursite.com\n# 网站根目录\nroot: /\n# 文章的 永久链接 格式 \t:year/:month/:day/:title/\npermalink: :year/:month/:day/:title/\n# 永久链接中各部分的默认值 \t\npermalink_defaults:\n\n# Directory\n# 资源文件夹，这个文件夹用来存放内容。\nsource_dir: source\n# 公共文件夹，这个文件夹用于存放生成的站点文件\npublic_dir: public\n# 标签文件夹\ntag_dir: tags\n# 归档文件夹\narchive_dir: archives\n# 分类文件夹\ncategory_dir: categories\n# Include code 文件夹\ncode_dir: downloads/code\n# 国际化（i18n）文件夹\ni18n_dir: :lang\n# 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 \t\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\n# 默认分类 \tuncategorized\ndefault_category: uncategorized\n# 分类别名 \t\ncategory_map:\n# 标签别名 \t\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\n# 日期格式 \tYYYY-MM-DD\ndate_format: YYYY-MM-DD\n# 时间格式 \tH:mm:ss\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\n# 每页显示的文章量 (0 = 关闭分页功能) \t10\nper_page: 10\n# 分页目录 \tpage\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n# 当前主题名称。值为false时禁用主题\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n```\n\n\n\n* source资源文件夹\n\n用来存放用户资源，其中_post文件夹下的markdown文档，会被hexo自动解析成html，并放置到public文件夹中\n\n其他以_开头的文件夹会被自动忽略\n\n* themes主题文件夹\n\nhexo在解析时，会根据主题来生成静态页面。\n\n\n\n#### 新建一篇文章\n\n```\n$ hexo new [layout] <title>\n```\n\nlayout若不指定，默认从_config.yml文件中的default_layout代替\n\n\n\n#### 生成静态文件\n\n```\n$ hexo generate\n```\n\n| 选项               | 描述          |\n| ---------------- | ----------- |\n| `-d`, `--deploy` | 文件生成后立即部署网站 |\n| `-w`, `--watch`  | 监视文件变动      |\n\n\n\n使用generate命令后，hexo的文件夹会自动生成静态文件，放置到配置文件中规定的public目录中\n\n![](/images/blog_create/hexo_files_after_generate_1.png)\n\n\n\npublic文件夹中的内容如下\n\n![](/images/blog_create/hexo_files_after_generate_2.png)\n\n\n\n#### 启动服务器\n\n```\n$ hexo server\n```\n\n\n\n#### 部署网站\n\n```\n$ hexo deploy\n```\n\n| 参数                 | 描述           |\n| ------------------ | ------------ |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n\n\n部署后的界面如下\n![](/images/blog_create/hexo_server_page.png)\n\n\n\n#### 清除缓存文件\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n![](/images/blog_create/hexo_clean.png)\n\n\n\n#### 其他hexo命令\n\n[其他hexo命令](https://hexo.io/zh-cn/docs/commands.html)\n\n\n\n### hexo部署到github中\n\n通过_config.yml文件建立关联，\n\n```\ndeploy:\n  type: git\n  repository: https://github.com/onepieceworld/hexo_test.git\n  branch: gh-pages\n```\n\n执行命令\n\n```\n~ $ npm install hexo-deployer-git --save\n~ $ hexo deploy\n```\n\n\n\n至此，hexo已成功将解析后的html文件上传到github中\n\n![](/images/blog_create/hexo_github.png)\n\n","source":"_posts/github-pages_init.md","raw":"---\ntitle:  \"基于Github搭建个人博客\"\ndate: 2016-10-20 00:00:00\ncategories: Github\ntags: Github\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\n# 基于Github搭建个人博客\n\n## Github Pages\n\n### 什么是github pages？\n\nGitHub Pages is a static site hosting service.\n\nGitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository. To learn more about the different types of GitHub Pages sites, see \"[User, organization, and project pages](https://help.github.com/articles/user-organization-and-project-pages/).\"\n\nYou can create and publish GitHub Pages online using the [Automatic Page Generator](https://help.github.com/articles/creating-pages-with-the-automatic-generator). If you prefer to work locally, you can use [GitHub Desktop](http://desktop.github.com) or the [command line](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line).\n\n\n\n 由用户编写的、免费的、托管在github上的静态网页\n\n---\n\n<!-- more -->\n\n### 如何搭建Github Pages \n\n官方教程\n\n https://pages.github.com/\n\nhttps://help.github.com/articles/user-organization-and-project-pages/\n\n搭建github博客基本分为如下几步：\n\n* 第一步，create a repository\n* 第二步， clone the repository\n* 第三步，create your website pages\n* 第四步，commit and push your files\n\n\n\ngithub pages为我们搭建的个人博客地址是有规则的：\n例如，我的github地址为https://github.com/wr4javaee\n那么，我的博客主页地址为https://wr4javaee.github.io\n\n若我的项目名称叫blog，那么对应的pages地址就是https://wr4javaee.github.io/blog\n\n\n\n* 注册github账号\n\nhttps://github.com/join\n\nonepieceworld@qq.com&3377128016，protosssoul@qq.com&2027194199\n\n![](/images/blog_create/create_repository.png)\n\ngithub为我们准备了两种搭建博客方式，一种是github提供模板，我们只需写md文档即可。另一种是从头搭建。\n\n我们先介绍第一种方式。\n\n\n\n#### 方法一，利用github pages模板搭建博客\n\n进入项目->settings->github pages->launch\n\n![](/images/blog_create/settings_lunch.png)\n\n\n\n点击launch后，进入\n\n![](/images/blog_create/lunch_page1.png)\n\n\n\n\n\n填写好项目名称、项目描述后，进入下一步，选择项目模板\n\n![](/images/blog_create/settings_theme.png)\n\n选择好模板后，点击 publish page即可提交。\n\n稍等片刻后，github即可为我们搭建好项目对应的网站。\n\n通过访问https://onepieceworld.github.io/test/\n\n\n\n\n#### 方法二，从头搭建博客\n\n若我们查看github模板为我们创建的博客，会发现github为我们自动创建了一个分支gh-pages作为默认分支，博客的文件都提交在这个特定的分支中。\n\n![](/images/blog_create/git_branch.png)\n\n那么，若我们从头搭建博客，就得模仿这一步骤。github规定，只有该分支中的页面，才会生成静态网页文件。\n\n我们新创建一个reponsitory，名为test1\n\nhttps://github.com/onepieceworld/test1.git\n\n\n\n接下来，我们创建一个全新的gh-pages分支，并将其作为默认分支\n\n```\nyumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages\n```\n\n\n\n为新的空白分支创建默认页面并提交\n\n```\nyumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages\nSwitched to a new branch 'gh-pages'\nyumao@ubuntu:~/github/test1$ git branch \nyumao@ubuntu:~/github/test1$ echo \"Hello World!\" > index.html\nyumao@ubuntu:~/github/test1$ git add index.html \nyumao@ubuntu:~/github/test1$ git commit -a -m \"commit index pages\"\n[gh-pages (root-commit) 0fab7c5] commit index pages\n 1 file changed, 1 insertion(+)\n create mode 100644 index.html\nyumao@ubuntu:~/github/test1$ git push origin gh-pages \n```\n\n\n\n提交成功后，访问https://onepieceworld.github.io/test1/，\n\n可以看到，github已经自动为我们将静态文件部署。\n\n---\n\n\n\n## 利用Jekyll搭建个人博客\n\n[Jekyll官方网站](http://jekyll.com.cn)\n[Jekyll github](https://github.com/jekyll/jekyll)\n\n\n### 什么是Jekyll？\n\nJekyll is a simple, blog-aware, static site generator perfect for \npersonal, project, or organization sites. Think of it like a file-based \nCMS, without all the complexity. Jekyll takes your content, renders \nMarkdown and Liquid templates, and spits out a complete, static website \nready to be served by Apache, Nginx or another web server. Jekyll is the\n engine behind [GitHub Pages](https://pages.github.com), which you can use to host sites right from your GitHub repositories.\n\n一个可以将纯文本转化为静态网站文件的生成器。\n\n基于Jekyll，我们可以只关注编写纯文本，如markdown，而无需将精力放在HTML本身。\n\n\n\n### Jekyll的简易用法\n\n> [Jekyll官方使用简介](http://jekyll.bootcss.com/)，内容很详细\n> [作者阮一峰关于Jekyll与Github Blog的入门教程](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)，推荐大家阅读\n\n\n\n首先，Jekyll依赖Ruby\n\n安装Ruby环境过程中会遇到GWF，需要用到淘宝提供的RubyGems镜像服务，它与官方服务同步频率为15分钟。\n\n[淘宝RubyGems镜像]: https://ruby.taobao.org/\n\n\n\nRuby环境搭建好后，我们通过以下命令安装Jekyll\n\n```\n~ $ gem install jekyll\n```\n\n\n\n接下来，利用jekyll命令jekyll new my-awesome-site自动创建jekyll项目\n\n```\nyumao@ubuntu:~/github$ jekyll new jekyll_test\nNew jekyll site installed in /home/yumao/github/jekyll_test. \nRunning bundle install in /home/yumao/github/jekyll_test... \nFetching gem metadata from https://rubygems.org/................\nFetching version metadata from https://rubygems.org/...\nFetching dependency metadata from https://rubygems.org/..\nResolving dependencies...\nUsing addressable 2.4.0\nUsing colorator 1.1.0\nUsing ffi 1.9.14\nUsing forwardable-extended 2.6.0\nUsing sass 3.4.22\nUsing rb-fsevent 0.9.7\nUsing kramdown 1.12.0\nUsing liquid 3.0.6\nUsing mercenary 0.3.6\nUsing rouge 1.11.1\nUsing safe_yaml 1.0.4\nUsing minima 2.0.0\nUsing bundler 1.13.5\nUsing rb-inotify 0.9.7\nUsing pathutil 0.14.0\nUsing jekyll-sass-converter 1.4.0\nUsing listen 3.0.8\nUsing jekyll-watch 1.5.0\nUsing jekyll 3.3.0\nUsing jekyll-feed 0.8.0\nBundle complete! 3 Gemfile dependencies, 20 gems now installed.\nUse `bundle show [gemname]` to see where a bundled gem is installed.\nyumao@ubuntu:~/github$ \n```\n\n\n\n进入项目目录下，执行Jekyll命令 jekyll serve，启动项目\n\n```\nyumao@ubuntu:~/github$ cd jekyll_test/\nyumao@ubuntu:~/github/jekyll_test$ jekyll serve\nWARN: Unresolved specs during Gem::Specification.reset:\n      rouge (~> 1.7)\n      jekyll-watch (~> 1.1)\nWARN: Clearing out unresolved specs.\nPlease report a bug if this causes problems.\nConfiguration file: /home/yumao/github/jekyll_test/_config.yml\nConfiguration file: /home/yumao/github/jekyll_test/_config.yml\n            Source: /home/yumao/github/jekyll_test\n       Destination: /home/yumao/github/jekyll_test/_site\n Incremental build: disabled. Enable with --incremental\n      Generating... \n                    done in 0.286 seconds.\n Auto-regeneration: enabled for '/home/yumao/github/jekyll_test'\nConfiguration file: /home/yumao/github/jekyll_test/_config.yml\n    Server address: http://127.0.0.1:4000/\n  Server running... press ctrl-c to stop.\n\n```\n\n![](/images/blog_create/jekyll_default_page.png)\n\n\n\n至此，一个简易的jekyll项目就搭建好了，我们将它部署到github中，每次只要新增md文档，提交到github后，其会自动编译jekyll项目，自动解析成静态网页文件。\n\n\n\n### Jekyll的目录结构\n\n\n\n\n![](/images/blog_create/jekyll_files.png)\n\n```\n.\n├── _config.yml\n├── _drafts\n|   ├── begin-with-the-crazy-ideas.textile\n|   └── on-simplicity-in-technology.markdown\n├── _includes\n|   ├── footer.html\n|   └── header.html\n├── _layouts\n|   ├── default.html\n|   └── post.html\n├── _posts\n|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile\n|   └── 2009-04-26-barcamp-boston-4-roundup.textile\n├── _data\n|   └── members.yml\n├── _site\n└── index.html\n```\n\n\n\n| 文件 / 目录                                  | 描述                                       |\n| ---------------------------------------- | ---------------------------------------- |\n| `_config.yml`                            | 保存[配置](http://jekyll.com.cn/docs/configuration/)数据。很多配置选项都会直接从命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。 |\n| `_drafts`                                | drafts 是未发布的文章。这些文件的格式中都没有 `title.MARKUP` 数据。学习如何使用 [drafts](http://jekyll.com.cn/docs/drafts/). |\n| `_includes`                              | 你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签          `{nclude file.ext`          来把文件 `_includes/file.ext` 包含进来。 |\n| `_layouts`                               | layouts 是包裹在文章外部的模板。布局可以在 [YAML 头信息](http://jekyll.com.cn/docs/frontmatter/)中根据不同文章进行选择。          这将在下一个部分进行介绍。标签          `content`          可以将content插入页面中。 |\n| `_posts`                                 | 这里放的就是你的文章了。文件格式很重要，必须要符合:          `YEAR-MONTH-DAY-title.MARKUP`。          The [permalinks](http://jekyll.com.cn/docs/permalinks/) 可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。 |\n| `_data`                                  | Well-formatted site data should be placed here. The jekyll engine will           autoload all yaml files (ends with `.yml` or `.yaml`)           in this directory. If there's a file `members.yml` under the directory,           then you can access contents of the file through `site.data.members`. |\n| `_site`                                  | 一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 `.gitignore` 文件中。 |\n| `index.html` and other HTML, Markdown, Textile files | 如果这些文件中包含 [YAML 头信息](http://jekyll.com.cn/docs/frontmatter/) 部分，Jekyll 就会自动将它们进行转换。当然，其他的如 `.html`， `.markdown`，          `.md`，或者 `.textile` 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。 |\n| Other Files/Folders                      | 其他一些未被提及的目录和文件如          `css` 还有 `images` 文件夹，          `favicon.ico` 等文件都将被完全拷贝到生成的 site 中。 这里有一些[使用 Jekyll 的站点](http://jekyll.com.cn/docs/sites/)，如果你感兴趣就来看看吧。 |\n\n\n\n#### _config.yml配置文件\n\n[官方配置文件说明](http://jekyll.com.cn/docs/configuration/)\n\n\n\n### 使用Jekyll的开源模板\n\n网络上免费的Jekyll主题非常多，推荐2个主题网站\n\n>\n>[Jekyll主题网站一](http://jekyllthemes.org/)\n>\n>[Jekyll主题网站二](http://jekyllthemes.io/)\n\n\n\n这里为大家推荐一个我喜欢的主题来源\n\n> [Gaohaoyang](http://gaohaoyang.github.io)\n\ngithub地址\n\nhttps://github.com/Gaohaoyang/gaohaoyang.github.io.git\n\n\n\n### Jekyll的优缺点\n\nJekyll是比较流行的博客系统，其主题、插件数量上比较丰富，且上手简单。\n缺点为文章量多的时候，生成速度慢。\n\n---\n\n\n\n## 利用Hexo搭建个人博客\n\n### Hexo与Jekyll的区别\nHexo是基于Node.js编写的静态博客系统，使用Jekyl我们可以将原生的markdown文档上传到github，由github自动解析成静态html文件。但hexo为本地将markdown文档解析后，将生成的静态html文件直接上传到github中。\n\n由于hexo基于nodejs，因此其生成html速度较Jekyll快，相对更灵活。主题数量然有Jade/Stylus/Less等各种方言支持。\n\n|        | 语言     | 活跃度  | 开箱即用 | 主题数量 | 主题系统 | 生成速度 | 博客适应性 | 非博客适应性 |\n| ------ | ------ | ---- | ---- | ---- | ---- | ---- | ----- | ------ |\n| Jekyll | Ruby   | S    | B    | A    | A    | C    | A     | C      |\n| Hexo   | NodeJS | B    | A    | A    | B    | A    | A     | B      |\n\n\n\n### Hexo官方文档\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n\n\n### 安装Hexo\n\nHexo基于Node.js，因此首先应安装Node.js环境。\n\ncURL：\n\n```\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n\nWget\n```\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n安装完成后，重启终端执行下列命令完成安装Node.js\n```\n$ nvm install stable\n```\n\n若环境准备就绪，使用以下命令安装Hexo\n\n```\n$ npm install -g hexo-cli\n```\n\n\n\n### 使用Hexo建立网站\n\n使用以下命令初始化网站\n\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n\n\n建站后的文件目录如下：\n\n![](/images/blog_create/hexo_files.png)\n\n\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n* scaffolds模板文件夹\n\n建站的模板，hexo依赖于此模板来生成静态文件。\n\n*  _config.yml配置文件\n\n[hexo官方配置文件说明](https://hexo.io/zh-cn/docs/configuration.html)\n\n以下为hexo的默认配置\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\n# 网站标题\ntitle: Hexo \n# 网站副标题\nsubtitle: \n# 网站描述\ndescription: \nauthor: John Doe\n# 网站使用的语言\nlanguage: \n# 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\ntimezone: \n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 #http://yoursite.com/blog 并把 root 设为 /blog/。\nurl: http://yoursite.com\n# 网站根目录\nroot: /\n# 文章的 永久链接 格式 \t:year/:month/:day/:title/\npermalink: :year/:month/:day/:title/\n# 永久链接中各部分的默认值 \t\npermalink_defaults:\n\n# Directory\n# 资源文件夹，这个文件夹用来存放内容。\nsource_dir: source\n# 公共文件夹，这个文件夹用于存放生成的站点文件\npublic_dir: public\n# 标签文件夹\ntag_dir: tags\n# 归档文件夹\narchive_dir: archives\n# 分类文件夹\ncategory_dir: categories\n# Include code 文件夹\ncode_dir: downloads/code\n# 国际化（i18n）文件夹\ni18n_dir: :lang\n# 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 \t\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\n# 默认分类 \tuncategorized\ndefault_category: uncategorized\n# 分类别名 \t\ncategory_map:\n# 标签别名 \t\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\n# 日期格式 \tYYYY-MM-DD\ndate_format: YYYY-MM-DD\n# 时间格式 \tH:mm:ss\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\n# 每页显示的文章量 (0 = 关闭分页功能) \t10\nper_page: 10\n# 分页目录 \tpage\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n# 当前主题名称。值为false时禁用主题\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n```\n\n\n\n* source资源文件夹\n\n用来存放用户资源，其中_post文件夹下的markdown文档，会被hexo自动解析成html，并放置到public文件夹中\n\n其他以_开头的文件夹会被自动忽略\n\n* themes主题文件夹\n\nhexo在解析时，会根据主题来生成静态页面。\n\n\n\n#### 新建一篇文章\n\n```\n$ hexo new [layout] <title>\n```\n\nlayout若不指定，默认从_config.yml文件中的default_layout代替\n\n\n\n#### 生成静态文件\n\n```\n$ hexo generate\n```\n\n| 选项               | 描述          |\n| ---------------- | ----------- |\n| `-d`, `--deploy` | 文件生成后立即部署网站 |\n| `-w`, `--watch`  | 监视文件变动      |\n\n\n\n使用generate命令后，hexo的文件夹会自动生成静态文件，放置到配置文件中规定的public目录中\n\n![](/images/blog_create/hexo_files_after_generate_1.png)\n\n\n\npublic文件夹中的内容如下\n\n![](/images/blog_create/hexo_files_after_generate_2.png)\n\n\n\n#### 启动服务器\n\n```\n$ hexo server\n```\n\n\n\n#### 部署网站\n\n```\n$ hexo deploy\n```\n\n| 参数                 | 描述           |\n| ------------------ | ------------ |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n\n\n部署后的界面如下\n![](/images/blog_create/hexo_server_page.png)\n\n\n\n#### 清除缓存文件\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n![](/images/blog_create/hexo_clean.png)\n\n\n\n#### 其他hexo命令\n\n[其他hexo命令](https://hexo.io/zh-cn/docs/commands.html)\n\n\n\n### hexo部署到github中\n\n通过_config.yml文件建立关联，\n\n```\ndeploy:\n  type: git\n  repository: https://github.com/onepieceworld/hexo_test.git\n  branch: gh-pages\n```\n\n执行命令\n\n```\n~ $ npm install hexo-deployer-git --save\n~ $ hexo deploy\n```\n\n\n\n至此，hexo已成功将解析后的html文件上传到github中\n\n![](/images/blog_create/hexo_github.png)\n\n","slug":"github-pages_init","published":1,"updated":"2019-06-05T13:59:40.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetpsn000v4ezrefmfhr5a","content":"<h1 id=\"基于Github搭建个人博客\"><a href=\"#基于Github搭建个人博客\" class=\"headerlink\" title=\"基于Github搭建个人博客\"></a>基于Github搭建个人博客</h1><h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h2><h3 id=\"什么是github-pages？\"><a href=\"#什么是github-pages？\" class=\"headerlink\" title=\"什么是github pages？\"></a>什么是github pages？</h3><p>GitHub Pages is a static site hosting service.</p>\n<p>GitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository. To learn more about the different types of GitHub Pages sites, see “<a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">User, organization, and project pages</a>.”</p>\n<p>You can create and publish GitHub Pages online using the <a href=\"https://help.github.com/articles/creating-pages-with-the-automatic-generator\" target=\"_blank\" rel=\"noopener\">Automatic Page Generator</a>. If you prefer to work locally, you can use <a href=\"http://desktop.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Desktop</a> or the <a href=\"https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line\" target=\"_blank\" rel=\"noopener\">command line</a>.</p>\n<p> 由用户编写的、免费的、托管在github上的静态网页</p>\n<hr>\n<a id=\"more\"></a>\n\n<h3 id=\"如何搭建Github-Pages\"><a href=\"#如何搭建Github-Pages\" class=\"headerlink\" title=\"如何搭建Github Pages\"></a>如何搭建Github Pages</h3><p>官方教程</p>\n<p> <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></p>\n<p><a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/user-organization-and-project-pages/</a></p>\n<p>搭建github博客基本分为如下几步：</p>\n<ul>\n<li>第一步，create a repository</li>\n<li>第二步， clone the repository</li>\n<li>第三步，create your website pages</li>\n<li>第四步，commit and push your files</li>\n</ul>\n<p>github pages为我们搭建的个人博客地址是有规则的：<br>例如，我的github地址为<a href=\"https://github.com/wr4javaee\" target=\"_blank\" rel=\"noopener\">https://github.com/wr4javaee</a><br>那么，我的博客主页地址为<a href=\"https://wr4javaee.github.io\" target=\"_blank\" rel=\"noopener\">https://wr4javaee.github.io</a></p>\n<p>若我的项目名称叫blog，那么对应的pages地址就是<a href=\"https://wr4javaee.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://wr4javaee.github.io/blog</a></p>\n<ul>\n<li>注册github账号</li>\n</ul>\n<p><a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">https://github.com/join</a></p>\n<p><a href=\"mailto:onepieceworld@qq.com\" target=\"_blank\" rel=\"noopener\">onepieceworld@qq.com</a>&amp;3377128016，<a href=\"mailto:protosssoul@qq.com\" target=\"_blank\" rel=\"noopener\">protosssoul@qq.com</a>&amp;2027194199</p>\n<p><img src=\"/images/blog_create/create_repository.png\" alt></p>\n<p>github为我们准备了两种搭建博客方式，一种是github提供模板，我们只需写md文档即可。另一种是从头搭建。</p>\n<p>我们先介绍第一种方式。</p>\n<h4 id=\"方法一，利用github-pages模板搭建博客\"><a href=\"#方法一，利用github-pages模板搭建博客\" class=\"headerlink\" title=\"方法一，利用github pages模板搭建博客\"></a>方法一，利用github pages模板搭建博客</h4><p>进入项目-&gt;settings-&gt;github pages-&gt;launch</p>\n<p><img src=\"/images/blog_create/settings_lunch.png\" alt></p>\n<p>点击launch后，进入</p>\n<p><img src=\"/images/blog_create/lunch_page1.png\" alt></p>\n<p>填写好项目名称、项目描述后，进入下一步，选择项目模板</p>\n<p><img src=\"/images/blog_create/settings_theme.png\" alt></p>\n<p>选择好模板后，点击 publish page即可提交。</p>\n<p>稍等片刻后，github即可为我们搭建好项目对应的网站。</p>\n<p>通过访问<a href=\"https://onepieceworld.github.io/test/\" target=\"_blank\" rel=\"noopener\">https://onepieceworld.github.io/test/</a></p>\n<h4 id=\"方法二，从头搭建博客\"><a href=\"#方法二，从头搭建博客\" class=\"headerlink\" title=\"方法二，从头搭建博客\"></a>方法二，从头搭建博客</h4><p>若我们查看github模板为我们创建的博客，会发现github为我们自动创建了一个分支gh-pages作为默认分支，博客的文件都提交在这个特定的分支中。</p>\n<p><img src=\"/images/blog_create/git_branch.png\" alt></p>\n<p>那么，若我们从头搭建博客，就得模仿这一步骤。github规定，只有该分支中的页面，才会生成静态网页文件。</p>\n<p>我们新创建一个reponsitory，名为test1</p>\n<p><a href=\"https://github.com/onepieceworld/test1.git\" target=\"_blank\" rel=\"noopener\">https://github.com/onepieceworld/test1.git</a></p>\n<p>接下来，我们创建一个全新的gh-pages分支，并将其作为默认分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>为新的空白分支创建默认页面并提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages</span><br><span class=\"line\">Switched to a new branch &apos;gh-pages&apos;</span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git branch </span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ echo &quot;Hello World!&quot; &gt; index.html</span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git add index.html </span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git commit -a -m &quot;commit index pages&quot;</span><br><span class=\"line\">[gh-pages (root-commit) 0fab7c5] commit index pages</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 index.html</span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git push origin gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>提交成功后，访问<a href=\"https://onepieceworld.github.io/test1/，\" target=\"_blank\" rel=\"noopener\">https://onepieceworld.github.io/test1/，</a></p>\n<p>可以看到，github已经自动为我们将静态文件部署。</p>\n<hr>\n<h2 id=\"利用Jekyll搭建个人博客\"><a href=\"#利用Jekyll搭建个人博客\" class=\"headerlink\" title=\"利用Jekyll搭建个人博客\"></a>利用Jekyll搭建个人博客</h2><p><a href=\"http://jekyll.com.cn\" target=\"_blank\" rel=\"noopener\">Jekyll官方网站</a><br><a href=\"https://github.com/jekyll/jekyll\" target=\"_blank\" rel=\"noopener\">Jekyll github</a></p>\n<h3 id=\"什么是Jekyll？\"><a href=\"#什么是Jekyll？\" class=\"headerlink\" title=\"什么是Jekyll？\"></a>什么是Jekyll？</h3><p>Jekyll is a simple, blog-aware, static site generator perfect for<br>personal, project, or organization sites. Think of it like a file-based<br>CMS, without all the complexity. Jekyll takes your content, renders<br>Markdown and Liquid templates, and spits out a complete, static website<br>ready to be served by Apache, Nginx or another web server. Jekyll is the<br> engine behind <a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>, which you can use to host sites right from your GitHub repositories.</p>\n<p>一个可以将纯文本转化为静态网站文件的生成器。</p>\n<p>基于Jekyll，我们可以只关注编写纯文本，如markdown，而无需将精力放在HTML本身。</p>\n<h3 id=\"Jekyll的简易用法\"><a href=\"#Jekyll的简易用法\" class=\"headerlink\" title=\"Jekyll的简易用法\"></a>Jekyll的简易用法</h3><blockquote>\n<p><a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"noopener\">Jekyll官方使用简介</a>，内容很详细<br><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">作者阮一峰关于Jekyll与Github Blog的入门教程</a>，推荐大家阅读</p>\n</blockquote>\n<p>首先，Jekyll依赖Ruby</p>\n<p>安装Ruby环境过程中会遇到GWF，需要用到淘宝提供的RubyGems镜像服务，它与官方服务同步频率为15分钟。</p>\n<p>Ruby环境搭建好后，我们通过以下命令安装Jekyll</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ $ gem install jekyll</span><br></pre></td></tr></table></figure>\n\n<p>接下来，利用jekyll命令jekyll new my-awesome-site自动创建jekyll项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github$ jekyll new jekyll_test</span><br><span class=\"line\">New jekyll site installed in /home/yumao/github/jekyll_test. </span><br><span class=\"line\">Running bundle install in /home/yumao/github/jekyll_test... </span><br><span class=\"line\">Fetching gem metadata from https://rubygems.org/................</span><br><span class=\"line\">Fetching version metadata from https://rubygems.org/...</span><br><span class=\"line\">Fetching dependency metadata from https://rubygems.org/..</span><br><span class=\"line\">Resolving dependencies...</span><br><span class=\"line\">Using addressable 2.4.0</span><br><span class=\"line\">Using colorator 1.1.0</span><br><span class=\"line\">Using ffi 1.9.14</span><br><span class=\"line\">Using forwardable-extended 2.6.0</span><br><span class=\"line\">Using sass 3.4.22</span><br><span class=\"line\">Using rb-fsevent 0.9.7</span><br><span class=\"line\">Using kramdown 1.12.0</span><br><span class=\"line\">Using liquid 3.0.6</span><br><span class=\"line\">Using mercenary 0.3.6</span><br><span class=\"line\">Using rouge 1.11.1</span><br><span class=\"line\">Using safe_yaml 1.0.4</span><br><span class=\"line\">Using minima 2.0.0</span><br><span class=\"line\">Using bundler 1.13.5</span><br><span class=\"line\">Using rb-inotify 0.9.7</span><br><span class=\"line\">Using pathutil 0.14.0</span><br><span class=\"line\">Using jekyll-sass-converter 1.4.0</span><br><span class=\"line\">Using listen 3.0.8</span><br><span class=\"line\">Using jekyll-watch 1.5.0</span><br><span class=\"line\">Using jekyll 3.3.0</span><br><span class=\"line\">Using jekyll-feed 0.8.0</span><br><span class=\"line\">Bundle complete! 3 Gemfile dependencies, 20 gems now installed.</span><br><span class=\"line\">Use `bundle show [gemname]` to see where a bundled gem is installed.</span><br><span class=\"line\">yumao@ubuntu:~/github$</span><br></pre></td></tr></table></figure>\n\n<p>进入项目目录下，执行Jekyll命令 jekyll serve，启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github$ cd jekyll_test/</span><br><span class=\"line\">yumao@ubuntu:~/github/jekyll_test$ jekyll serve</span><br><span class=\"line\">WARN: Unresolved specs during Gem::Specification.reset:</span><br><span class=\"line\">      rouge (~&gt; 1.7)</span><br><span class=\"line\">      jekyll-watch (~&gt; 1.1)</span><br><span class=\"line\">WARN: Clearing out unresolved specs.</span><br><span class=\"line\">Please report a bug if this causes problems.</span><br><span class=\"line\">Configuration file: /home/yumao/github/jekyll_test/_config.yml</span><br><span class=\"line\">Configuration file: /home/yumao/github/jekyll_test/_config.yml</span><br><span class=\"line\">            Source: /home/yumao/github/jekyll_test</span><br><span class=\"line\">       Destination: /home/yumao/github/jekyll_test/_site</span><br><span class=\"line\"> Incremental build: disabled. Enable with --incremental</span><br><span class=\"line\">      Generating... </span><br><span class=\"line\">                    done in 0.286 seconds.</span><br><span class=\"line\"> Auto-regeneration: enabled for &apos;/home/yumao/github/jekyll_test&apos;</span><br><span class=\"line\">Configuration file: /home/yumao/github/jekyll_test/_config.yml</span><br><span class=\"line\">    Server address: http://127.0.0.1:4000/</span><br><span class=\"line\">  Server running... press ctrl-c to stop.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/blog_create/jekyll_default_page.png\" alt></p>\n<p>至此，一个简易的jekyll项目就搭建好了，我们将它部署到github中，每次只要新增md文档，提交到github后，其会自动编译jekyll项目，自动解析成静态网页文件。</p>\n<h3 id=\"Jekyll的目录结构\"><a href=\"#Jekyll的目录结构\" class=\"headerlink\" title=\"Jekyll的目录结构\"></a>Jekyll的目录结构</h3><p><img src=\"/images/blog_create/jekyll_files.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── _drafts</span><br><span class=\"line\">|   ├── begin-with-the-crazy-ideas.textile</span><br><span class=\"line\">|   └── on-simplicity-in-technology.markdown</span><br><span class=\"line\">├── _includes</span><br><span class=\"line\">|   ├── footer.html</span><br><span class=\"line\">|   └── header.html</span><br><span class=\"line\">├── _layouts</span><br><span class=\"line\">|   ├── default.html</span><br><span class=\"line\">|   └── post.html</span><br><span class=\"line\">├── _posts</span><br><span class=\"line\">|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile</span><br><span class=\"line\">|   └── 2009-04-26-barcamp-boston-4-roundup.textile</span><br><span class=\"line\">├── _data</span><br><span class=\"line\">|   └── members.yml</span><br><span class=\"line\">├── _site</span><br><span class=\"line\">└── index.html</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>文件 / 目录</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_config.yml</code></td>\n<td>保存<a href=\"http://jekyll.com.cn/docs/configuration/\" target=\"_blank\" rel=\"noopener\">配置</a>数据。很多配置选项都会直接从命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。</td>\n</tr>\n<tr>\n<td><code>_drafts</code></td>\n<td>drafts 是未发布的文章。这些文件的格式中都没有 <code>title.MARKUP</code> 数据。学习如何使用 <a href=\"http://jekyll.com.cn/docs/drafts/\" target=\"_blank\" rel=\"noopener\">drafts</a>.</td>\n</tr>\n<tr>\n<td><code>_includes</code></td>\n<td>你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签          <code>{nclude file.ext</code>          来把文件 <code>_includes/file.ext</code> 包含进来。</td>\n</tr>\n<tr>\n<td><code>_layouts</code></td>\n<td>layouts 是包裹在文章外部的模板。布局可以在 <a href=\"http://jekyll.com.cn/docs/frontmatter/\" target=\"_blank\" rel=\"noopener\">YAML 头信息</a>中根据不同文章进行选择。          这将在下一个部分进行介绍。标签          <code>content</code>          可以将content插入页面中。</td>\n</tr>\n<tr>\n<td><code>_posts</code></td>\n<td>这里放的就是你的文章了。文件格式很重要，必须要符合:          <code>YEAR-MONTH-DAY-title.MARKUP</code>。          The <a href=\"http://jekyll.com.cn/docs/permalinks/\" target=\"_blank\" rel=\"noopener\">permalinks</a> 可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。</td>\n</tr>\n<tr>\n<td><code>_data</code></td>\n<td>Well-formatted site data should be placed here. The jekyll engine will           autoload all yaml files (ends with <code>.yml</code> or <code>.yaml</code>)           in this directory. If there’s a file <code>members.yml</code> under the directory,           then you can access contents of the file through <code>site.data.members</code>.</td>\n</tr>\n<tr>\n<td><code>_site</code></td>\n<td>一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 <code>.gitignore</code> 文件中。</td>\n</tr>\n<tr>\n<td><code>index.html</code> and other HTML, Markdown, Textile files</td>\n<td>如果这些文件中包含 <a href=\"http://jekyll.com.cn/docs/frontmatter/\" target=\"_blank\" rel=\"noopener\">YAML 头信息</a> 部分，Jekyll 就会自动将它们进行转换。当然，其他的如 <code>.html</code>， <code>.markdown</code>，          <code>.md</code>，或者 <code>.textile</code> 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。</td>\n</tr>\n<tr>\n<td>Other Files/Folders</td>\n<td>其他一些未被提及的目录和文件如          <code>css</code> 还有 <code>images</code> 文件夹，          <code>favicon.ico</code> 等文件都将被完全拷贝到生成的 site 中。 这里有一些<a href=\"http://jekyll.com.cn/docs/sites/\" target=\"_blank\" rel=\"noopener\">使用 Jekyll 的站点</a>，如果你感兴趣就来看看吧。</td>\n</tr>\n</tbody></table>\n<h4 id=\"config-yml配置文件\"><a href=\"#config-yml配置文件\" class=\"headerlink\" title=\"_config.yml配置文件\"></a>_config.yml配置文件</h4><p><a href=\"http://jekyll.com.cn/docs/configuration/\" target=\"_blank\" rel=\"noopener\">官方配置文件说明</a></p>\n<h3 id=\"使用Jekyll的开源模板\"><a href=\"#使用Jekyll的开源模板\" class=\"headerlink\" title=\"使用Jekyll的开源模板\"></a>使用Jekyll的开源模板</h3><p>网络上免费的Jekyll主题非常多，推荐2个主题网站</p>\n<blockquote>\n<p><a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll主题网站一</a></p>\n<p><a href=\"http://jekyllthemes.io/\" target=\"_blank\" rel=\"noopener\">Jekyll主题网站二</a></p>\n</blockquote>\n<p>这里为大家推荐一个我喜欢的主题来源</p>\n<blockquote>\n<p><a href=\"http://gaohaoyang.github.io\" target=\"_blank\" rel=\"noopener\">Gaohaoyang</a></p>\n</blockquote>\n<p>github地址</p>\n<p><a href=\"https://github.com/Gaohaoyang/gaohaoyang.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Gaohaoyang/gaohaoyang.github.io.git</a></p>\n<h3 id=\"Jekyll的优缺点\"><a href=\"#Jekyll的优缺点\" class=\"headerlink\" title=\"Jekyll的优缺点\"></a>Jekyll的优缺点</h3><p>Jekyll是比较流行的博客系统，其主题、插件数量上比较丰富，且上手简单。<br>缺点为文章量多的时候，生成速度慢。</p>\n<hr>\n<h2 id=\"利用Hexo搭建个人博客\"><a href=\"#利用Hexo搭建个人博客\" class=\"headerlink\" title=\"利用Hexo搭建个人博客\"></a>利用Hexo搭建个人博客</h2><h3 id=\"Hexo与Jekyll的区别\"><a href=\"#Hexo与Jekyll的区别\" class=\"headerlink\" title=\"Hexo与Jekyll的区别\"></a>Hexo与Jekyll的区别</h3><p>Hexo是基于Node.js编写的静态博客系统，使用Jekyl我们可以将原生的markdown文档上传到github，由github自动解析成静态html文件。但hexo为本地将markdown文档解析后，将生成的静态html文件直接上传到github中。</p>\n<p>由于hexo基于nodejs，因此其生成html速度较Jekyll快，相对更灵活。主题数量然有Jade/Stylus/Less等各种方言支持。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语言</th>\n<th>活跃度</th>\n<th>开箱即用</th>\n<th>主题数量</th>\n<th>主题系统</th>\n<th>生成速度</th>\n<th>博客适应性</th>\n<th>非博客适应性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Jekyll</td>\n<td>Ruby</td>\n<td>S</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>C</td>\n<td>A</td>\n<td>C</td>\n</tr>\n<tr>\n<td>Hexo</td>\n<td>NodeJS</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>B</td>\n</tr>\n</tbody></table>\n<h3 id=\"Hexo官方文档\"><a href=\"#Hexo官方文档\" class=\"headerlink\" title=\"Hexo官方文档\"></a>Hexo官方文档</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Hexo基于Node.js，因此首先应安装Node.js环境。</p>\n<p>cURL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>Wget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，重启终端执行下列命令完成安装Node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>若环境准备就绪，使用以下命令安装Hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Hexo建立网站\"><a href=\"#使用Hexo建立网站\" class=\"headerlink\" title=\"使用Hexo建立网站\"></a>使用Hexo建立网站</h3><p>使用以下命令初始化网站</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>建站后的文件目录如下：</p>\n<p><img src=\"/images/blog_create/hexo_files.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>scaffolds模板文件夹</li>\n</ul>\n<p>建站的模板，hexo依赖于此模板来生成静态文件。</p>\n<ul>\n<li>_config.yml配置文件</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">hexo官方配置文件说明</a></p>\n<p>以下为hexo的默认配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: https://hexo.io/docs/configuration.html</span><br><span class=\"line\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site</span><br><span class=\"line\"># 网站标题</span><br><span class=\"line\">title: Hexo </span><br><span class=\"line\"># 网站副标题</span><br><span class=\"line\">subtitle: </span><br><span class=\"line\"># 网站描述</span><br><span class=\"line\">description: </span><br><span class=\"line\">author: John Doe</span><br><span class=\"line\"># 网站使用的语言</span><br><span class=\"line\">language: </span><br><span class=\"line\"># 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span><br><span class=\"line\">timezone: </span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 #http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\"># 网站根目录</span><br><span class=\"line\">root: /</span><br><span class=\"line\"># 文章的 永久链接 格式 \t:year/:month/:day/:title/</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\"># 永久链接中各部分的默认值 \t</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\"># 资源文件夹，这个文件夹用来存放内容。</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\"># 公共文件夹，这个文件夹用于存放生成的站点文件</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\"># 标签文件夹</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\"># 归档文件夹</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\"># 分类文件夹</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\"># Include code 文件夹</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\"># 国际化（i18n）文件夹</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\"># 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 \t</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\"># 默认分类 \tuncategorized</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\"># 分类别名 \t</span><br><span class=\"line\">category_map:</span><br><span class=\"line\"># 标签别名 \t</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\"># 日期格式 \tYYYY-MM-DD</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\"># 时间格式 \tH:mm:ss</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\"># 每页显示的文章量 (0 = 关闭分页功能) \t10</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\"># 分页目录 \tpage</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\"># 当前主题名称。值为false时禁用主题</span><br><span class=\"line\">theme: landscape</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>source资源文件夹</li>\n</ul>\n<p>用来存放用户资源，其中_post文件夹下的markdown文档，会被hexo自动解析成html，并放置到public文件夹中</p>\n<p>其他以_开头的文件夹会被自动忽略</p>\n<ul>\n<li>themes主题文件夹</li>\n</ul>\n<p>hexo在解析时，会根据主题来生成静态页面。</p>\n<h4 id=\"新建一篇文章\"><a href=\"#新建一篇文章\" class=\"headerlink\" title=\"新建一篇文章\"></a>新建一篇文章</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>layout若不指定，默认从_config.yml文件中的default_layout代替</p>\n<h4 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody></table>\n<p>使用generate命令后，hexo的文件夹会自动生成静态文件，放置到配置文件中规定的public目录中</p>\n<p><img src=\"/images/blog_create/hexo_files_after_generate_1.png\" alt></p>\n<p>public文件夹中的内容如下</p>\n<p><img src=\"/images/blog_create/hexo_files_after_generate_2.png\" alt></p>\n<h4 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署网站\"><a href=\"#部署网站\" class=\"headerlink\" title=\"部署网站\"></a>部署网站</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>部署后的界面如下<br><img src=\"/images/blog_create/hexo_server_page.png\" alt></p>\n<h4 id=\"清除缓存文件\"><a href=\"#清除缓存文件\" class=\"headerlink\" title=\"清除缓存文件\"></a>清除缓存文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p><img src=\"/images/blog_create/hexo_clean.png\" alt></p>\n<h4 id=\"其他hexo命令\"><a href=\"#其他hexo命令\" class=\"headerlink\" title=\"其他hexo命令\"></a>其他hexo命令</h4><p><a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"noopener\">其他hexo命令</a></p>\n<h3 id=\"hexo部署到github中\"><a href=\"#hexo部署到github中\" class=\"headerlink\" title=\"hexo部署到github中\"></a>hexo部署到github中</h3><p>通过_config.yml文件建立关联，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/onepieceworld/hexo_test.git</span><br><span class=\"line\">  branch: gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ $ npm install hexo-deployer-git --save</span><br><span class=\"line\">~ $ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>至此，hexo已成功将解析后的html文件上传到github中</p>\n<p><img src=\"/images/blog_create/hexo_github.png\" alt></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"基于Github搭建个人博客\"><a href=\"#基于Github搭建个人博客\" class=\"headerlink\" title=\"基于Github搭建个人博客\"></a>基于Github搭建个人博客</h1><h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h2><h3 id=\"什么是github-pages？\"><a href=\"#什么是github-pages？\" class=\"headerlink\" title=\"什么是github pages？\"></a>什么是github pages？</h3><p>GitHub Pages is a static site hosting service.</p>\n<p>GitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository. To learn more about the different types of GitHub Pages sites, see “<a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">User, organization, and project pages</a>.”</p>\n<p>You can create and publish GitHub Pages online using the <a href=\"https://help.github.com/articles/creating-pages-with-the-automatic-generator\" target=\"_blank\" rel=\"noopener\">Automatic Page Generator</a>. If you prefer to work locally, you can use <a href=\"http://desktop.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Desktop</a> or the <a href=\"https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line\" target=\"_blank\" rel=\"noopener\">command line</a>.</p>\n<p> 由用户编写的、免费的、托管在github上的静态网页</p>\n<hr>","more":"<h3 id=\"如何搭建Github-Pages\"><a href=\"#如何搭建Github-Pages\" class=\"headerlink\" title=\"如何搭建Github Pages\"></a>如何搭建Github Pages</h3><p>官方教程</p>\n<p> <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></p>\n<p><a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/user-organization-and-project-pages/</a></p>\n<p>搭建github博客基本分为如下几步：</p>\n<ul>\n<li>第一步，create a repository</li>\n<li>第二步， clone the repository</li>\n<li>第三步，create your website pages</li>\n<li>第四步，commit and push your files</li>\n</ul>\n<p>github pages为我们搭建的个人博客地址是有规则的：<br>例如，我的github地址为<a href=\"https://github.com/wr4javaee\" target=\"_blank\" rel=\"noopener\">https://github.com/wr4javaee</a><br>那么，我的博客主页地址为<a href=\"https://wr4javaee.github.io\" target=\"_blank\" rel=\"noopener\">https://wr4javaee.github.io</a></p>\n<p>若我的项目名称叫blog，那么对应的pages地址就是<a href=\"https://wr4javaee.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://wr4javaee.github.io/blog</a></p>\n<ul>\n<li>注册github账号</li>\n</ul>\n<p><a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">https://github.com/join</a></p>\n<p><a href=\"mailto:onepieceworld@qq.com\" target=\"_blank\" rel=\"noopener\">onepieceworld@qq.com</a>&amp;3377128016，<a href=\"mailto:protosssoul@qq.com\" target=\"_blank\" rel=\"noopener\">protosssoul@qq.com</a>&amp;2027194199</p>\n<p><img src=\"/images/blog_create/create_repository.png\" alt></p>\n<p>github为我们准备了两种搭建博客方式，一种是github提供模板，我们只需写md文档即可。另一种是从头搭建。</p>\n<p>我们先介绍第一种方式。</p>\n<h4 id=\"方法一，利用github-pages模板搭建博客\"><a href=\"#方法一，利用github-pages模板搭建博客\" class=\"headerlink\" title=\"方法一，利用github pages模板搭建博客\"></a>方法一，利用github pages模板搭建博客</h4><p>进入项目-&gt;settings-&gt;github pages-&gt;launch</p>\n<p><img src=\"/images/blog_create/settings_lunch.png\" alt></p>\n<p>点击launch后，进入</p>\n<p><img src=\"/images/blog_create/lunch_page1.png\" alt></p>\n<p>填写好项目名称、项目描述后，进入下一步，选择项目模板</p>\n<p><img src=\"/images/blog_create/settings_theme.png\" alt></p>\n<p>选择好模板后，点击 publish page即可提交。</p>\n<p>稍等片刻后，github即可为我们搭建好项目对应的网站。</p>\n<p>通过访问<a href=\"https://onepieceworld.github.io/test/\" target=\"_blank\" rel=\"noopener\">https://onepieceworld.github.io/test/</a></p>\n<h4 id=\"方法二，从头搭建博客\"><a href=\"#方法二，从头搭建博客\" class=\"headerlink\" title=\"方法二，从头搭建博客\"></a>方法二，从头搭建博客</h4><p>若我们查看github模板为我们创建的博客，会发现github为我们自动创建了一个分支gh-pages作为默认分支，博客的文件都提交在这个特定的分支中。</p>\n<p><img src=\"/images/blog_create/git_branch.png\" alt></p>\n<p>那么，若我们从头搭建博客，就得模仿这一步骤。github规定，只有该分支中的页面，才会生成静态网页文件。</p>\n<p>我们新创建一个reponsitory，名为test1</p>\n<p><a href=\"https://github.com/onepieceworld/test1.git\" target=\"_blank\" rel=\"noopener\">https://github.com/onepieceworld/test1.git</a></p>\n<p>接下来，我们创建一个全新的gh-pages分支，并将其作为默认分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>为新的空白分支创建默认页面并提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github/test1$ git checkout --orphan gh-pages</span><br><span class=\"line\">Switched to a new branch &apos;gh-pages&apos;</span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git branch </span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ echo &quot;Hello World!&quot; &gt; index.html</span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git add index.html </span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git commit -a -m &quot;commit index pages&quot;</span><br><span class=\"line\">[gh-pages (root-commit) 0fab7c5] commit index pages</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 index.html</span><br><span class=\"line\">yumao@ubuntu:~/github/test1$ git push origin gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>提交成功后，访问<a href=\"https://onepieceworld.github.io/test1/，\" target=\"_blank\" rel=\"noopener\">https://onepieceworld.github.io/test1/，</a></p>\n<p>可以看到，github已经自动为我们将静态文件部署。</p>\n<hr>\n<h2 id=\"利用Jekyll搭建个人博客\"><a href=\"#利用Jekyll搭建个人博客\" class=\"headerlink\" title=\"利用Jekyll搭建个人博客\"></a>利用Jekyll搭建个人博客</h2><p><a href=\"http://jekyll.com.cn\" target=\"_blank\" rel=\"noopener\">Jekyll官方网站</a><br><a href=\"https://github.com/jekyll/jekyll\" target=\"_blank\" rel=\"noopener\">Jekyll github</a></p>\n<h3 id=\"什么是Jekyll？\"><a href=\"#什么是Jekyll？\" class=\"headerlink\" title=\"什么是Jekyll？\"></a>什么是Jekyll？</h3><p>Jekyll is a simple, blog-aware, static site generator perfect for<br>personal, project, or organization sites. Think of it like a file-based<br>CMS, without all the complexity. Jekyll takes your content, renders<br>Markdown and Liquid templates, and spits out a complete, static website<br>ready to be served by Apache, Nginx or another web server. Jekyll is the<br> engine behind <a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>, which you can use to host sites right from your GitHub repositories.</p>\n<p>一个可以将纯文本转化为静态网站文件的生成器。</p>\n<p>基于Jekyll，我们可以只关注编写纯文本，如markdown，而无需将精力放在HTML本身。</p>\n<h3 id=\"Jekyll的简易用法\"><a href=\"#Jekyll的简易用法\" class=\"headerlink\" title=\"Jekyll的简易用法\"></a>Jekyll的简易用法</h3><blockquote>\n<p><a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"noopener\">Jekyll官方使用简介</a>，内容很详细<br><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">作者阮一峰关于Jekyll与Github Blog的入门教程</a>，推荐大家阅读</p>\n</blockquote>\n<p>首先，Jekyll依赖Ruby</p>\n<p>安装Ruby环境过程中会遇到GWF，需要用到淘宝提供的RubyGems镜像服务，它与官方服务同步频率为15分钟。</p>\n<p>Ruby环境搭建好后，我们通过以下命令安装Jekyll</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ $ gem install jekyll</span><br></pre></td></tr></table></figure>\n\n<p>接下来，利用jekyll命令jekyll new my-awesome-site自动创建jekyll项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github$ jekyll new jekyll_test</span><br><span class=\"line\">New jekyll site installed in /home/yumao/github/jekyll_test. </span><br><span class=\"line\">Running bundle install in /home/yumao/github/jekyll_test... </span><br><span class=\"line\">Fetching gem metadata from https://rubygems.org/................</span><br><span class=\"line\">Fetching version metadata from https://rubygems.org/...</span><br><span class=\"line\">Fetching dependency metadata from https://rubygems.org/..</span><br><span class=\"line\">Resolving dependencies...</span><br><span class=\"line\">Using addressable 2.4.0</span><br><span class=\"line\">Using colorator 1.1.0</span><br><span class=\"line\">Using ffi 1.9.14</span><br><span class=\"line\">Using forwardable-extended 2.6.0</span><br><span class=\"line\">Using sass 3.4.22</span><br><span class=\"line\">Using rb-fsevent 0.9.7</span><br><span class=\"line\">Using kramdown 1.12.0</span><br><span class=\"line\">Using liquid 3.0.6</span><br><span class=\"line\">Using mercenary 0.3.6</span><br><span class=\"line\">Using rouge 1.11.1</span><br><span class=\"line\">Using safe_yaml 1.0.4</span><br><span class=\"line\">Using minima 2.0.0</span><br><span class=\"line\">Using bundler 1.13.5</span><br><span class=\"line\">Using rb-inotify 0.9.7</span><br><span class=\"line\">Using pathutil 0.14.0</span><br><span class=\"line\">Using jekyll-sass-converter 1.4.0</span><br><span class=\"line\">Using listen 3.0.8</span><br><span class=\"line\">Using jekyll-watch 1.5.0</span><br><span class=\"line\">Using jekyll 3.3.0</span><br><span class=\"line\">Using jekyll-feed 0.8.0</span><br><span class=\"line\">Bundle complete! 3 Gemfile dependencies, 20 gems now installed.</span><br><span class=\"line\">Use `bundle show [gemname]` to see where a bundled gem is installed.</span><br><span class=\"line\">yumao@ubuntu:~/github$</span><br></pre></td></tr></table></figure>\n\n<p>进入项目目录下，执行Jekyll命令 jekyll serve，启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yumao@ubuntu:~/github$ cd jekyll_test/</span><br><span class=\"line\">yumao@ubuntu:~/github/jekyll_test$ jekyll serve</span><br><span class=\"line\">WARN: Unresolved specs during Gem::Specification.reset:</span><br><span class=\"line\">      rouge (~&gt; 1.7)</span><br><span class=\"line\">      jekyll-watch (~&gt; 1.1)</span><br><span class=\"line\">WARN: Clearing out unresolved specs.</span><br><span class=\"line\">Please report a bug if this causes problems.</span><br><span class=\"line\">Configuration file: /home/yumao/github/jekyll_test/_config.yml</span><br><span class=\"line\">Configuration file: /home/yumao/github/jekyll_test/_config.yml</span><br><span class=\"line\">            Source: /home/yumao/github/jekyll_test</span><br><span class=\"line\">       Destination: /home/yumao/github/jekyll_test/_site</span><br><span class=\"line\"> Incremental build: disabled. Enable with --incremental</span><br><span class=\"line\">      Generating... </span><br><span class=\"line\">                    done in 0.286 seconds.</span><br><span class=\"line\"> Auto-regeneration: enabled for &apos;/home/yumao/github/jekyll_test&apos;</span><br><span class=\"line\">Configuration file: /home/yumao/github/jekyll_test/_config.yml</span><br><span class=\"line\">    Server address: http://127.0.0.1:4000/</span><br><span class=\"line\">  Server running... press ctrl-c to stop.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/blog_create/jekyll_default_page.png\" alt></p>\n<p>至此，一个简易的jekyll项目就搭建好了，我们将它部署到github中，每次只要新增md文档，提交到github后，其会自动编译jekyll项目，自动解析成静态网页文件。</p>\n<h3 id=\"Jekyll的目录结构\"><a href=\"#Jekyll的目录结构\" class=\"headerlink\" title=\"Jekyll的目录结构\"></a>Jekyll的目录结构</h3><p><img src=\"/images/blog_create/jekyll_files.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── _drafts</span><br><span class=\"line\">|   ├── begin-with-the-crazy-ideas.textile</span><br><span class=\"line\">|   └── on-simplicity-in-technology.markdown</span><br><span class=\"line\">├── _includes</span><br><span class=\"line\">|   ├── footer.html</span><br><span class=\"line\">|   └── header.html</span><br><span class=\"line\">├── _layouts</span><br><span class=\"line\">|   ├── default.html</span><br><span class=\"line\">|   └── post.html</span><br><span class=\"line\">├── _posts</span><br><span class=\"line\">|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile</span><br><span class=\"line\">|   └── 2009-04-26-barcamp-boston-4-roundup.textile</span><br><span class=\"line\">├── _data</span><br><span class=\"line\">|   └── members.yml</span><br><span class=\"line\">├── _site</span><br><span class=\"line\">└── index.html</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>文件 / 目录</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_config.yml</code></td>\n<td>保存<a href=\"http://jekyll.com.cn/docs/configuration/\" target=\"_blank\" rel=\"noopener\">配置</a>数据。很多配置选项都会直接从命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。</td>\n</tr>\n<tr>\n<td><code>_drafts</code></td>\n<td>drafts 是未发布的文章。这些文件的格式中都没有 <code>title.MARKUP</code> 数据。学习如何使用 <a href=\"http://jekyll.com.cn/docs/drafts/\" target=\"_blank\" rel=\"noopener\">drafts</a>.</td>\n</tr>\n<tr>\n<td><code>_includes</code></td>\n<td>你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签          <code>{nclude file.ext</code>          来把文件 <code>_includes/file.ext</code> 包含进来。</td>\n</tr>\n<tr>\n<td><code>_layouts</code></td>\n<td>layouts 是包裹在文章外部的模板。布局可以在 <a href=\"http://jekyll.com.cn/docs/frontmatter/\" target=\"_blank\" rel=\"noopener\">YAML 头信息</a>中根据不同文章进行选择。          这将在下一个部分进行介绍。标签          <code>content</code>          可以将content插入页面中。</td>\n</tr>\n<tr>\n<td><code>_posts</code></td>\n<td>这里放的就是你的文章了。文件格式很重要，必须要符合:          <code>YEAR-MONTH-DAY-title.MARKUP</code>。          The <a href=\"http://jekyll.com.cn/docs/permalinks/\" target=\"_blank\" rel=\"noopener\">permalinks</a> 可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。</td>\n</tr>\n<tr>\n<td><code>_data</code></td>\n<td>Well-formatted site data should be placed here. The jekyll engine will           autoload all yaml files (ends with <code>.yml</code> or <code>.yaml</code>)           in this directory. If there’s a file <code>members.yml</code> under the directory,           then you can access contents of the file through <code>site.data.members</code>.</td>\n</tr>\n<tr>\n<td><code>_site</code></td>\n<td>一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 <code>.gitignore</code> 文件中。</td>\n</tr>\n<tr>\n<td><code>index.html</code> and other HTML, Markdown, Textile files</td>\n<td>如果这些文件中包含 <a href=\"http://jekyll.com.cn/docs/frontmatter/\" target=\"_blank\" rel=\"noopener\">YAML 头信息</a> 部分，Jekyll 就会自动将它们进行转换。当然，其他的如 <code>.html</code>， <code>.markdown</code>，          <code>.md</code>，或者 <code>.textile</code> 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。</td>\n</tr>\n<tr>\n<td>Other Files/Folders</td>\n<td>其他一些未被提及的目录和文件如          <code>css</code> 还有 <code>images</code> 文件夹，          <code>favicon.ico</code> 等文件都将被完全拷贝到生成的 site 中。 这里有一些<a href=\"http://jekyll.com.cn/docs/sites/\" target=\"_blank\" rel=\"noopener\">使用 Jekyll 的站点</a>，如果你感兴趣就来看看吧。</td>\n</tr>\n</tbody></table>\n<h4 id=\"config-yml配置文件\"><a href=\"#config-yml配置文件\" class=\"headerlink\" title=\"_config.yml配置文件\"></a>_config.yml配置文件</h4><p><a href=\"http://jekyll.com.cn/docs/configuration/\" target=\"_blank\" rel=\"noopener\">官方配置文件说明</a></p>\n<h3 id=\"使用Jekyll的开源模板\"><a href=\"#使用Jekyll的开源模板\" class=\"headerlink\" title=\"使用Jekyll的开源模板\"></a>使用Jekyll的开源模板</h3><p>网络上免费的Jekyll主题非常多，推荐2个主题网站</p>\n<blockquote>\n<p><a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll主题网站一</a></p>\n<p><a href=\"http://jekyllthemes.io/\" target=\"_blank\" rel=\"noopener\">Jekyll主题网站二</a></p>\n</blockquote>\n<p>这里为大家推荐一个我喜欢的主题来源</p>\n<blockquote>\n<p><a href=\"http://gaohaoyang.github.io\" target=\"_blank\" rel=\"noopener\">Gaohaoyang</a></p>\n</blockquote>\n<p>github地址</p>\n<p><a href=\"https://github.com/Gaohaoyang/gaohaoyang.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Gaohaoyang/gaohaoyang.github.io.git</a></p>\n<h3 id=\"Jekyll的优缺点\"><a href=\"#Jekyll的优缺点\" class=\"headerlink\" title=\"Jekyll的优缺点\"></a>Jekyll的优缺点</h3><p>Jekyll是比较流行的博客系统，其主题、插件数量上比较丰富，且上手简单。<br>缺点为文章量多的时候，生成速度慢。</p>\n<hr>\n<h2 id=\"利用Hexo搭建个人博客\"><a href=\"#利用Hexo搭建个人博客\" class=\"headerlink\" title=\"利用Hexo搭建个人博客\"></a>利用Hexo搭建个人博客</h2><h3 id=\"Hexo与Jekyll的区别\"><a href=\"#Hexo与Jekyll的区别\" class=\"headerlink\" title=\"Hexo与Jekyll的区别\"></a>Hexo与Jekyll的区别</h3><p>Hexo是基于Node.js编写的静态博客系统，使用Jekyl我们可以将原生的markdown文档上传到github，由github自动解析成静态html文件。但hexo为本地将markdown文档解析后，将生成的静态html文件直接上传到github中。</p>\n<p>由于hexo基于nodejs，因此其生成html速度较Jekyll快，相对更灵活。主题数量然有Jade/Stylus/Less等各种方言支持。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语言</th>\n<th>活跃度</th>\n<th>开箱即用</th>\n<th>主题数量</th>\n<th>主题系统</th>\n<th>生成速度</th>\n<th>博客适应性</th>\n<th>非博客适应性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Jekyll</td>\n<td>Ruby</td>\n<td>S</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>C</td>\n<td>A</td>\n<td>C</td>\n</tr>\n<tr>\n<td>Hexo</td>\n<td>NodeJS</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>B</td>\n</tr>\n</tbody></table>\n<h3 id=\"Hexo官方文档\"><a href=\"#Hexo官方文档\" class=\"headerlink\" title=\"Hexo官方文档\"></a>Hexo官方文档</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Hexo基于Node.js，因此首先应安装Node.js环境。</p>\n<p>cURL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>Wget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，重启终端执行下列命令完成安装Node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>若环境准备就绪，使用以下命令安装Hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Hexo建立网站\"><a href=\"#使用Hexo建立网站\" class=\"headerlink\" title=\"使用Hexo建立网站\"></a>使用Hexo建立网站</h3><p>使用以下命令初始化网站</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>建站后的文件目录如下：</p>\n<p><img src=\"/images/blog_create/hexo_files.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>scaffolds模板文件夹</li>\n</ul>\n<p>建站的模板，hexo依赖于此模板来生成静态文件。</p>\n<ul>\n<li>_config.yml配置文件</li>\n</ul>\n<p><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">hexo官方配置文件说明</a></p>\n<p>以下为hexo的默认配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: https://hexo.io/docs/configuration.html</span><br><span class=\"line\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site</span><br><span class=\"line\"># 网站标题</span><br><span class=\"line\">title: Hexo </span><br><span class=\"line\"># 网站副标题</span><br><span class=\"line\">subtitle: </span><br><span class=\"line\"># 网站描述</span><br><span class=\"line\">description: </span><br><span class=\"line\">author: John Doe</span><br><span class=\"line\"># 网站使用的语言</span><br><span class=\"line\">language: </span><br><span class=\"line\"># 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span><br><span class=\"line\">timezone: </span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 #http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\"># 网站根目录</span><br><span class=\"line\">root: /</span><br><span class=\"line\"># 文章的 永久链接 格式 \t:year/:month/:day/:title/</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\"># 永久链接中各部分的默认值 \t</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\"># 资源文件夹，这个文件夹用来存放内容。</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\"># 公共文件夹，这个文件夹用于存放生成的站点文件</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\"># 标签文件夹</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\"># 归档文件夹</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\"># 分类文件夹</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\"># Include code 文件夹</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\"># 国际化（i18n）文件夹</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\"># 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 \t</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\"># 默认分类 \tuncategorized</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\"># 分类别名 \t</span><br><span class=\"line\">category_map:</span><br><span class=\"line\"># 标签别名 \t</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\"># 日期格式 \tYYYY-MM-DD</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\"># 时间格式 \tH:mm:ss</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\"># 每页显示的文章量 (0 = 关闭分页功能) \t10</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\"># 分页目录 \tpage</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\"># 当前主题名称。值为false时禁用主题</span><br><span class=\"line\">theme: landscape</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>source资源文件夹</li>\n</ul>\n<p>用来存放用户资源，其中_post文件夹下的markdown文档，会被hexo自动解析成html，并放置到public文件夹中</p>\n<p>其他以_开头的文件夹会被自动忽略</p>\n<ul>\n<li>themes主题文件夹</li>\n</ul>\n<p>hexo在解析时，会根据主题来生成静态页面。</p>\n<h4 id=\"新建一篇文章\"><a href=\"#新建一篇文章\" class=\"headerlink\" title=\"新建一篇文章\"></a>新建一篇文章</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>layout若不指定，默认从_config.yml文件中的default_layout代替</p>\n<h4 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody></table>\n<p>使用generate命令后，hexo的文件夹会自动生成静态文件，放置到配置文件中规定的public目录中</p>\n<p><img src=\"/images/blog_create/hexo_files_after_generate_1.png\" alt></p>\n<p>public文件夹中的内容如下</p>\n<p><img src=\"/images/blog_create/hexo_files_after_generate_2.png\" alt></p>\n<h4 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署网站\"><a href=\"#部署网站\" class=\"headerlink\" title=\"部署网站\"></a>部署网站</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>部署后的界面如下<br><img src=\"/images/blog_create/hexo_server_page.png\" alt></p>\n<h4 id=\"清除缓存文件\"><a href=\"#清除缓存文件\" class=\"headerlink\" title=\"清除缓存文件\"></a>清除缓存文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p><img src=\"/images/blog_create/hexo_clean.png\" alt></p>\n<h4 id=\"其他hexo命令\"><a href=\"#其他hexo命令\" class=\"headerlink\" title=\"其他hexo命令\"></a>其他hexo命令</h4><p><a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"noopener\">其他hexo命令</a></p>\n<h3 id=\"hexo部署到github中\"><a href=\"#hexo部署到github中\" class=\"headerlink\" title=\"hexo部署到github中\"></a>hexo部署到github中</h3><p>通过_config.yml文件建立关联，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/onepieceworld/hexo_test.git</span><br><span class=\"line\">  branch: gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ $ npm install hexo-deployer-git --save</span><br><span class=\"line\">~ $ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>至此，hexo已成功将解析后的html文件上传到github中</p>\n<p><img src=\"/images/blog_create/hexo_github.png\" alt></p>"},{"title":"Zookeeper Java API的使用","date":"2016-07-25T16:00:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"\n## 前言\n\nZookeeper官方API文档 http://zookeeper.apache.org/doc/r3.4.6/api/index.html\n\n<!-- more -->\n\n## 通过API建立ZooKeeper Session\n\nZooKeeper构造方法官方文档摘录如下\n\n> | Constructor and Description              |\n> | ---------------------------------------- |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         boolean canBeReadOnly)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd,         boolean canBeReadOnly)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n\n\n\nDemo github地址：\n\n```java\npackage me.wangran.zookeeper.demo.api;\n\nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.Watcher.Event.KeeperState;\nimport org.apache.zookeeper.ZooKeeper;\n\n/**\n * Zookeeper 创建Session\n * @author Wang Ran\n */\npublic class ZooKeeperSessionDemo implements Watcher {\n\tprivate static CountDownLatch countDownLatch = new CountDownLatch(1);\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tdemo3();\n\t}\n\t\n\t/**\n\t * 创建最基本的会话\n\t */\n\tpublic static void demo1() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperSessionDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t}\n\t\n\t/**\n\t * 创建指定read only模式的会话\n\t */\n\tpublic static void demo2() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181/test_root\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperSessionDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tboolean canBeReadOnly = true; // 是否支持read only模式，默认为false，若一个机器和Zookeeper Cluster过半机器失去网络连接，则不处理所有读写请求。若未true，则该情况可提供读请求。\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher, canBeReadOnly);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t}\n\t\n\t/**\n\t * 恢复会话\n\t */\n\tpublic static void demo3()  throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181/test_root\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperSessionDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\tlong sessionId = zookeeper.getSessionId(); // 用于恢复会话\n\t\tbyte[] sessionPwd = zookeeper.getSessionPasswd(); // 用于恢复会话\n\t\tcountDownLatch = new CountDownLatch(1);\n\t\tzookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher, sessionId, sessionPwd);\n\t\tSystem.out.println(\"zookeeper reconnecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper reconnected, state is \" + zookeeper.getState());\n\t}\n\t\n\t@Override\n\tpublic void process(WatchedEvent watchedEvent) {\n\t\tSystem.out.println(\"ZooKeeperWatcherDemo process, watchedEvent is \" + watchedEvent);\n\t\tif(KeeperState.SyncConnected == watchedEvent.getState()) {\n\t\t\tcountDownLatch.countDown();\n\t\t}\n\t}\n}\n```\n\n---\n\n\n\n## 通过API创建节点\n\n### 说明\n\n创建节点API地址：http://zookeeper.apache.org/doc/r3.4.6/api/index.html\n\n这里，我们主要用到两个方法，分别是\n\n| 返回值      | 方法                                       |\n| -------- | ---------------------------------------- |\n| `String` | `create(String path,      byte[] data,      List acl,      CreateMode createMode)`Create a node with the given path. |\n| `void`   | `create(String path,      byte[] data,      List acl,      CreateMode createMode,      AsyncCallback.StringCallback cb,      Object ctx)`The asynchronous version of create. |\n\n\n\n* path 指定创建的节点路径\n* data 节点的内容\n* acl 创建节点策略\n\n```Java\n        /**\n         * This Id represents anyone.\n         */\n        public final Id ANYONE_ID_UNSAFE = new Id(\"world\", \"anyone\");\n\n        /**\n         * This Id is only usable to set ACLs. It will get substituted with the\n         * Id's the client authenticated with.\n         */\n        public final Id AUTH_IDS = new Id(\"auth\", \"\");\n\n        /**\n         * This is a completely open ACL .\n         */\n        public final ArrayList<ACL> OPEN_ACL_UNSAFE = new ArrayList<ACL>(\n                Collections.singletonList(new ACL(Perms.ALL, ANYONE_ID_UNSAFE)));\n\n        /**\n         * This ACL gives the creators authentication id's all permissions.\n         */\n        public final ArrayList<ACL> CREATOR_ALL_ACL = new ArrayList<ACL>(\n                Collections.singletonList(new ACL(Perms.ALL, AUTH_IDS)));\n\n        /**\n         * This ACL gives the world the ability to read.\n         */\n        public final ArrayList<ACL> READ_ACL_UNSAFE = new ArrayList<ACL>(\n                Collections\n                        .singletonList(new ACL(Perms.READ, ANYONE_ID_UNSAFE)));\n```\n\n* cb 异步回调函数，当节点创建后ZooKeeper客户端自动调用本方法。需要实现StringCallback接口，重写processResult方法\n* ctx 回调方法执行时使用的对象，通常放置上线文Context信息\n\n\n* CreateMode节点类型枚举如下\n\n```Java\n    /**\n     * The znode will not be automatically deleted upon client's disconnect\n     * 持久节点\n     */\n    PERSISTENT (0, false, false, false),\n    /**\n    * The znode will not be automatically deleted upon client's disconnect,\n    * and its name will be appended with a monotonically increasing number.\n    * 持久顺序节点\n    */\n    PERSISTENT_SEQUENTIAL (2, false, true, false),\n    /**\n     * The znode will be deleted upon the client's disconnect.\n     * 临时节点\n     */\n    EPHEMERAL (1, true, false, false),\n    /**\n     * The znode will be deleted upon the client's disconnect, and its name\n     * will be appended with a monotonically increasing number.\n     * 临时顺序节点\n     */\n    EPHEMERAL_SEQUENTIAL (3, true, true, false),\n    /**\n     * The znode will be a container node. Container\n     * nodes are special purpose nodes useful for recipes such as leader, lock,\n     * etc. When the last child of a container is deleted, the container becomes\n     * a candidate to be deleted by the server at some point in the future.\n     * Given this property, you should be prepared to get\n     * {@link org.apache.zookeeper.KeeperException.NoNodeException}\n     * when creating children inside of this container node.\n     */\n    CONTAINER (4, false, false, true);\n```\n\n### Case\n\n* case 1 根节点下创建持久节点/node_pokemon\n\n```Java\npackage me.wangran.zookeeper.demo.api;\n\nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\nimport org.apache.zookeeper.Watcher.Event.KeeperState;\nimport org.apache.zookeeper.ZooDefs.Ids;\n\n/**\n * ZooKeeper创建节点Demo\n * @author Wang Ran\n */\npublic class ZooKeeperCreateNodeDemo  implements Watcher {\n\tprivate static CountDownLatch countDownLatch = new CountDownLatch(1);\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew ZooKeeperCreateNodeDemo().demo1();\n\t}\n\t\n\t/**\n\t * 创建最基本的会话\n\t */\n\tpublic void demo1() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperCreateNodeDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\t\n\t\tString newNodePath = \"/node_pokemon\";\n\t\tbyte[] newNodeData = \"go\".getBytes();\n\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;\n\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);\n\t\tSystem.out.println(\"zookeeper node created\");\n\t}\n\t\n\t@Override\n\tpublic void process(WatchedEvent watchedEvent) {\n\t\tSystem.out.println(\"ZooKeeperWatcherDemo process, watchedEvent is \" + watchedEvent);\n\t\tif(KeeperState.SyncConnected == watchedEvent.getState()) {\n\t\t\tcountDownLatch.countDown();\n\t\t}\n\t}\n\t\n}\n```\n\n控制台输出：\n\n> zookeeper connecting, state is CONNECTING\n> ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null\n> zookeeper connected, state is CONNECTED\n> zookeeper node created\n\n\n\n* case2 创建节点后异步触发回调函数\n\n```Java\npackage me.wangran.zookeeper.demo.api;\n\nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.zookeeper.AsyncCallback;\nimport org.apache.zookeeper.AsyncCallback.StringCallback;\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\nimport org.apache.zookeeper.Watcher.Event.KeeperState;\nimport org.apache.zookeeper.ZooDefs.Ids;\n\n/**\n * ZooKeeper创建节点Demo\n * @author Wang Ran\n */\npublic class ZooKeeperCreateNodeDemo  implements Watcher {\n\tprivate static CountDownLatch countDownLatch = new CountDownLatch(1);\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew ZooKeeperCreateNodeDemo().demo2();\n\t}\n\t\n\t/**\n\t * 创建持久节点\n\t */\n\tpublic void demo1() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperCreateNodeDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\t\n\t\tString newNodePath = \"/node_pokemon\";\n\t\tbyte[] newNodeData = \"go\".getBytes();\n\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;\n\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);\n\t\tSystem.out.println(\"zookeeper node created\");\n\t}\n\t\n\t/**\n\t * 创建节点后异步回调业务函数\n\t */\n\tpublic void demo2() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181/node_pokemon\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperCreateNodeDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\t\n\t\tString newNodePath = \"/node_kinosaki\";\n\t\tbyte[] newNodeData = \"osen\".getBytes();\n\t\tCreateMode newNodeMode = CreateMode.PERSISTENT_SEQUENTIAL;\n\t\tObject ctx = \"ContextDemo\";\n\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode, new StringCallbackDemo(), ctx);\n\t\tSystem.out.println(\"zookeeper node created\");\n\t\tThread.sleep(10);\n\t}\n\t\n\t/**\n\t * 异步回调函数\n\t * @author Wang Ran\n\t */\n\tclass StringCallbackDemo implements AsyncCallback.StringCallback {\n\t\t@Override\n\t\tpublic void processResult(int rc, String path, Object ctx, String name) {\n\t\t\tSystem.out.println(\"StringCallbackDemo.processResult executed!, resultCode is \" + rc\n\t\t\t\t\t+ \", path is\" + path // 调用接口时传入的Path\n\t\t\t\t\t+ \", context is \" + ctx.toString() // 调用接口时传入的Context\n\t\t\t\t\t+ \", node name is \" + name); // 实际在服务器中创建的节点名称\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void process(WatchedEvent watchedEvent) {\n\t\tSystem.out.println(\"ZooKeeperWatcherDemo process, watchedEvent is \" + watchedEvent);\n\t\tif(KeeperState.SyncConnected == watchedEvent.getState()) {\n\t\t\tcountDownLatch.countDown();\n\t\t}\n\t}\n}\n```\n\n控制台输出：\n\n> zookeeper connecting, state is CONNECTING\n> ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null\n> zookeeper connected, state is CONNECTED\n> zookeeper node created\n> StringCallbackDemo.processResult executed!, resultCode is 0, path is/node_kinosaki, context is ContextDemo, node name is /node_kinosaki0000000005\n\n---\n\n\n## 通过API读取节点\n\n### API说明：\n\n* ### getChildren查询指定节点的所有子节点\n\n* ### getData查询指定节点的数据内容\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `List` | `  getChildren  (String path, boolean watch)`Return the list of the children of the node of the given path. |\n| `void` | `  getChildren  (String path, boolean watch, AsyncCallback.Children2Callback cb, Object ctx)`The asynchronous version of getChildren. |\n| `void` | `  getChildren  (String path, boolean watch, AsyncCallback.ChildrenCallback cb, Object ctx)`The asynchronous version of getChildren. |\n| `List` | `  getChildren  (String path, boolean watch, Stat stat)`For the given znode path return the stat and children list. |\n| `List` | `  getChildren  (String path, Watcher watcher)`Return the list of the children of the node of the given path. |\n| `void` | `  getChildren  (String path, Watcher watcher, AsyncCallback.Children2Callback cb, Object ctx)`The asynchronous version of getChildren. |\n| `void` | `  getChildren  (String path, Watcher watcher, AsyncCallback.ChildrenCallback cb, Object ctx)`The asynchronous version of getChildren. |\n| `List` | `  getChildren  (String path, Watcher watcher, Stat stat)`For the given znode path return the stat and children list. |\n\n\n| 返回值      | 方法                                       |\n| -------- | ---------------------------------------- |\n| `void`   | `getData(String path,       boolean watch,       AsyncCallback.DataCallback cb,       Object ctx)`The asynchronous version of getData. |\n| `byte[]` | `getData(String path,       boolean watch,       Stat stat)`Return the data and the stat of the node of the given path. |\n| `void`   | `getData(String path,       Watcher watcher,       AsyncCallback.DataCallback cb,       Object ctx)`The asynchronous version of getData. |\n| `byte[]` | `getData(String path,       Watcher watcher,       Stat stat)`Return the data and the stat of the node of the given path. |\n\n* ### 参数说明\n\n| 参数      | 说明                                       |\n| ------- | ---------------------------------------- |\n| path    | 想要查询的节点路径。                               |\n| watch   | false为不需要注册watcher，true为使用默认watcher。     |\n| watcher | 可为null。指定watcher用于订阅子节点列表变化通知。当子节点被添加或删除时会向客户端发送通知（通知内容不包含节点列表，客户端需重新查询以获得节点列表信息）。 |\n| cb      | 异步回调函数                                   |\n| ctx     | 上下文对象                                    |\n| stat    | 指定数据节点的状态信息，包含cZxid（节点创建的事务id）、mZxid（节点最后一次更新的事务id）、dataLength（节点数据内容长度），传入变量的值会在方法执行过程中被服务器响应的值替换。 |\n\n\n\n## 通过API更新节点\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `Stat` | `  setData  (String path,       byte[] data,       int version)`Set the data for the node of the given path if such a node exists and the given version matches the version of the node (if the given version is -1, it matches any node's versions).说明：该方法为同步更新方法 |\n| `void` | `  setData  (String path,       byte[] data,       int version,       AsyncCallback.StatCallback cb,       Object ctx)`The asynchronous version of setData.说明：该方法为异步更新方法 |\n\n### 参数说明\n\n| 参数      | 说明         |\n| ------- | ---------- |\n| path    | 想要更新的节点路径。 |\n| data[ ] | 更新的内容      |\n| version | 指定更新的数据版本  |\n| cb      | 异步回调函数     |\n| ctx     | 上下文对象      |\n\n\n\n\n## 通过API删除节点\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `void` | `  delete  (String path,      int version)`Delete the node with the given path. |\n| `void` | `  delete  (String path,      int version,      AsyncCallback.VoidCallback cb,      Object ctx)`The asynchronous version of delete. |\n\n---\n\n\n\n## 通过API判断节点是否存在\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `Stat` | `  exists  (String path,      boolean watch)`Return the stat of the node of the given path. |\n| `void` | `  exists  (String path,      boolean watch,      AsyncCallback.StatCallback cb,      Object ctx)`The asynchronous version of exists. |\n| `Stat` | `  exists  (String path,      Watcher watcher)`Return the stat of the node of the given path. |\n| `void` | `  exists  (String path,      Watcher watcher,      AsyncCallback.StatCallback cb,      Object ctx)`The asynchronous version of exists. |\n\n---\n\n\n\n## 权限控制\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `List` | `  getACL  (String path,      Stat stat)`Return the ACL and stat of the node of the given path. |\n| `void` | `  getACL  (String path,      Stat stat,      AsyncCallback.ACLCallback cb,      Object ctx)`The asynchronous version of getACL. |\n| `Stat` | `  setACL  (String path,      List acl,      int version)`Set the ACL for the node of the given path if such a node exists and the given version matches the version of the node. |\n| `void` | `  setACL  (String path,      List acl,      int version,      AsyncCallback.StatCallback cb,      Object ctx)`The asynchronous version of setACL. |\n","source":"_posts/zookeeper_java_api.md","raw":"---\ntitle:  \"Zookeeper Java API的使用\"\ndate: 2016-07-26 00:00:00\ncategories: Zookeeper\ntags: Zookeeper\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n\n## 前言\n\nZookeeper官方API文档 http://zookeeper.apache.org/doc/r3.4.6/api/index.html\n\n<!-- more -->\n\n## 通过API建立ZooKeeper Session\n\nZooKeeper构造方法官方文档摘录如下\n\n> | Constructor and Description              |\n> | ---------------------------------------- |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         boolean canBeReadOnly)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n> | `ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd,         boolean canBeReadOnly)`To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server. |\n\n\n\nDemo github地址：\n\n```java\npackage me.wangran.zookeeper.demo.api;\n\nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.Watcher.Event.KeeperState;\nimport org.apache.zookeeper.ZooKeeper;\n\n/**\n * Zookeeper 创建Session\n * @author Wang Ran\n */\npublic class ZooKeeperSessionDemo implements Watcher {\n\tprivate static CountDownLatch countDownLatch = new CountDownLatch(1);\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tdemo3();\n\t}\n\t\n\t/**\n\t * 创建最基本的会话\n\t */\n\tpublic static void demo1() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperSessionDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t}\n\t\n\t/**\n\t * 创建指定read only模式的会话\n\t */\n\tpublic static void demo2() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181/test_root\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperSessionDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tboolean canBeReadOnly = true; // 是否支持read only模式，默认为false，若一个机器和Zookeeper Cluster过半机器失去网络连接，则不处理所有读写请求。若未true，则该情况可提供读请求。\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher, canBeReadOnly);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t}\n\t\n\t/**\n\t * 恢复会话\n\t */\n\tpublic static void demo3()  throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181/test_root\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperSessionDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\tlong sessionId = zookeeper.getSessionId(); // 用于恢复会话\n\t\tbyte[] sessionPwd = zookeeper.getSessionPasswd(); // 用于恢复会话\n\t\tcountDownLatch = new CountDownLatch(1);\n\t\tzookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher, sessionId, sessionPwd);\n\t\tSystem.out.println(\"zookeeper reconnecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper reconnected, state is \" + zookeeper.getState());\n\t}\n\t\n\t@Override\n\tpublic void process(WatchedEvent watchedEvent) {\n\t\tSystem.out.println(\"ZooKeeperWatcherDemo process, watchedEvent is \" + watchedEvent);\n\t\tif(KeeperState.SyncConnected == watchedEvent.getState()) {\n\t\t\tcountDownLatch.countDown();\n\t\t}\n\t}\n}\n```\n\n---\n\n\n\n## 通过API创建节点\n\n### 说明\n\n创建节点API地址：http://zookeeper.apache.org/doc/r3.4.6/api/index.html\n\n这里，我们主要用到两个方法，分别是\n\n| 返回值      | 方法                                       |\n| -------- | ---------------------------------------- |\n| `String` | `create(String path,      byte[] data,      List acl,      CreateMode createMode)`Create a node with the given path. |\n| `void`   | `create(String path,      byte[] data,      List acl,      CreateMode createMode,      AsyncCallback.StringCallback cb,      Object ctx)`The asynchronous version of create. |\n\n\n\n* path 指定创建的节点路径\n* data 节点的内容\n* acl 创建节点策略\n\n```Java\n        /**\n         * This Id represents anyone.\n         */\n        public final Id ANYONE_ID_UNSAFE = new Id(\"world\", \"anyone\");\n\n        /**\n         * This Id is only usable to set ACLs. It will get substituted with the\n         * Id's the client authenticated with.\n         */\n        public final Id AUTH_IDS = new Id(\"auth\", \"\");\n\n        /**\n         * This is a completely open ACL .\n         */\n        public final ArrayList<ACL> OPEN_ACL_UNSAFE = new ArrayList<ACL>(\n                Collections.singletonList(new ACL(Perms.ALL, ANYONE_ID_UNSAFE)));\n\n        /**\n         * This ACL gives the creators authentication id's all permissions.\n         */\n        public final ArrayList<ACL> CREATOR_ALL_ACL = new ArrayList<ACL>(\n                Collections.singletonList(new ACL(Perms.ALL, AUTH_IDS)));\n\n        /**\n         * This ACL gives the world the ability to read.\n         */\n        public final ArrayList<ACL> READ_ACL_UNSAFE = new ArrayList<ACL>(\n                Collections\n                        .singletonList(new ACL(Perms.READ, ANYONE_ID_UNSAFE)));\n```\n\n* cb 异步回调函数，当节点创建后ZooKeeper客户端自动调用本方法。需要实现StringCallback接口，重写processResult方法\n* ctx 回调方法执行时使用的对象，通常放置上线文Context信息\n\n\n* CreateMode节点类型枚举如下\n\n```Java\n    /**\n     * The znode will not be automatically deleted upon client's disconnect\n     * 持久节点\n     */\n    PERSISTENT (0, false, false, false),\n    /**\n    * The znode will not be automatically deleted upon client's disconnect,\n    * and its name will be appended with a monotonically increasing number.\n    * 持久顺序节点\n    */\n    PERSISTENT_SEQUENTIAL (2, false, true, false),\n    /**\n     * The znode will be deleted upon the client's disconnect.\n     * 临时节点\n     */\n    EPHEMERAL (1, true, false, false),\n    /**\n     * The znode will be deleted upon the client's disconnect, and its name\n     * will be appended with a monotonically increasing number.\n     * 临时顺序节点\n     */\n    EPHEMERAL_SEQUENTIAL (3, true, true, false),\n    /**\n     * The znode will be a container node. Container\n     * nodes are special purpose nodes useful for recipes such as leader, lock,\n     * etc. When the last child of a container is deleted, the container becomes\n     * a candidate to be deleted by the server at some point in the future.\n     * Given this property, you should be prepared to get\n     * {@link org.apache.zookeeper.KeeperException.NoNodeException}\n     * when creating children inside of this container node.\n     */\n    CONTAINER (4, false, false, true);\n```\n\n### Case\n\n* case 1 根节点下创建持久节点/node_pokemon\n\n```Java\npackage me.wangran.zookeeper.demo.api;\n\nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\nimport org.apache.zookeeper.Watcher.Event.KeeperState;\nimport org.apache.zookeeper.ZooDefs.Ids;\n\n/**\n * ZooKeeper创建节点Demo\n * @author Wang Ran\n */\npublic class ZooKeeperCreateNodeDemo  implements Watcher {\n\tprivate static CountDownLatch countDownLatch = new CountDownLatch(1);\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew ZooKeeperCreateNodeDemo().demo1();\n\t}\n\t\n\t/**\n\t * 创建最基本的会话\n\t */\n\tpublic void demo1() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperCreateNodeDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\t\n\t\tString newNodePath = \"/node_pokemon\";\n\t\tbyte[] newNodeData = \"go\".getBytes();\n\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;\n\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);\n\t\tSystem.out.println(\"zookeeper node created\");\n\t}\n\t\n\t@Override\n\tpublic void process(WatchedEvent watchedEvent) {\n\t\tSystem.out.println(\"ZooKeeperWatcherDemo process, watchedEvent is \" + watchedEvent);\n\t\tif(KeeperState.SyncConnected == watchedEvent.getState()) {\n\t\t\tcountDownLatch.countDown();\n\t\t}\n\t}\n\t\n}\n```\n\n控制台输出：\n\n> zookeeper connecting, state is CONNECTING\n> ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null\n> zookeeper connected, state is CONNECTED\n> zookeeper node created\n\n\n\n* case2 创建节点后异步触发回调函数\n\n```Java\npackage me.wangran.zookeeper.demo.api;\n\nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.zookeeper.AsyncCallback;\nimport org.apache.zookeeper.AsyncCallback.StringCallback;\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\nimport org.apache.zookeeper.Watcher.Event.KeeperState;\nimport org.apache.zookeeper.ZooDefs.Ids;\n\n/**\n * ZooKeeper创建节点Demo\n * @author Wang Ran\n */\npublic class ZooKeeperCreateNodeDemo  implements Watcher {\n\tprivate static CountDownLatch countDownLatch = new CountDownLatch(1);\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew ZooKeeperCreateNodeDemo().demo2();\n\t}\n\t\n\t/**\n\t * 创建持久节点\n\t */\n\tpublic void demo1() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperCreateNodeDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\t\n\t\tString newNodePath = \"/node_pokemon\";\n\t\tbyte[] newNodeData = \"go\".getBytes();\n\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;\n\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);\n\t\tSystem.out.println(\"zookeeper node created\");\n\t}\n\t\n\t/**\n\t * 创建节点后异步回调业务函数\n\t */\n\tpublic void demo2() throws Exception {\n\t\tString zookeeperAddress = \"192.168.128.75:2181/node_pokemon\"; // Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点\n\t\tint sessionTimeout = 10000; // session超时时间，单位毫秒\n\t\tWatcher watcher = new ZooKeeperCreateNodeDemo(); // 事件通知处理器， 创建会话时可为null\n\t\tZooKeeper zookeeper = new ZooKeeper(zookeeperAddress, sessionTimeout, watcher);\n\t\tSystem.out.println(\"zookeeper connecting, state is \" + zookeeper.getState());\n\t\tcountDownLatch.await();\n\t\tSystem.out.println(\"zookeeper connected, state is \" + zookeeper.getState());\n\t\t\n\t\tString newNodePath = \"/node_kinosaki\";\n\t\tbyte[] newNodeData = \"osen\".getBytes();\n\t\tCreateMode newNodeMode = CreateMode.PERSISTENT_SEQUENTIAL;\n\t\tObject ctx = \"ContextDemo\";\n\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode, new StringCallbackDemo(), ctx);\n\t\tSystem.out.println(\"zookeeper node created\");\n\t\tThread.sleep(10);\n\t}\n\t\n\t/**\n\t * 异步回调函数\n\t * @author Wang Ran\n\t */\n\tclass StringCallbackDemo implements AsyncCallback.StringCallback {\n\t\t@Override\n\t\tpublic void processResult(int rc, String path, Object ctx, String name) {\n\t\t\tSystem.out.println(\"StringCallbackDemo.processResult executed!, resultCode is \" + rc\n\t\t\t\t\t+ \", path is\" + path // 调用接口时传入的Path\n\t\t\t\t\t+ \", context is \" + ctx.toString() // 调用接口时传入的Context\n\t\t\t\t\t+ \", node name is \" + name); // 实际在服务器中创建的节点名称\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void process(WatchedEvent watchedEvent) {\n\t\tSystem.out.println(\"ZooKeeperWatcherDemo process, watchedEvent is \" + watchedEvent);\n\t\tif(KeeperState.SyncConnected == watchedEvent.getState()) {\n\t\t\tcountDownLatch.countDown();\n\t\t}\n\t}\n}\n```\n\n控制台输出：\n\n> zookeeper connecting, state is CONNECTING\n> ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null\n> zookeeper connected, state is CONNECTED\n> zookeeper node created\n> StringCallbackDemo.processResult executed!, resultCode is 0, path is/node_kinosaki, context is ContextDemo, node name is /node_kinosaki0000000005\n\n---\n\n\n## 通过API读取节点\n\n### API说明：\n\n* ### getChildren查询指定节点的所有子节点\n\n* ### getData查询指定节点的数据内容\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `List` | `  getChildren  (String path, boolean watch)`Return the list of the children of the node of the given path. |\n| `void` | `  getChildren  (String path, boolean watch, AsyncCallback.Children2Callback cb, Object ctx)`The asynchronous version of getChildren. |\n| `void` | `  getChildren  (String path, boolean watch, AsyncCallback.ChildrenCallback cb, Object ctx)`The asynchronous version of getChildren. |\n| `List` | `  getChildren  (String path, boolean watch, Stat stat)`For the given znode path return the stat and children list. |\n| `List` | `  getChildren  (String path, Watcher watcher)`Return the list of the children of the node of the given path. |\n| `void` | `  getChildren  (String path, Watcher watcher, AsyncCallback.Children2Callback cb, Object ctx)`The asynchronous version of getChildren. |\n| `void` | `  getChildren  (String path, Watcher watcher, AsyncCallback.ChildrenCallback cb, Object ctx)`The asynchronous version of getChildren. |\n| `List` | `  getChildren  (String path, Watcher watcher, Stat stat)`For the given znode path return the stat and children list. |\n\n\n| 返回值      | 方法                                       |\n| -------- | ---------------------------------------- |\n| `void`   | `getData(String path,       boolean watch,       AsyncCallback.DataCallback cb,       Object ctx)`The asynchronous version of getData. |\n| `byte[]` | `getData(String path,       boolean watch,       Stat stat)`Return the data and the stat of the node of the given path. |\n| `void`   | `getData(String path,       Watcher watcher,       AsyncCallback.DataCallback cb,       Object ctx)`The asynchronous version of getData. |\n| `byte[]` | `getData(String path,       Watcher watcher,       Stat stat)`Return the data and the stat of the node of the given path. |\n\n* ### 参数说明\n\n| 参数      | 说明                                       |\n| ------- | ---------------------------------------- |\n| path    | 想要查询的节点路径。                               |\n| watch   | false为不需要注册watcher，true为使用默认watcher。     |\n| watcher | 可为null。指定watcher用于订阅子节点列表变化通知。当子节点被添加或删除时会向客户端发送通知（通知内容不包含节点列表，客户端需重新查询以获得节点列表信息）。 |\n| cb      | 异步回调函数                                   |\n| ctx     | 上下文对象                                    |\n| stat    | 指定数据节点的状态信息，包含cZxid（节点创建的事务id）、mZxid（节点最后一次更新的事务id）、dataLength（节点数据内容长度），传入变量的值会在方法执行过程中被服务器响应的值替换。 |\n\n\n\n## 通过API更新节点\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `Stat` | `  setData  (String path,       byte[] data,       int version)`Set the data for the node of the given path if such a node exists and the given version matches the version of the node (if the given version is -1, it matches any node's versions).说明：该方法为同步更新方法 |\n| `void` | `  setData  (String path,       byte[] data,       int version,       AsyncCallback.StatCallback cb,       Object ctx)`The asynchronous version of setData.说明：该方法为异步更新方法 |\n\n### 参数说明\n\n| 参数      | 说明         |\n| ------- | ---------- |\n| path    | 想要更新的节点路径。 |\n| data[ ] | 更新的内容      |\n| version | 指定更新的数据版本  |\n| cb      | 异步回调函数     |\n| ctx     | 上下文对象      |\n\n\n\n\n## 通过API删除节点\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `void` | `  delete  (String path,      int version)`Delete the node with the given path. |\n| `void` | `  delete  (String path,      int version,      AsyncCallback.VoidCallback cb,      Object ctx)`The asynchronous version of delete. |\n\n---\n\n\n\n## 通过API判断节点是否存在\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `Stat` | `  exists  (String path,      boolean watch)`Return the stat of the node of the given path. |\n| `void` | `  exists  (String path,      boolean watch,      AsyncCallback.StatCallback cb,      Object ctx)`The asynchronous version of exists. |\n| `Stat` | `  exists  (String path,      Watcher watcher)`Return the stat of the node of the given path. |\n| `void` | `  exists  (String path,      Watcher watcher,      AsyncCallback.StatCallback cb,      Object ctx)`The asynchronous version of exists. |\n\n---\n\n\n\n## 权限控制\n\n### API说明\n\n| 返回值    | 方法                                       |\n| ------ | ---------------------------------------- |\n| `List` | `  getACL  (String path,      Stat stat)`Return the ACL and stat of the node of the given path. |\n| `void` | `  getACL  (String path,      Stat stat,      AsyncCallback.ACLCallback cb,      Object ctx)`The asynchronous version of getACL. |\n| `Stat` | `  setACL  (String path,      List acl,      int version)`Set the ACL for the node of the given path if such a node exists and the given version matches the version of the node. |\n| `void` | `  setACL  (String path,      List acl,      int version,      AsyncCallback.StatCallback cb,      Object ctx)`The asynchronous version of setACL. |\n","slug":"zookeeper_java_api","published":1,"updated":"2019-06-05T13:59:40.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwjetpsp000w4ezr3vyuqf0t","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Zookeeper官方API文档 <a href=\"http://zookeeper.apache.org/doc/r3.4.6/api/index.html\" target=\"_blank\" rel=\"noopener\">http://zookeeper.apache.org/doc/r3.4.6/api/index.html</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"通过API建立ZooKeeper-Session\"><a href=\"#通过API建立ZooKeeper-Session\" class=\"headerlink\" title=\"通过API建立ZooKeeper Session\"></a>通过API建立ZooKeeper Session</h2><p>ZooKeeper构造方法官方文档摘录如下</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>Constructor and Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n<tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         boolean canBeReadOnly)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n<tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n<tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd,         boolean canBeReadOnly)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n</tbody></table>\n</blockquote>\n<p>Demo github地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Zookeeper 创建Session</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperSessionDemo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tdemo3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建最基本的会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperSessionDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建指定read only模式的会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181/test_root\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperSessionDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> canBeReadOnly = <span class=\"keyword\">true</span>; <span class=\"comment\">// 是否支持read only模式，默认为false，若一个机器和Zookeeper Cluster过半机器失去网络连接，则不处理所有读写请求。若未true，则该情况可提供读请求。</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher, canBeReadOnly);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 恢复会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181/test_root\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperSessionDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> sessionId = zookeeper.getSessionId(); <span class=\"comment\">// 用于恢复会话</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] sessionPwd = zookeeper.getSessionPasswd(); <span class=\"comment\">// 用于恢复会话</span></span><br><span class=\"line\">\t\tcountDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tzookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher, sessionId, sessionPwd);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper reconnecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper reconnected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeperWatcherDemo process, watchedEvent is \"</span> + watchedEvent);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(KeeperState.SyncConnected == watchedEvent.getState()) &#123;</span><br><span class=\"line\">\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"通过API创建节点\"><a href=\"#通过API创建节点\" class=\"headerlink\" title=\"通过API创建节点\"></a>通过API创建节点</h2><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>创建节点API地址：<a href=\"http://zookeeper.apache.org/doc/r3.4.6/api/index.html\" target=\"_blank\" rel=\"noopener\">http://zookeeper.apache.org/doc/r3.4.6/api/index.html</a></p>\n<p>这里，我们主要用到两个方法，分别是</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>String</code></td>\n<td><code>create(String path,      byte[] data,      List acl,      CreateMode createMode)</code>Create a node with the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>create(String path,      byte[] data,      List acl,      CreateMode createMode,      AsyncCallback.StringCallback cb,      Object ctx)</code>The asynchronous version of create.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>path 指定创建的节点路径</li>\n<li>data 节点的内容</li>\n<li>acl 创建节点策略</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This Id represents anyone.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Id ANYONE_ID_UNSAFE = <span class=\"keyword\">new</span> Id(<span class=\"string\">\"world\"</span>, <span class=\"string\">\"anyone\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This Id is only usable to set ACLs. It will get substituted with the</span></span><br><span class=\"line\"><span class=\"comment\"> * Id's the client authenticated with.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Id AUTH_IDS = <span class=\"keyword\">new</span> Id(<span class=\"string\">\"auth\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is a completely open ACL .</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ArrayList&lt;ACL&gt; OPEN_ACL_UNSAFE = <span class=\"keyword\">new</span> ArrayList&lt;ACL&gt;(</span><br><span class=\"line\">        Collections.singletonList(<span class=\"keyword\">new</span> ACL(Perms.ALL, ANYONE_ID_UNSAFE)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This ACL gives the creators authentication id's all permissions.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ArrayList&lt;ACL&gt; CREATOR_ALL_ACL = <span class=\"keyword\">new</span> ArrayList&lt;ACL&gt;(</span><br><span class=\"line\">        Collections.singletonList(<span class=\"keyword\">new</span> ACL(Perms.ALL, AUTH_IDS)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This ACL gives the world the ability to read.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ArrayList&lt;ACL&gt; READ_ACL_UNSAFE = <span class=\"keyword\">new</span> ArrayList&lt;ACL&gt;(</span><br><span class=\"line\">        Collections</span><br><span class=\"line\">                .singletonList(<span class=\"keyword\">new</span> ACL(Perms.READ, ANYONE_ID_UNSAFE)));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cb 异步回调函数，当节点创建后ZooKeeper客户端自动调用本方法。需要实现StringCallback接口，重写processResult方法</li>\n<li>ctx 回调方法执行时使用的对象，通常放置上线文Context信息</li>\n</ul>\n<ul>\n<li>CreateMode节点类型枚举如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will not be automatically deleted upon client's disconnect</span></span><br><span class=\"line\"><span class=\"comment\"> * 持久节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">PERSISTENT (<span class=\"number\">0</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The znode will not be automatically deleted upon client's disconnect,</span></span><br><span class=\"line\"><span class=\"comment\">* and its name will be appended with a monotonically increasing number.</span></span><br><span class=\"line\"><span class=\"comment\">* 持久顺序节点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">PERSISTENT_SEQUENTIAL (<span class=\"number\">2</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will be deleted upon the client's disconnect.</span></span><br><span class=\"line\"><span class=\"comment\"> * 临时节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">EPHEMERAL (<span class=\"number\">1</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will be deleted upon the client's disconnect, and its name</span></span><br><span class=\"line\"><span class=\"comment\"> * will be appended with a monotonically increasing number.</span></span><br><span class=\"line\"><span class=\"comment\"> * 临时顺序节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">EPHEMERAL_SEQUENTIAL (<span class=\"number\">3</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will be a container node. Container</span></span><br><span class=\"line\"><span class=\"comment\"> * nodes are special purpose nodes useful for recipes such as leader, lock,</span></span><br><span class=\"line\"><span class=\"comment\"> * etc. When the last child of a container is deleted, the container becomes</span></span><br><span class=\"line\"><span class=\"comment\"> * a candidate to be deleted by the server at some point in the future.</span></span><br><span class=\"line\"><span class=\"comment\"> * Given this property, you should be prepared to get</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> org.apache.zookeeper.KeeperException.NoNodeException&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * when creating children inside of this container node.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CONTAINER (<span class=\"number\">4</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case\"><a href=\"#Case\" class=\"headerlink\" title=\"Case\"></a>Case</h3><ul>\n<li>case 1 根节点下创建持久节点/node_pokemon</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ZooKeeper创建节点Demo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperCreateNodeDemo</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo().demo1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建最基本的会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString newNodePath = <span class=\"string\">\"/node_pokemon\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] newNodeData = <span class=\"string\">\"go\"</span>.getBytes();</span><br><span class=\"line\">\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;</span><br><span class=\"line\">\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper node created\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeperWatcherDemo process, watchedEvent is \"</span> + watchedEvent);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(KeeperState.SyncConnected == watchedEvent.getState()) &#123;</span><br><span class=\"line\">\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<blockquote>\n<p>zookeeper connecting, state is CONNECTING<br>ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null<br>zookeeper connected, state is CONNECTED<br>zookeeper node created</p>\n</blockquote>\n<ul>\n<li>case2 创建节点后异步触发回调函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.AsyncCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.AsyncCallback.StringCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ZooKeeper创建节点Demo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperCreateNodeDemo</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo().demo2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建持久节点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString newNodePath = <span class=\"string\">\"/node_pokemon\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] newNodeData = <span class=\"string\">\"go\"</span>.getBytes();</span><br><span class=\"line\">\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;</span><br><span class=\"line\">\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper node created\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建节点后异步回调业务函数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181/node_pokemon\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString newNodePath = <span class=\"string\">\"/node_kinosaki\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] newNodeData = <span class=\"string\">\"osen\"</span>.getBytes();</span><br><span class=\"line\">\t\tCreateMode newNodeMode = CreateMode.PERSISTENT_SEQUENTIAL;</span><br><span class=\"line\">\t\tObject ctx = <span class=\"string\">\"ContextDemo\"</span>;</span><br><span class=\"line\">\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode, <span class=\"keyword\">new</span> StringCallbackDemo(), ctx);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper node created\"</span>);</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 异步回调函数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringCallbackDemo</span> <span class=\"keyword\">implements</span> <span class=\"title\">AsyncCallback</span>.<span class=\"title\">StringCallback</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processResult</span><span class=\"params\">(<span class=\"keyword\">int</span> rc, String path, Object ctx, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"StringCallbackDemo.processResult executed!, resultCode is \"</span> + rc</span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">\", path is\"</span> + path <span class=\"comment\">// 调用接口时传入的Path</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">\", context is \"</span> + ctx.toString() <span class=\"comment\">// 调用接口时传入的Context</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">\", node name is \"</span> + name); <span class=\"comment\">// 实际在服务器中创建的节点名称</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeperWatcherDemo process, watchedEvent is \"</span> + watchedEvent);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(KeeperState.SyncConnected == watchedEvent.getState()) &#123;</span><br><span class=\"line\">\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<blockquote>\n<p>zookeeper connecting, state is CONNECTING<br>ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null<br>zookeeper connected, state is CONNECTED<br>zookeeper node created<br>StringCallbackDemo.processResult executed!, resultCode is 0, path is/node_kinosaki, context is ContextDemo, node name is /node_kinosaki0000000005</p>\n</blockquote>\n<hr>\n<h2 id=\"通过API读取节点\"><a href=\"#通过API读取节点\" class=\"headerlink\" title=\"通过API读取节点\"></a>通过API读取节点</h2><h3 id=\"API说明：\"><a href=\"#API说明：\" class=\"headerlink\" title=\"API说明：\"></a>API说明：</h3><ul>\n<li><h3 id=\"getChildren查询指定节点的所有子节点\"><a href=\"#getChildren查询指定节点的所有子节点\" class=\"headerlink\" title=\"getChildren查询指定节点的所有子节点\"></a>getChildren查询指定节点的所有子节点</h3></li>\n<li><h3 id=\"getData查询指定节点的数据内容\"><a href=\"#getData查询指定节点的数据内容\" class=\"headerlink\" title=\"getData查询指定节点的数据内容\"></a>getData查询指定节点的数据内容</h3></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, boolean watch)</code>Return the list of the children of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, boolean watch, AsyncCallback.Children2Callback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, boolean watch, AsyncCallback.ChildrenCallback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, boolean watch, Stat stat)</code>For the given znode path return the stat and children list.</td>\n</tr>\n<tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, Watcher watcher)</code>Return the list of the children of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, Watcher watcher, AsyncCallback.Children2Callback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, Watcher watcher, AsyncCallback.ChildrenCallback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, Watcher watcher, Stat stat)</code>For the given znode path return the stat and children list.</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void</code></td>\n<td><code>getData(String path,       boolean watch,       AsyncCallback.DataCallback cb,       Object ctx)</code>The asynchronous version of getData.</td>\n</tr>\n<tr>\n<td><code>byte[]</code></td>\n<td><code>getData(String path,       boolean watch,       Stat stat)</code>Return the data and the stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getData(String path,       Watcher watcher,       AsyncCallback.DataCallback cb,       Object ctx)</code>The asynchronous version of getData.</td>\n</tr>\n<tr>\n<td><code>byte[]</code></td>\n<td><code>getData(String path,       Watcher watcher,       Stat stat)</code>Return the data and the stat of the node of the given path.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>path</td>\n<td>想要查询的节点路径。</td>\n</tr>\n<tr>\n<td>watch</td>\n<td>false为不需要注册watcher，true为使用默认watcher。</td>\n</tr>\n<tr>\n<td>watcher</td>\n<td>可为null。指定watcher用于订阅子节点列表变化通知。当子节点被添加或删除时会向客户端发送通知（通知内容不包含节点列表，客户端需重新查询以获得节点列表信息）。</td>\n</tr>\n<tr>\n<td>cb</td>\n<td>异步回调函数</td>\n</tr>\n<tr>\n<td>ctx</td>\n<td>上下文对象</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>指定数据节点的状态信息，包含cZxid（节点创建的事务id）、mZxid（节点最后一次更新的事务id）、dataLength（节点数据内容长度），传入变量的值会在方法执行过程中被服务器响应的值替换。</td>\n</tr>\n</tbody></table>\n<h2 id=\"通过API更新节点\"><a href=\"#通过API更新节点\" class=\"headerlink\" title=\"通过API更新节点\"></a>通过API更新节点</h2><h3 id=\"API说明\"><a href=\"#API说明\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Stat</code></td>\n<td><code>setData  (String path,       byte[] data,       int version)</code>Set the data for the node of the given path if such a node exists and the given version matches the version of the node (if the given version is -1, it matches any node’s versions).说明：该方法为同步更新方法</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>setData  (String path,       byte[] data,       int version,       AsyncCallback.StatCallback cb,       Object ctx)</code>The asynchronous version of setData.说明：该方法为异步更新方法</td>\n</tr>\n</tbody></table>\n<h3 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>path</td>\n<td>想要更新的节点路径。</td>\n</tr>\n<tr>\n<td>data[ ]</td>\n<td>更新的内容</td>\n</tr>\n<tr>\n<td>version</td>\n<td>指定更新的数据版本</td>\n</tr>\n<tr>\n<td>cb</td>\n<td>异步回调函数</td>\n</tr>\n<tr>\n<td>ctx</td>\n<td>上下文对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"通过API删除节点\"><a href=\"#通过API删除节点\" class=\"headerlink\" title=\"通过API删除节点\"></a>通过API删除节点</h2><h3 id=\"API说明-1\"><a href=\"#API说明-1\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void</code></td>\n<td><code>delete  (String path,      int version)</code>Delete the node with the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>delete  (String path,      int version,      AsyncCallback.VoidCallback cb,      Object ctx)</code>The asynchronous version of delete.</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"通过API判断节点是否存在\"><a href=\"#通过API判断节点是否存在\" class=\"headerlink\" title=\"通过API判断节点是否存在\"></a>通过API判断节点是否存在</h2><h3 id=\"API说明-2\"><a href=\"#API说明-2\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Stat</code></td>\n<td><code>exists  (String path,      boolean watch)</code>Return the stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>exists  (String path,      boolean watch,      AsyncCallback.StatCallback cb,      Object ctx)</code>The asynchronous version of exists.</td>\n</tr>\n<tr>\n<td><code>Stat</code></td>\n<td><code>exists  (String path,      Watcher watcher)</code>Return the stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>exists  (String path,      Watcher watcher,      AsyncCallback.StatCallback cb,      Object ctx)</code>The asynchronous version of exists.</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h2><h3 id=\"API说明-3\"><a href=\"#API说明-3\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>List</code></td>\n<td><code>getACL  (String path,      Stat stat)</code>Return the ACL and stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getACL  (String path,      Stat stat,      AsyncCallback.ACLCallback cb,      Object ctx)</code>The asynchronous version of getACL.</td>\n</tr>\n<tr>\n<td><code>Stat</code></td>\n<td><code>setACL  (String path,      List acl,      int version)</code>Set the ACL for the node of the given path if such a node exists and the given version matches the version of the node.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>setACL  (String path,      List acl,      int version,      AsyncCallback.StatCallback cb,      Object ctx)</code>The asynchronous version of setACL.</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Zookeeper官方API文档 <a href=\"http://zookeeper.apache.org/doc/r3.4.6/api/index.html\" target=\"_blank\" rel=\"noopener\">http://zookeeper.apache.org/doc/r3.4.6/api/index.html</a></p>","more":"<h2 id=\"通过API建立ZooKeeper-Session\"><a href=\"#通过API建立ZooKeeper-Session\" class=\"headerlink\" title=\"通过API建立ZooKeeper Session\"></a>通过API建立ZooKeeper Session</h2><p>ZooKeeper构造方法官方文档摘录如下</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>Constructor and Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n<tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         boolean canBeReadOnly)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n<tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n<tr>\n<td><code>ZooKeeper(String connectString,         int sessionTimeout,         Watcher watcher,         long sessionId,         byte[] sessionPasswd,         boolean canBeReadOnly)</code>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td>\n</tr>\n</tbody></table>\n</blockquote>\n<p>Demo github地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Zookeeper 创建Session</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperSessionDemo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tdemo3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建最基本的会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperSessionDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建指定read only模式的会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181/test_root\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperSessionDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> canBeReadOnly = <span class=\"keyword\">true</span>; <span class=\"comment\">// 是否支持read only模式，默认为false，若一个机器和Zookeeper Cluster过半机器失去网络连接，则不处理所有读写请求。若未true，则该情况可提供读请求。</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher, canBeReadOnly);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 恢复会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181/test_root\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperSessionDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> sessionId = zookeeper.getSessionId(); <span class=\"comment\">// 用于恢复会话</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] sessionPwd = zookeeper.getSessionPasswd(); <span class=\"comment\">// 用于恢复会话</span></span><br><span class=\"line\">\t\tcountDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tzookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher, sessionId, sessionPwd);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper reconnecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper reconnected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeperWatcherDemo process, watchedEvent is \"</span> + watchedEvent);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(KeeperState.SyncConnected == watchedEvent.getState()) &#123;</span><br><span class=\"line\">\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"通过API创建节点\"><a href=\"#通过API创建节点\" class=\"headerlink\" title=\"通过API创建节点\"></a>通过API创建节点</h2><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>创建节点API地址：<a href=\"http://zookeeper.apache.org/doc/r3.4.6/api/index.html\" target=\"_blank\" rel=\"noopener\">http://zookeeper.apache.org/doc/r3.4.6/api/index.html</a></p>\n<p>这里，我们主要用到两个方法，分别是</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>String</code></td>\n<td><code>create(String path,      byte[] data,      List acl,      CreateMode createMode)</code>Create a node with the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>create(String path,      byte[] data,      List acl,      CreateMode createMode,      AsyncCallback.StringCallback cb,      Object ctx)</code>The asynchronous version of create.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>path 指定创建的节点路径</li>\n<li>data 节点的内容</li>\n<li>acl 创建节点策略</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This Id represents anyone.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Id ANYONE_ID_UNSAFE = <span class=\"keyword\">new</span> Id(<span class=\"string\">\"world\"</span>, <span class=\"string\">\"anyone\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This Id is only usable to set ACLs. It will get substituted with the</span></span><br><span class=\"line\"><span class=\"comment\"> * Id's the client authenticated with.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Id AUTH_IDS = <span class=\"keyword\">new</span> Id(<span class=\"string\">\"auth\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is a completely open ACL .</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ArrayList&lt;ACL&gt; OPEN_ACL_UNSAFE = <span class=\"keyword\">new</span> ArrayList&lt;ACL&gt;(</span><br><span class=\"line\">        Collections.singletonList(<span class=\"keyword\">new</span> ACL(Perms.ALL, ANYONE_ID_UNSAFE)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This ACL gives the creators authentication id's all permissions.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ArrayList&lt;ACL&gt; CREATOR_ALL_ACL = <span class=\"keyword\">new</span> ArrayList&lt;ACL&gt;(</span><br><span class=\"line\">        Collections.singletonList(<span class=\"keyword\">new</span> ACL(Perms.ALL, AUTH_IDS)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This ACL gives the world the ability to read.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ArrayList&lt;ACL&gt; READ_ACL_UNSAFE = <span class=\"keyword\">new</span> ArrayList&lt;ACL&gt;(</span><br><span class=\"line\">        Collections</span><br><span class=\"line\">                .singletonList(<span class=\"keyword\">new</span> ACL(Perms.READ, ANYONE_ID_UNSAFE)));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cb 异步回调函数，当节点创建后ZooKeeper客户端自动调用本方法。需要实现StringCallback接口，重写processResult方法</li>\n<li>ctx 回调方法执行时使用的对象，通常放置上线文Context信息</li>\n</ul>\n<ul>\n<li>CreateMode节点类型枚举如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will not be automatically deleted upon client's disconnect</span></span><br><span class=\"line\"><span class=\"comment\"> * 持久节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">PERSISTENT (<span class=\"number\">0</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The znode will not be automatically deleted upon client's disconnect,</span></span><br><span class=\"line\"><span class=\"comment\">* and its name will be appended with a monotonically increasing number.</span></span><br><span class=\"line\"><span class=\"comment\">* 持久顺序节点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">PERSISTENT_SEQUENTIAL (<span class=\"number\">2</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will be deleted upon the client's disconnect.</span></span><br><span class=\"line\"><span class=\"comment\"> * 临时节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">EPHEMERAL (<span class=\"number\">1</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will be deleted upon the client's disconnect, and its name</span></span><br><span class=\"line\"><span class=\"comment\"> * will be appended with a monotonically increasing number.</span></span><br><span class=\"line\"><span class=\"comment\"> * 临时顺序节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">EPHEMERAL_SEQUENTIAL (<span class=\"number\">3</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>),</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The znode will be a container node. Container</span></span><br><span class=\"line\"><span class=\"comment\"> * nodes are special purpose nodes useful for recipes such as leader, lock,</span></span><br><span class=\"line\"><span class=\"comment\"> * etc. When the last child of a container is deleted, the container becomes</span></span><br><span class=\"line\"><span class=\"comment\"> * a candidate to be deleted by the server at some point in the future.</span></span><br><span class=\"line\"><span class=\"comment\"> * Given this property, you should be prepared to get</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> org.apache.zookeeper.KeeperException.NoNodeException&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * when creating children inside of this container node.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">CONTAINER (<span class=\"number\">4</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case\"><a href=\"#Case\" class=\"headerlink\" title=\"Case\"></a>Case</h3><ul>\n<li>case 1 根节点下创建持久节点/node_pokemon</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ZooKeeper创建节点Demo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperCreateNodeDemo</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo().demo1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建最基本的会话</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString newNodePath = <span class=\"string\">\"/node_pokemon\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] newNodeData = <span class=\"string\">\"go\"</span>.getBytes();</span><br><span class=\"line\">\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;</span><br><span class=\"line\">\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper node created\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeperWatcherDemo process, watchedEvent is \"</span> + watchedEvent);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(KeeperState.SyncConnected == watchedEvent.getState()) &#123;</span><br><span class=\"line\">\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<blockquote>\n<p>zookeeper connecting, state is CONNECTING<br>ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null<br>zookeeper connected, state is CONNECTED<br>zookeeper node created</p>\n</blockquote>\n<ul>\n<li>case2 创建节点后异步触发回调函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.wangran.zookeeper.demo.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.AsyncCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.AsyncCallback.StringCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ZooKeeper创建节点Demo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperCreateNodeDemo</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo().demo2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建持久节点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString newNodePath = <span class=\"string\">\"/node_pokemon\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] newNodeData = <span class=\"string\">\"go\"</span>.getBytes();</span><br><span class=\"line\">\t\tCreateMode newNodeMode = CreateMode.PERSISTENT;</span><br><span class=\"line\">\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper node created\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建节点后异步回调业务函数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tString zookeeperAddress = <span class=\"string\">\"192.168.128.75:2181/node_pokemon\"</span>; <span class=\"comment\">// Zookeeper地址，多个Zookeeper地址可以英文逗号分隔，地址可指定节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">10000</span>; <span class=\"comment\">// session超时时间，单位毫秒</span></span><br><span class=\"line\">\t\tWatcher watcher = <span class=\"keyword\">new</span> ZooKeeperCreateNodeDemo(); <span class=\"comment\">// 事件通知处理器， 创建会话时可为null</span></span><br><span class=\"line\">\t\tZooKeeper zookeeper = <span class=\"keyword\">new</span> ZooKeeper(zookeeperAddress, sessionTimeout, watcher);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connecting, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper connected, state is \"</span> + zookeeper.getState());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString newNodePath = <span class=\"string\">\"/node_kinosaki\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] newNodeData = <span class=\"string\">\"osen\"</span>.getBytes();</span><br><span class=\"line\">\t\tCreateMode newNodeMode = CreateMode.PERSISTENT_SEQUENTIAL;</span><br><span class=\"line\">\t\tObject ctx = <span class=\"string\">\"ContextDemo\"</span>;</span><br><span class=\"line\">\t\tzookeeper.create(newNodePath, newNodeData, Ids.OPEN_ACL_UNSAFE, newNodeMode, <span class=\"keyword\">new</span> StringCallbackDemo(), ctx);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zookeeper node created\"</span>);</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 异步回调函数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> Wang Ran</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringCallbackDemo</span> <span class=\"keyword\">implements</span> <span class=\"title\">AsyncCallback</span>.<span class=\"title\">StringCallback</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processResult</span><span class=\"params\">(<span class=\"keyword\">int</span> rc, String path, Object ctx, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"StringCallbackDemo.processResult executed!, resultCode is \"</span> + rc</span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">\", path is\"</span> + path <span class=\"comment\">// 调用接口时传入的Path</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">\", context is \"</span> + ctx.toString() <span class=\"comment\">// 调用接口时传入的Context</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">\", node name is \"</span> + name); <span class=\"comment\">// 实际在服务器中创建的节点名称</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ZooKeeperWatcherDemo process, watchedEvent is \"</span> + watchedEvent);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(KeeperState.SyncConnected == watchedEvent.getState()) &#123;</span><br><span class=\"line\">\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<blockquote>\n<p>zookeeper connecting, state is CONNECTING<br>ZooKeeperWatcherDemo process, watchedEvent is WatchedEvent state:SyncConnected type:None path:null<br>zookeeper connected, state is CONNECTED<br>zookeeper node created<br>StringCallbackDemo.processResult executed!, resultCode is 0, path is/node_kinosaki, context is ContextDemo, node name is /node_kinosaki0000000005</p>\n</blockquote>\n<hr>\n<h2 id=\"通过API读取节点\"><a href=\"#通过API读取节点\" class=\"headerlink\" title=\"通过API读取节点\"></a>通过API读取节点</h2><h3 id=\"API说明：\"><a href=\"#API说明：\" class=\"headerlink\" title=\"API说明：\"></a>API说明：</h3><ul>\n<li><h3 id=\"getChildren查询指定节点的所有子节点\"><a href=\"#getChildren查询指定节点的所有子节点\" class=\"headerlink\" title=\"getChildren查询指定节点的所有子节点\"></a>getChildren查询指定节点的所有子节点</h3></li>\n<li><h3 id=\"getData查询指定节点的数据内容\"><a href=\"#getData查询指定节点的数据内容\" class=\"headerlink\" title=\"getData查询指定节点的数据内容\"></a>getData查询指定节点的数据内容</h3></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, boolean watch)</code>Return the list of the children of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, boolean watch, AsyncCallback.Children2Callback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, boolean watch, AsyncCallback.ChildrenCallback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, boolean watch, Stat stat)</code>For the given znode path return the stat and children list.</td>\n</tr>\n<tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, Watcher watcher)</code>Return the list of the children of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, Watcher watcher, AsyncCallback.Children2Callback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getChildren  (String path, Watcher watcher, AsyncCallback.ChildrenCallback cb, Object ctx)</code>The asynchronous version of getChildren.</td>\n</tr>\n<tr>\n<td><code>List</code></td>\n<td><code>getChildren  (String path, Watcher watcher, Stat stat)</code>For the given znode path return the stat and children list.</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void</code></td>\n<td><code>getData(String path,       boolean watch,       AsyncCallback.DataCallback cb,       Object ctx)</code>The asynchronous version of getData.</td>\n</tr>\n<tr>\n<td><code>byte[]</code></td>\n<td><code>getData(String path,       boolean watch,       Stat stat)</code>Return the data and the stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getData(String path,       Watcher watcher,       AsyncCallback.DataCallback cb,       Object ctx)</code>The asynchronous version of getData.</td>\n</tr>\n<tr>\n<td><code>byte[]</code></td>\n<td><code>getData(String path,       Watcher watcher,       Stat stat)</code>Return the data and the stat of the node of the given path.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>path</td>\n<td>想要查询的节点路径。</td>\n</tr>\n<tr>\n<td>watch</td>\n<td>false为不需要注册watcher，true为使用默认watcher。</td>\n</tr>\n<tr>\n<td>watcher</td>\n<td>可为null。指定watcher用于订阅子节点列表变化通知。当子节点被添加或删除时会向客户端发送通知（通知内容不包含节点列表，客户端需重新查询以获得节点列表信息）。</td>\n</tr>\n<tr>\n<td>cb</td>\n<td>异步回调函数</td>\n</tr>\n<tr>\n<td>ctx</td>\n<td>上下文对象</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>指定数据节点的状态信息，包含cZxid（节点创建的事务id）、mZxid（节点最后一次更新的事务id）、dataLength（节点数据内容长度），传入变量的值会在方法执行过程中被服务器响应的值替换。</td>\n</tr>\n</tbody></table>\n<h2 id=\"通过API更新节点\"><a href=\"#通过API更新节点\" class=\"headerlink\" title=\"通过API更新节点\"></a>通过API更新节点</h2><h3 id=\"API说明\"><a href=\"#API说明\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Stat</code></td>\n<td><code>setData  (String path,       byte[] data,       int version)</code>Set the data for the node of the given path if such a node exists and the given version matches the version of the node (if the given version is -1, it matches any node’s versions).说明：该方法为同步更新方法</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>setData  (String path,       byte[] data,       int version,       AsyncCallback.StatCallback cb,       Object ctx)</code>The asynchronous version of setData.说明：该方法为异步更新方法</td>\n</tr>\n</tbody></table>\n<h3 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>path</td>\n<td>想要更新的节点路径。</td>\n</tr>\n<tr>\n<td>data[ ]</td>\n<td>更新的内容</td>\n</tr>\n<tr>\n<td>version</td>\n<td>指定更新的数据版本</td>\n</tr>\n<tr>\n<td>cb</td>\n<td>异步回调函数</td>\n</tr>\n<tr>\n<td>ctx</td>\n<td>上下文对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"通过API删除节点\"><a href=\"#通过API删除节点\" class=\"headerlink\" title=\"通过API删除节点\"></a>通过API删除节点</h2><h3 id=\"API说明-1\"><a href=\"#API说明-1\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>void</code></td>\n<td><code>delete  (String path,      int version)</code>Delete the node with the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>delete  (String path,      int version,      AsyncCallback.VoidCallback cb,      Object ctx)</code>The asynchronous version of delete.</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"通过API判断节点是否存在\"><a href=\"#通过API判断节点是否存在\" class=\"headerlink\" title=\"通过API判断节点是否存在\"></a>通过API判断节点是否存在</h2><h3 id=\"API说明-2\"><a href=\"#API说明-2\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Stat</code></td>\n<td><code>exists  (String path,      boolean watch)</code>Return the stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>exists  (String path,      boolean watch,      AsyncCallback.StatCallback cb,      Object ctx)</code>The asynchronous version of exists.</td>\n</tr>\n<tr>\n<td><code>Stat</code></td>\n<td><code>exists  (String path,      Watcher watcher)</code>Return the stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>exists  (String path,      Watcher watcher,      AsyncCallback.StatCallback cb,      Object ctx)</code>The asynchronous version of exists.</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h2><h3 id=\"API说明-3\"><a href=\"#API说明-3\" class=\"headerlink\" title=\"API说明\"></a>API说明</h3><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>List</code></td>\n<td><code>getACL  (String path,      Stat stat)</code>Return the ACL and stat of the node of the given path.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>getACL  (String path,      Stat stat,      AsyncCallback.ACLCallback cb,      Object ctx)</code>The asynchronous version of getACL.</td>\n</tr>\n<tr>\n<td><code>Stat</code></td>\n<td><code>setACL  (String path,      List acl,      int version)</code>Set the ACL for the node of the given path if such a node exists and the given version matches the version of the node.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>setACL  (String path,      List acl,      int version,      AsyncCallback.StatCallback cb,      Object ctx)</code>The asynchronous version of setACL.</td>\n</tr>\n</tbody></table>"},{"title":"Spring Cloud Finchley 在业务系统中的实践总结 - Zuul的实践与增强","date":"2018-10-19T07:38:00.000Z","toc":{"on":true,"max_depth":3,"nowrap":false,"list_number":true},"toc_list_number":true,"_content":"## 前言\n　　本文主要针对Zuul在实际业务场景中的一些实践心得进行总结，重点围绕Zuul本身关于动态配置缺陷问题、老项目接入及老环境上线问题等方面进行讨论。关于Zuul的一些基本用法，可直接参考[Spring Cloud官方文档\n](http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html)与[Zuul Github](https://github.com/Netflix/zuul)。\n　　我们使用的Zuul基于Spring官方目前最新版本Spring Cloud Finchley.SR1。\n\n---\n\n<!-- more -->\n## Zuul是什么\n　　Zuul可以用两个单词总结，即路由和过滤器（Router and Filter），它是Netflix开源，并被Spring所集成，成为当前Spring Cloud最核心的组件之一。它的基本功能可概括如下：\n\n* 认证鉴权（Authentication）\n* 审查（Insights）\n* 压力测试（Stress Testing）\n* 金丝雀测试（Canary Testing）\n* 动态路由（Dynamic Routing）\n* 服务迁移（Service Migration）\n* 负载剪裁（Load Shedding）\n* 安全（Security）\n* 静态应答处理（Static Response handling）\n* Active/Active traffic management\n\n---\n\n## 为什么要使用它\n　　路由是微服务的架构体系当中必不可少的一部分，那么缺少它会带来什么问题呢？这里以公司某业务线实际场景为例：\n![Spring Cloud Zuul 01](/images/15397653100461/Spring%20Cloud%20Zuul%2001.jpg)\n　　上图是是一个简单的前后端交互架构，来自PC/微信/H5/IOS/Android等客户端将请求发送至Nginx，后由Nginx反向代理到指定后端服务集群中。我们能够很方便的为后端服务集群提供负载均衡，同时通过Nginx的反向代理，可以隐藏后端真实IP，即提供了一定程度的安全保障，也使得前后端服务调用隔离，降低开发成本。\n　　随着业务规模的不断扩大，后端微服务已从数个服务集群扩展到了数十个，此时Nginx为每一个服务集群都配置了唯一的域名用于反向代理，每当这些服务集群需要扩容或机器迁移时，需要运维投入大量的精力去手动修改配置。此外，这些数十个域名也造成了资源的极度浪费。\n　　\n　　![](/images/15397653100461/15398454116261.jpg)\n    \n\n\n　　在近些年火热的微服务浪潮下，我们都热衷于将每一个原子业务单元都拆分成微服务，这对运维来说造成了很多压力，就好像上图中，当你面相这种规模的服务集群时，传统的维护手段已接近于灾难，必须要想办法借助更多的工具来帮助我们。\n　　相比Nginx，我们可以将Zuul理解为微服务集群的一个可靠的大管家，它是上述问题的解决方案之一。使用它，可以方便的用一个域名来替换掉之前的数十个域名，此外，当服务集群扩容或迁移时，Zull可以做到自动识别，即动态路由，它还具有服务鉴权、服务降级、熔断、分流控制、接口控制等Nginx所不具备的重要功能。\n\n---\n\n## 问题与挑战\n　　Spring Cloud Finchley版本基于Spring Boot2.0构建，按照约定大于配置的思想，我们能够很轻易的上手使用这些开源框架。但是任何开源框架放到实际应用场景中，都不可能百分百的切合我们的实际需求，例如\n\n### 当前Spring Cloud Zuul最新版本不支持路由的动态配置\n　　虽然Zuul能够做到动态路由，但是反向代理的配置信息是需要在application.yml配置文件中维护的，这意味着每一次有新的服务集群需要进行反向代理时，我们需要像重启Nginx一样来重启Zuul，重启意味着增加了上线的风险与成本。\n\n### 非Spring Boot项目接入问题\n　　对于任何一个Spring Boot项目来说，可以非常简单方便的与Spring Cloud Zuul整合，但是官方并未提供一些工具来支持一些老项目的接入，目前实际业务线大部分服务均是非Spring Boot的老服务，我们需要自己来实现这些通用的工具组件。\n\n### 老环境上线迁移问题\n　　长期以来前端业务线一直采用的是Request-Nginx-Server架构。基于前文介绍，我们的Request端分散在各大手机应用市场、微信等合作渠道，对于这些已经集成了数十个不同服务域名的前端来说，接入Zuul会有一系列的问题需要解决：\n\n* App端每次更新都要重新发版，时效性差\n* App端接入Zuul后若出现问题，无法及时回滚\n* 旧版本App无法修改接入Zuul\n\n### 上线验证问题\n* 测试与线上环境不一致，上线存在未知的风险\n* 我们的业务模式，无法在线上环境进行全流程测试\n\n　　基于业务模式，系统中有大量节点需要对接第三方机构，无法进行全流程测试，同时，当前我们的测试环境无法做到与线上环境完全一致，对于Zuul的接入来说是一个非常大的挑战。\n\n---\n\n## Zuul的核心架构\n　　Zuul的核心其实很简单，就是Filter，如下图所示：\n![](/images/15397653100461/15397741541838.png)\n\n可以看到，Zuul将过滤器大致分为4类，Pre、Routing、Post/Error\n\n![](/images/15397653100461/15398306875833.jpg)\n\n\n* pre： 这种过滤器在请求被路由之前调用，安全与鉴权功能可在此实现。\n* routing：通过HttpClient/Ribbon将请求路由到后端服务。\n* post：路由后执行，可以接收到后端服务的响应信息，并转发给请求端。\n* error：在其他阶段发生错误时执行该过滤器。\n\n#### Spring Zuul提供的默认过滤器\n\n![](/images/15397653100461/15399408807599.jpg)\n\n　　Zuul已经为我们封装好了基本的过滤器，表格中Order是这些过滤器的执行顺序，可见Zuul为我们充分预留了很多空间来对默认过滤器进行增强，例如\n\n* 安全/鉴权\n* 流量控制\n* 接口控制\n* 访问统计\n* ...\n\n---\n\n## 动态路由增强，实现路由的动态配置\n　　Zuul相比较于Nginx的一个很大优势在于其提供的动态路由功能，前文已经介绍过，当服务过多的时候，运维需要大量的时间去手动维护路由的映射关系，极易造成严重的线上问题。\n　　好在Zuul与Eureka（注册中心）在Spring Cloud中实现了完美的整合，Eureka能够实时管理不同集群的每一个节点信息，Zuul便能够通过注册中心获取每一个服务的详细清单，并通过Ribbon实现负载均衡，从而达到请求到转发的自动路由机制。\n　　前文提过Zuul并没有实现路由的动态配置，每次新增反向代理规则都需要重启Zuul未免有点尴尬，是否可以修改Zuul来避免重启呢？我们需要看一下Zuul的动态路由的实现原理。\n\n### 源码分析\n　　找到spring-cloud-netflix-zuul-2.0.1.RELEASE.jar，看一下路由定位器相关实现：\n\n![zuul_locato](/images/15239442308370/zuul_locator.jpg)\n\n\n* RouteLocator 路由定位基础接口\n* RefreshableRouteLocator 提供刷新接口\n* SimpleRouteLocator 基础实现定位器，主要实现了路由定位与路由加载逻辑\n* CompositeRouteLocator 复合定位器，提供路由定位、路由刷新功能\n* DiscoveryClientRouteLocator 组合静态以及配置好的路由\n\n　　通过查看Zuul的源码发现，Zuul已经为我们定义好路由定位于刷新的接口标准，RouteLocator接口主要定义了路由定位器，如下\n\n```\n\t/**\n\t * Ignored route paths (or patterns), if any.\n\t */\n\tCollection<String> getIgnoredPaths();\n\n\t/**\n\t * A map of route path (pattern) to location (e.g. service id or URL).\n\t */\n\tList<Route> getRoutes();\n\n\t/**\n\t * Maps a path to an actual route with full metadata.\n\t */\n\tRoute getMatchingRoute(String path);\n```\n\n　　RefreshableRouteLocator接口，只定义了一个路由信息刷新接口\n\n```\n    void refresh();\n```\n\n　　SimpleRouteLocator，主要实现了RouteLocator接口，在内部引入了ZuulProperties。ZuulProperties的配置是我们在application.yml中配置好的Zuul相关信息，其中包含了反向代理的配置，SimpleRouteLocator是基于静态配置文件的路由定位器的重要实现。\n\n```\nprivate ZuulProperties properties;\n...\n\n    @Override\n\tpublic List<Route> getRoutes() {\n\t\tList<Route> values = new ArrayList<>();\n\t\tfor (Entry<String, ZuulRoute> entry : getRoutesMap().entrySet()) {\n\t\t\tZuulRoute route = entry.getValue();\n\t\t\tString path = route.getPath();\n\t\t\tvalues.add(getRoute(route, path));\n\t\t}\n\t\treturn values;\n\t}\n\n...\n\n\t@Override\n\tpublic Route getMatchingRoute(final String path) {\n\t\treturn getSimpleMatchingRoute(path);\n\n\t}\n\t\n```\n　　接下来再来看看实现了刷新接口的CompositeRouteLocator与DiscoveryClientRouteLocator，DiscoveryClientRouteLocator继承了SimpleRouteLocator，同时实现了RefreshableRouteLocator。\n\n```\npublic class DiscoveryClientRouteLocator extends SimpleRouteLocator\n\t\timplements RefreshableRouteLocator {\n```\n\n　　它主要增加了DiscoveryClientRouteLocator方法，用于通过DiscoveryClient（例如Eureka）发现路由信息，以及实现了动态的路由刷新接口，这里的doRefresh仅仅是调用了SimpleRouteLocator的方法。\n\n```\n\t/**\n\t * Calculate all the routes and set up a cache for the values. Subclasses can call\n\t * this method if they need to implement {@link RefreshableRouteLocator}.\n\t */\n\tprotected void doRefresh() {\n\t\tthis.routes.set(locateRoutes());\n\t}\n\t\n```\n\n　　CompositeRouteLocator，其内部维护了routeLocators的集合，并继承了RefreshableRouteLocator方法。\n\n```\n/**\n * RouteLocator that composes multiple RouteLocators.\n *\n * @author Johannes Edmeier\n *\n */\npublic class CompositeRouteLocator implements RefreshableRouteLocator {\n\tprivate final Collection<? extends RouteLocator> routeLocators;\n\tprivate ArrayList<RouteLocator> rl;\n\n\tpublic CompositeRouteLocator(Collection<? extends RouteLocator> routeLocators) {\n\t\tAssert.notNull(routeLocators, \"'routeLocators' must not be null\");\n\t\trl = new ArrayList<>(routeLocators);\n\t\tAnnotationAwareOrderComparator.sort(rl);\n\t\tthis.routeLocators = rl;\n\t}\n\n\t@Override\n\tpublic Collection<String> getIgnoredPaths() {\n\t\tList<String> ignoredPaths = new ArrayList<>();\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\tignoredPaths.addAll(locator.getIgnoredPaths());\n\t\t}\n\t\treturn ignoredPaths;\n\t}\n\n\t@Override\n\tpublic List<Route> getRoutes() {\n\t\tList<Route> route = new ArrayList<>();\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\troute.addAll(locator.getRoutes());\n\t\t}\n\t\treturn route;\n\t}\n\n\t@Override\n\tpublic Route getMatchingRoute(String path) {\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\tRoute route = locator.getMatchingRoute(path);\n\t\t\tif (route != null) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void refresh() {\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\tif (locator instanceof RefreshableRouteLocator) {\n\t\t\t\t((RefreshableRouteLocator) locator).refresh();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n　　routeLocators就是我们需要的入口了，如果我们可以自定义一个通过数据库来加载的路由Locator，并自己实现refresh方法，那么就初步实现了路由动态配置最重要的一步。\n　　如何将自定义Locator添加至routeLocators集合中呢？我们来梳理一下Zuul初始化的过程，在jar中我们能够找到有两个分账关键的配置类，分别是ZuulServerAutoConfiguration与ZuulProxyAutoConfiguration。\n　　ZuulServerAutoConfiguration，里面初始化了CompositeRouteLocator、SimpleRouteLocator、ZuulController、各种关键默认的Filter、ZuulRefreshListener等，是我们要实现目的的关键入口。\n\n```\n　　 @Bean\n\t@Primary\n\tpublic CompositeRouteLocator primaryRouteLocator(\n\t\t\tCollection<RouteLocator> routeLocators) {\n\t\treturn new CompositeRouteLocator(routeLocators);\n\t}\n\n```\n这里是CompositeRouteLocator初始化入口，由此可见我们完全可以将自定义的Locator加载进去。\n\n### 自定义路由定位器与路由刷新策略\n\n　　根据上面的方法，我们便可以将自定义的locator添加进CompositeRouteLocator中的locators集合。\n　　定义一个MyDynamicRouteLocator，实现RefreshableRouteLocator，Ordered接口，其核心功能有两点，其一是将数据库中配置的路由信息加载，作为路由定位方法判定的基础，其二是实现刷新方法，使之能够识别数据库中变化的配置信息。\n    \n```\npublic class MyDynamicRouteLocator implements RefreshableRouteLocator, Ordered {\n```\n\n\n然后，在项目启动时初始化MyDynamicRouteLocator\n\n\n```\n@Configuration\npublic class DynamicRouteConfiguration {\n    ...\n    \n    @Bean\n    public MyDynamicRouteLocator dynamicRouteLocator() {\n       ... \n    }\n\n}\n\n```\n\n### 路由动态配置的优化\n　　Zuul默认会维持心跳每隔30秒调用一次refresh方法来刷新路由信息，如果路由配置发生变更时，我们希望它可以实时生效，如何做呢？\n　　前面提到ZuulServerAutoConfiguration内部初始化了一个ZuulRefreshListener，它实现了Spring的ApplicationListener接口，当它监听到一些指定的Event时，便最终会调用refresh方法来刷新路由配置信息。\n\n```\n\tprivate static class ZuulRefreshListener\n\t\t\timplements ApplicationListener<ApplicationEvent> {\n\n\t\t@Autowired\n\t\tprivate ZuulHandlerMapping zuulHandlerMapping;\n\n\t\tprivate HeartbeatMonitor heartbeatMonitor = new HeartbeatMonitor();\n\n\t\t@Override\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tif (event instanceof ContextRefreshedEvent\n\t\t\t\t\t|| event instanceof RefreshScopeRefreshedEvent\n\t\t\t\t\t|| event instanceof RoutesRefreshedEvent\n\t\t\t\t\t|| event instanceof InstanceRegisteredEvent) {\n\t\t\t\treset();\n\t\t\t}\n\t\t\telse if (event instanceof ParentHeartbeatEvent) {\n\t\t\t\tParentHeartbeatEvent e = (ParentHeartbeatEvent) event;\n\t\t\t\tresetIfNeeded(e.getValue());\n\t\t\t}\n\t\t\telse if (event instanceof HeartbeatEvent) {\n\t\t\t\tHeartbeatEvent e = (HeartbeatEvent) event;\n\t\t\t\tresetIfNeeded(e.getValue());\n\t\t\t}\n\t\t}\n\n\t\tprivate void resetIfNeeded(Object value) {\n\t\t\tif (this.heartbeatMonitor.update(value)) {\n\t\t\t\treset();\n\t\t\t}\n\t\t}\n\n\t\tprivate void reset() {\n\t\t\tthis.zuulHandlerMapping.setDirty(true);\n\t\t}\n\t}\n```\n\n　　因此，我们可以通过广播-订阅的方式，建立一个Zuul的管理后台，当我们认为将路由配置信息变更时，发送一个广播，在Zuul集群的服务中实时监听该消息，当监听到刷新请求后，通过ApplicationEventPublisher发布RoutesRefreshedEvent，Zuul的事件监听器会自动为我们处理后续流程，从而实现了配置修改的实时刷新。\n　　\n![](/images/15397653100461/15398449182455.jpg)\n\n核心方法\n\n```\n    /**\n     * 取得订阅的消息后的处理\n     *\n     * 说明：当接收到路由规则刷新通知时, 发布路由刷新事件\n     * @param channel\n     * @param message\n     */\n    @Override\n    public void onMessage(String channel, String message) {\n        // step. 发布路由刷新事件\n        this.publisher.publishEvent(new RoutesRefreshedEvent(compositeRouteLocator));\n    }\n```\n\n---\n\n## Zuul与非Spring Boot项目集成\n\n　　前面介绍过，Zuul的动态路由与负载均衡离不开Spring Cloud的Discovery Client（例如Eureka）与Ribbon，对于Spring Boot项目来说，其接入成本即引入一个jar包，添加几行配置与注解即可与Zuul集成。\n　　对于非Spring Boot项目，我们需要自己封装一个类似的spring-cloud-starter-netflix-eureka-client组件。\n\n\n### 自定义非Spring Boot项目spring-cloud-starter-netflix-eureka-client组件\n　　参考官方starter，该组件内部的核心是eureka-client.jar，核心逻辑很简单，即项目启动时将项目的地址、Host等信息注册至Eureka中，并开启Eureka的心跳机制，以便监听服务状态实时更新注册中心。\n\n#### 首先引入eureka-client\n引入版本需与spring-cloud-starter-netflix-eureka-client所用一致\n\n```\n<!-- Eureka -->\n<dependency>\n    <groupId>com.netflix.eureka</groupId>\n    <artifactId>eureka-client</artifactId>\n    <version>${eureka.version}</version>\n    <exclusions>\n        <exclusion>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n            \n```\n　　这里需要注意一点，由于旧项目所用servlet-api版本不同，因此需要注意组件的依赖关系。\n\n#### 定义Listener\nListener必须具有以下功能：\n\n* 项目启动时服务信息注册到Eureka，并提供心跳监测　　\n* 项目销毁时注销Eureka\n* 维持心跳监测\n\n```\n/**\n * 用途：Eureka服务注册\n * 说明：\n *      1、项目启动时服务信息注册到Eureka, 并提供心跳监测\n *      2、项目销毁时注销Eureka\n *      3、Eureka客户端默认配置的覆盖选项从Classpath下寻找eureka-client.properties中加载\n *\n * @author Wang Ran <br/>\n */\npublic class EurekaDiscoveryListener implements ServletContextListener {\n\n    private static ApplicationInfoManager applicationInfoManager;\n    private static EurekaClient eurekaClient;\n    private static EurekaInstanceConfig instanceConfig;\n    private static EurekaClientConfig clientConfig = new DefaultEurekaClientConfig();\n\n    /**\n     * 服务启动时调用, 注册Eureka\n     * @param sce\n     */\n    @Override\n    public void contextInitialized(ServletContextEvent servletContextEvent) {\n        // step. 初始化Eureka Client\n        try {\n            final String ipAddress = EurekaClientUtils.getLocalIpAddress();\n            instanceConfig = new MyDataCenterInstanceConfig() {\n                /**\n                 * 强制将注册到Eureka的hostName从主机名换成IP地址加端口号的形式\n                 * @param refresh\n                 * @return\n                 */\n                @Override\n                public String getHostName(boolean refresh) {\n                    return ipAddress;\n                }\n\n                /**\n                 * 强制将Eureka上显示的实例名称初始化为ip:appname:port的形式\n                 * @return\n                 */\n                @Override\n                public String getInstanceId() {\n                    return ipAddress.concat(\":\").concat(this.getAppname())\n                            .concat(\":\").concat(String.valueOf(this.getNonSecurePort()));\n                }\n            };\n        } catch (SocketException e) {\n            throw new RuntimeException(\"Eureka Register init process occurred SocketException\", e);\n        }\n        // 初始化Eureka ApplicationInfoManager\n        initializeApplicationInfoManager(instanceConfig);\n        // 初始化Eureka客户端并向Eureka注册\n        initializeEurekaClient(applicationInfoManager, clientConfig);\n        // 注册成功后向Eureka通知注册状态\n        applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);\n    }\n\n    /**\n     * 服务销毁时调用, 注销Eureka\n     * @param servletContextEvent\n     */\n    @Override\n    public void contextDestroyed(ServletContextEvent servletContextEvent) {\n        eurekaClient.shutdown();\n    }\n\n    /**\n     * 初始化Eureka ApplicationInfoManager\n     * @param instanceConfig\n     * @return\n     */\n    private static synchronized ApplicationInfoManager initializeApplicationInfoManager(\n            EurekaInstanceConfig instanceConfig) {\n        if (applicationInfoManager == null) {\n            InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();\n            applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);\n        }\n\n        return applicationInfoManager;\n    }\n\n    /**\n     * 初始化Eureka客户端\n     * @param applicationInfoManager\n     * @param clientConfig\n     * @return\n     */\n    private static synchronized EurekaClient initializeEurekaClient(\n            ApplicationInfoManager applicationInfoManager, EurekaClientConfig clientConfig) {\n        if (eurekaClient == null) {\n            eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig);\n        }\n        return eurekaClient;\n    }\n}\n```\n\n### 非Spring Boot项目客户端接入Eureka\n#### 引入自定义Client\n\n```\n<dependency>\n    <groupId>com.xxx</groupId>\n    <artifactId>my-spring-cloud-starter-netflix-eureka-client</artifactId>\n    <version>${xxx.version}</version>\n</dependency>\n```\n\n#### 在Classpath添加文件：eureka-client.properties\n\n```\n### Eureka Client configuration\n\n# configuration related to reaching the eureka servers\n# 例如：http://eureka-node1:port/eureka/,http://eureka-node2:port/eureka/\neureka.serviceUrl.default=${EUREKA_URI}\n# 输入客户端服务集群的id, 名称需为英文, 例如: xxx-server\neureka.name=${EUREKA-CLIENT-ID}\n# 输入客户端服务端口, 例如8080\neureka.port=${EUREKA-CLIENT-PORT}\n# 向服务发现注册真实ip\neureka.instance.prefer-ip-address=true\n# 心跳时间，即服务续约间隔时间（缺省为30s）\neureka.instance.lease-renewal-interval-in-seconds=5\n# 发呆时间，即服务续约到期时间（缺省为90s）\neureka.instance.lease-expiration-duration-in-seconds=20\n# 客户识别此服务的虚拟主机名\neureka.vipAddress=${eureka.name}\neureka.vitualVipAddress=${eureka.name}\n## configuration related to reaching the eureka servers\neureka.preferSameZone=true\n# 是否要使用基于DNS的查找来确定其他eureka服务器\neureka.shouldUseDns=false\n# 是否注册自身到eureka\neureka.registration.enabled=true\neureka.decoderName=JacksonJson\n```\n\n#### web.xml文件引入Eureka监听器\n\n```\n<listener>\n    <description>Eureka Listener</description>\n    <listener-class>com.xxx.listener.EurekaDiscoveryListener</listener-class>\n</listener>\n    \n```\n\n---\n\n## 分流上线 & 验证\n　　前文所述，我们现有集群架构接入Zuul面临了一些上线问题：\n\n* App端每次更新都要重新发版，时效性差\n* App端接入Zuul后若出现问题，无法及时回滚\n* 旧版本App无法修改接入Zuul\n* 测试与线上环境不一致，上线存在未知的风险\n* 我们的业务模式，无法在线上环境进行全流程测试\n\n　　为了解决上述问题，我们必须做到在前端不进行任何修改的情况下，以一种分流且可验证的形式接入Zuul中。\n\n### 分流方案\n　　　　![Spring Cloud Zuul 02 -1-](/images/15397653100461/Spring%20Cloud%20Zuul%2002%20-1-.jpg)\n　　若想做到前端在前期不做任何修改，意味着Zuul当前必须与前端已有的Nginx域名对接。\n　　我们假设Zuul的域名为：my-zuul.com，旧服务1的域名为old-service-01.com，映射的机器为10.10.10.1，10.10.10.2。\n　　对于分流方案，我们可以直接以Nginx的轮询策略为基准，将my-zuul.com作为类似10.10.10.1的一个节点，通过权重的形式将一部分访问old-service-01.com的流量分发到10.10.10.1，一部分流量分发到my-zuul.com。\n　　但是这里存在一个问题，前端需要将old-service-01.com域名替换为my-zuul.com/service-01，而Nginx的upstream在映射到zuul.com时无法为域名添加/service-01，因此需要引入old-service-01-neiwang.com域名来解决这个问题。\n\n```\n　upstream old-service-01.com {\n　   server 10.10.10.1:8080 fail_timeout=10s max_fails=3 weight 1;\n　   ...\n　   server old-service-01-neiwang.com weight 1;\n　}\n```\n　　然后，在Nginx中针对old-service-01-neiwang.com域名进行redirect，使之转到my-zuul.com/service-01，最终的架构详见下图。\n\n　　![Spring Cloud Zuul 03](/images/15397653100461/Spring%20Cloud%20Zuul%2003.jpg)\n\n\n　　\n### 验证方案\n\n　　通过Nginx我们实现了分流的上线策略，那么便可通过新增Post类型的自定义过滤器，拦截服务之间的请求与响应关键信息，进而通过streaming实时分析日志记录，监测Zuul的访问情况与业务数据的指标范围，来确定上线是否存在异常情形，进而可以逐步提升Zuul在Nginx的分流权重，直至最终将老架构过渡到以Zuul为核心的最终方案。\n\n![](/images/15397653100461/15398532205321.jpg)\n![](/images/15397653100461/15398533229844.jpg)\n\n---\n\n## 总结\n　　本文主要与大家分享一下我们在使用Spring Cloud中关于Zuul的一些实践心得，鉴于作者水平有限，文章中不免会有理解不到位的地方。关于Zuul本身与其他Spring Cloud组件，以及其他微服务架构有非常多的地方值得深入探讨，若您对文章中某些问题存在疑问，或是发现某些内容存在错误、有更好的解决方案、意见以及建议等，欢迎留言，非常希望能与各路大神广泛交流。\n \n---\n## 参考资料\n\n[Spring Cloud官方文档\n](http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html)\n\n[Zuul Github\n](https://github.com/Netflix/zuul)\n\n","source":"_posts/spring-cloud_zuul_01.md","raw":"---\ntitle:  \"Spring Cloud Finchley 在业务系统中的实践总结 - Zuul的实践与增强\"\ndate: 2018-10-19 15:38:00\ncategories: Spring Cloud\ntags: Zuul\ntoc:\n  on: true\n  max_depth: 3\n  nowrap: false\n  list_number: true\ntoc_list_number: true\n---\n## 前言\n　　本文主要针对Zuul在实际业务场景中的一些实践心得进行总结，重点围绕Zuul本身关于动态配置缺陷问题、老项目接入及老环境上线问题等方面进行讨论。关于Zuul的一些基本用法，可直接参考[Spring Cloud官方文档\n](http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html)与[Zuul Github](https://github.com/Netflix/zuul)。\n　　我们使用的Zuul基于Spring官方目前最新版本Spring Cloud Finchley.SR1。\n\n---\n\n<!-- more -->\n## Zuul是什么\n　　Zuul可以用两个单词总结，即路由和过滤器（Router and Filter），它是Netflix开源，并被Spring所集成，成为当前Spring Cloud最核心的组件之一。它的基本功能可概括如下：\n\n* 认证鉴权（Authentication）\n* 审查（Insights）\n* 压力测试（Stress Testing）\n* 金丝雀测试（Canary Testing）\n* 动态路由（Dynamic Routing）\n* 服务迁移（Service Migration）\n* 负载剪裁（Load Shedding）\n* 安全（Security）\n* 静态应答处理（Static Response handling）\n* Active/Active traffic management\n\n---\n\n## 为什么要使用它\n　　路由是微服务的架构体系当中必不可少的一部分，那么缺少它会带来什么问题呢？这里以公司某业务线实际场景为例：\n![Spring Cloud Zuul 01](/images/15397653100461/Spring%20Cloud%20Zuul%2001.jpg)\n　　上图是是一个简单的前后端交互架构，来自PC/微信/H5/IOS/Android等客户端将请求发送至Nginx，后由Nginx反向代理到指定后端服务集群中。我们能够很方便的为后端服务集群提供负载均衡，同时通过Nginx的反向代理，可以隐藏后端真实IP，即提供了一定程度的安全保障，也使得前后端服务调用隔离，降低开发成本。\n　　随着业务规模的不断扩大，后端微服务已从数个服务集群扩展到了数十个，此时Nginx为每一个服务集群都配置了唯一的域名用于反向代理，每当这些服务集群需要扩容或机器迁移时，需要运维投入大量的精力去手动修改配置。此外，这些数十个域名也造成了资源的极度浪费。\n　　\n　　![](/images/15397653100461/15398454116261.jpg)\n    \n\n\n　　在近些年火热的微服务浪潮下，我们都热衷于将每一个原子业务单元都拆分成微服务，这对运维来说造成了很多压力，就好像上图中，当你面相这种规模的服务集群时，传统的维护手段已接近于灾难，必须要想办法借助更多的工具来帮助我们。\n　　相比Nginx，我们可以将Zuul理解为微服务集群的一个可靠的大管家，它是上述问题的解决方案之一。使用它，可以方便的用一个域名来替换掉之前的数十个域名，此外，当服务集群扩容或迁移时，Zull可以做到自动识别，即动态路由，它还具有服务鉴权、服务降级、熔断、分流控制、接口控制等Nginx所不具备的重要功能。\n\n---\n\n## 问题与挑战\n　　Spring Cloud Finchley版本基于Spring Boot2.0构建，按照约定大于配置的思想，我们能够很轻易的上手使用这些开源框架。但是任何开源框架放到实际应用场景中，都不可能百分百的切合我们的实际需求，例如\n\n### 当前Spring Cloud Zuul最新版本不支持路由的动态配置\n　　虽然Zuul能够做到动态路由，但是反向代理的配置信息是需要在application.yml配置文件中维护的，这意味着每一次有新的服务集群需要进行反向代理时，我们需要像重启Nginx一样来重启Zuul，重启意味着增加了上线的风险与成本。\n\n### 非Spring Boot项目接入问题\n　　对于任何一个Spring Boot项目来说，可以非常简单方便的与Spring Cloud Zuul整合，但是官方并未提供一些工具来支持一些老项目的接入，目前实际业务线大部分服务均是非Spring Boot的老服务，我们需要自己来实现这些通用的工具组件。\n\n### 老环境上线迁移问题\n　　长期以来前端业务线一直采用的是Request-Nginx-Server架构。基于前文介绍，我们的Request端分散在各大手机应用市场、微信等合作渠道，对于这些已经集成了数十个不同服务域名的前端来说，接入Zuul会有一系列的问题需要解决：\n\n* App端每次更新都要重新发版，时效性差\n* App端接入Zuul后若出现问题，无法及时回滚\n* 旧版本App无法修改接入Zuul\n\n### 上线验证问题\n* 测试与线上环境不一致，上线存在未知的风险\n* 我们的业务模式，无法在线上环境进行全流程测试\n\n　　基于业务模式，系统中有大量节点需要对接第三方机构，无法进行全流程测试，同时，当前我们的测试环境无法做到与线上环境完全一致，对于Zuul的接入来说是一个非常大的挑战。\n\n---\n\n## Zuul的核心架构\n　　Zuul的核心其实很简单，就是Filter，如下图所示：\n![](/images/15397653100461/15397741541838.png)\n\n可以看到，Zuul将过滤器大致分为4类，Pre、Routing、Post/Error\n\n![](/images/15397653100461/15398306875833.jpg)\n\n\n* pre： 这种过滤器在请求被路由之前调用，安全与鉴权功能可在此实现。\n* routing：通过HttpClient/Ribbon将请求路由到后端服务。\n* post：路由后执行，可以接收到后端服务的响应信息，并转发给请求端。\n* error：在其他阶段发生错误时执行该过滤器。\n\n#### Spring Zuul提供的默认过滤器\n\n![](/images/15397653100461/15399408807599.jpg)\n\n　　Zuul已经为我们封装好了基本的过滤器，表格中Order是这些过滤器的执行顺序，可见Zuul为我们充分预留了很多空间来对默认过滤器进行增强，例如\n\n* 安全/鉴权\n* 流量控制\n* 接口控制\n* 访问统计\n* ...\n\n---\n\n## 动态路由增强，实现路由的动态配置\n　　Zuul相比较于Nginx的一个很大优势在于其提供的动态路由功能，前文已经介绍过，当服务过多的时候，运维需要大量的时间去手动维护路由的映射关系，极易造成严重的线上问题。\n　　好在Zuul与Eureka（注册中心）在Spring Cloud中实现了完美的整合，Eureka能够实时管理不同集群的每一个节点信息，Zuul便能够通过注册中心获取每一个服务的详细清单，并通过Ribbon实现负载均衡，从而达到请求到转发的自动路由机制。\n　　前文提过Zuul并没有实现路由的动态配置，每次新增反向代理规则都需要重启Zuul未免有点尴尬，是否可以修改Zuul来避免重启呢？我们需要看一下Zuul的动态路由的实现原理。\n\n### 源码分析\n　　找到spring-cloud-netflix-zuul-2.0.1.RELEASE.jar，看一下路由定位器相关实现：\n\n![zuul_locato](/images/15239442308370/zuul_locator.jpg)\n\n\n* RouteLocator 路由定位基础接口\n* RefreshableRouteLocator 提供刷新接口\n* SimpleRouteLocator 基础实现定位器，主要实现了路由定位与路由加载逻辑\n* CompositeRouteLocator 复合定位器，提供路由定位、路由刷新功能\n* DiscoveryClientRouteLocator 组合静态以及配置好的路由\n\n　　通过查看Zuul的源码发现，Zuul已经为我们定义好路由定位于刷新的接口标准，RouteLocator接口主要定义了路由定位器，如下\n\n```\n\t/**\n\t * Ignored route paths (or patterns), if any.\n\t */\n\tCollection<String> getIgnoredPaths();\n\n\t/**\n\t * A map of route path (pattern) to location (e.g. service id or URL).\n\t */\n\tList<Route> getRoutes();\n\n\t/**\n\t * Maps a path to an actual route with full metadata.\n\t */\n\tRoute getMatchingRoute(String path);\n```\n\n　　RefreshableRouteLocator接口，只定义了一个路由信息刷新接口\n\n```\n    void refresh();\n```\n\n　　SimpleRouteLocator，主要实现了RouteLocator接口，在内部引入了ZuulProperties。ZuulProperties的配置是我们在application.yml中配置好的Zuul相关信息，其中包含了反向代理的配置，SimpleRouteLocator是基于静态配置文件的路由定位器的重要实现。\n\n```\nprivate ZuulProperties properties;\n...\n\n    @Override\n\tpublic List<Route> getRoutes() {\n\t\tList<Route> values = new ArrayList<>();\n\t\tfor (Entry<String, ZuulRoute> entry : getRoutesMap().entrySet()) {\n\t\t\tZuulRoute route = entry.getValue();\n\t\t\tString path = route.getPath();\n\t\t\tvalues.add(getRoute(route, path));\n\t\t}\n\t\treturn values;\n\t}\n\n...\n\n\t@Override\n\tpublic Route getMatchingRoute(final String path) {\n\t\treturn getSimpleMatchingRoute(path);\n\n\t}\n\t\n```\n　　接下来再来看看实现了刷新接口的CompositeRouteLocator与DiscoveryClientRouteLocator，DiscoveryClientRouteLocator继承了SimpleRouteLocator，同时实现了RefreshableRouteLocator。\n\n```\npublic class DiscoveryClientRouteLocator extends SimpleRouteLocator\n\t\timplements RefreshableRouteLocator {\n```\n\n　　它主要增加了DiscoveryClientRouteLocator方法，用于通过DiscoveryClient（例如Eureka）发现路由信息，以及实现了动态的路由刷新接口，这里的doRefresh仅仅是调用了SimpleRouteLocator的方法。\n\n```\n\t/**\n\t * Calculate all the routes and set up a cache for the values. Subclasses can call\n\t * this method if they need to implement {@link RefreshableRouteLocator}.\n\t */\n\tprotected void doRefresh() {\n\t\tthis.routes.set(locateRoutes());\n\t}\n\t\n```\n\n　　CompositeRouteLocator，其内部维护了routeLocators的集合，并继承了RefreshableRouteLocator方法。\n\n```\n/**\n * RouteLocator that composes multiple RouteLocators.\n *\n * @author Johannes Edmeier\n *\n */\npublic class CompositeRouteLocator implements RefreshableRouteLocator {\n\tprivate final Collection<? extends RouteLocator> routeLocators;\n\tprivate ArrayList<RouteLocator> rl;\n\n\tpublic CompositeRouteLocator(Collection<? extends RouteLocator> routeLocators) {\n\t\tAssert.notNull(routeLocators, \"'routeLocators' must not be null\");\n\t\trl = new ArrayList<>(routeLocators);\n\t\tAnnotationAwareOrderComparator.sort(rl);\n\t\tthis.routeLocators = rl;\n\t}\n\n\t@Override\n\tpublic Collection<String> getIgnoredPaths() {\n\t\tList<String> ignoredPaths = new ArrayList<>();\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\tignoredPaths.addAll(locator.getIgnoredPaths());\n\t\t}\n\t\treturn ignoredPaths;\n\t}\n\n\t@Override\n\tpublic List<Route> getRoutes() {\n\t\tList<Route> route = new ArrayList<>();\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\troute.addAll(locator.getRoutes());\n\t\t}\n\t\treturn route;\n\t}\n\n\t@Override\n\tpublic Route getMatchingRoute(String path) {\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\tRoute route = locator.getMatchingRoute(path);\n\t\t\tif (route != null) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void refresh() {\n\t\tfor (RouteLocator locator : routeLocators) {\n\t\t\tif (locator instanceof RefreshableRouteLocator) {\n\t\t\t\t((RefreshableRouteLocator) locator).refresh();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n　　routeLocators就是我们需要的入口了，如果我们可以自定义一个通过数据库来加载的路由Locator，并自己实现refresh方法，那么就初步实现了路由动态配置最重要的一步。\n　　如何将自定义Locator添加至routeLocators集合中呢？我们来梳理一下Zuul初始化的过程，在jar中我们能够找到有两个分账关键的配置类，分别是ZuulServerAutoConfiguration与ZuulProxyAutoConfiguration。\n　　ZuulServerAutoConfiguration，里面初始化了CompositeRouteLocator、SimpleRouteLocator、ZuulController、各种关键默认的Filter、ZuulRefreshListener等，是我们要实现目的的关键入口。\n\n```\n　　 @Bean\n\t@Primary\n\tpublic CompositeRouteLocator primaryRouteLocator(\n\t\t\tCollection<RouteLocator> routeLocators) {\n\t\treturn new CompositeRouteLocator(routeLocators);\n\t}\n\n```\n这里是CompositeRouteLocator初始化入口，由此可见我们完全可以将自定义的Locator加载进去。\n\n### 自定义路由定位器与路由刷新策略\n\n　　根据上面的方法，我们便可以将自定义的locator添加进CompositeRouteLocator中的locators集合。\n　　定义一个MyDynamicRouteLocator，实现RefreshableRouteLocator，Ordered接口，其核心功能有两点，其一是将数据库中配置的路由信息加载，作为路由定位方法判定的基础，其二是实现刷新方法，使之能够识别数据库中变化的配置信息。\n    \n```\npublic class MyDynamicRouteLocator implements RefreshableRouteLocator, Ordered {\n```\n\n\n然后，在项目启动时初始化MyDynamicRouteLocator\n\n\n```\n@Configuration\npublic class DynamicRouteConfiguration {\n    ...\n    \n    @Bean\n    public MyDynamicRouteLocator dynamicRouteLocator() {\n       ... \n    }\n\n}\n\n```\n\n### 路由动态配置的优化\n　　Zuul默认会维持心跳每隔30秒调用一次refresh方法来刷新路由信息，如果路由配置发生变更时，我们希望它可以实时生效，如何做呢？\n　　前面提到ZuulServerAutoConfiguration内部初始化了一个ZuulRefreshListener，它实现了Spring的ApplicationListener接口，当它监听到一些指定的Event时，便最终会调用refresh方法来刷新路由配置信息。\n\n```\n\tprivate static class ZuulRefreshListener\n\t\t\timplements ApplicationListener<ApplicationEvent> {\n\n\t\t@Autowired\n\t\tprivate ZuulHandlerMapping zuulHandlerMapping;\n\n\t\tprivate HeartbeatMonitor heartbeatMonitor = new HeartbeatMonitor();\n\n\t\t@Override\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tif (event instanceof ContextRefreshedEvent\n\t\t\t\t\t|| event instanceof RefreshScopeRefreshedEvent\n\t\t\t\t\t|| event instanceof RoutesRefreshedEvent\n\t\t\t\t\t|| event instanceof InstanceRegisteredEvent) {\n\t\t\t\treset();\n\t\t\t}\n\t\t\telse if (event instanceof ParentHeartbeatEvent) {\n\t\t\t\tParentHeartbeatEvent e = (ParentHeartbeatEvent) event;\n\t\t\t\tresetIfNeeded(e.getValue());\n\t\t\t}\n\t\t\telse if (event instanceof HeartbeatEvent) {\n\t\t\t\tHeartbeatEvent e = (HeartbeatEvent) event;\n\t\t\t\tresetIfNeeded(e.getValue());\n\t\t\t}\n\t\t}\n\n\t\tprivate void resetIfNeeded(Object value) {\n\t\t\tif (this.heartbeatMonitor.update(value)) {\n\t\t\t\treset();\n\t\t\t}\n\t\t}\n\n\t\tprivate void reset() {\n\t\t\tthis.zuulHandlerMapping.setDirty(true);\n\t\t}\n\t}\n```\n\n　　因此，我们可以通过广播-订阅的方式，建立一个Zuul的管理后台，当我们认为将路由配置信息变更时，发送一个广播，在Zuul集群的服务中实时监听该消息，当监听到刷新请求后，通过ApplicationEventPublisher发布RoutesRefreshedEvent，Zuul的事件监听器会自动为我们处理后续流程，从而实现了配置修改的实时刷新。\n　　\n![](/images/15397653100461/15398449182455.jpg)\n\n核心方法\n\n```\n    /**\n     * 取得订阅的消息后的处理\n     *\n     * 说明：当接收到路由规则刷新通知时, 发布路由刷新事件\n     * @param channel\n     * @param message\n     */\n    @Override\n    public void onMessage(String channel, String message) {\n        // step. 发布路由刷新事件\n        this.publisher.publishEvent(new RoutesRefreshedEvent(compositeRouteLocator));\n    }\n```\n\n---\n\n## Zuul与非Spring Boot项目集成\n\n　　前面介绍过，Zuul的动态路由与负载均衡离不开Spring Cloud的Discovery Client（例如Eureka）与Ribbon，对于Spring Boot项目来说，其接入成本即引入一个jar包，添加几行配置与注解即可与Zuul集成。\n　　对于非Spring Boot项目，我们需要自己封装一个类似的spring-cloud-starter-netflix-eureka-client组件。\n\n\n### 自定义非Spring Boot项目spring-cloud-starter-netflix-eureka-client组件\n　　参考官方starter，该组件内部的核心是eureka-client.jar，核心逻辑很简单，即项目启动时将项目的地址、Host等信息注册至Eureka中，并开启Eureka的心跳机制，以便监听服务状态实时更新注册中心。\n\n#### 首先引入eureka-client\n引入版本需与spring-cloud-starter-netflix-eureka-client所用一致\n\n```\n<!-- Eureka -->\n<dependency>\n    <groupId>com.netflix.eureka</groupId>\n    <artifactId>eureka-client</artifactId>\n    <version>${eureka.version}</version>\n    <exclusions>\n        <exclusion>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n            \n```\n　　这里需要注意一点，由于旧项目所用servlet-api版本不同，因此需要注意组件的依赖关系。\n\n#### 定义Listener\nListener必须具有以下功能：\n\n* 项目启动时服务信息注册到Eureka，并提供心跳监测　　\n* 项目销毁时注销Eureka\n* 维持心跳监测\n\n```\n/**\n * 用途：Eureka服务注册\n * 说明：\n *      1、项目启动时服务信息注册到Eureka, 并提供心跳监测\n *      2、项目销毁时注销Eureka\n *      3、Eureka客户端默认配置的覆盖选项从Classpath下寻找eureka-client.properties中加载\n *\n * @author Wang Ran <br/>\n */\npublic class EurekaDiscoveryListener implements ServletContextListener {\n\n    private static ApplicationInfoManager applicationInfoManager;\n    private static EurekaClient eurekaClient;\n    private static EurekaInstanceConfig instanceConfig;\n    private static EurekaClientConfig clientConfig = new DefaultEurekaClientConfig();\n\n    /**\n     * 服务启动时调用, 注册Eureka\n     * @param sce\n     */\n    @Override\n    public void contextInitialized(ServletContextEvent servletContextEvent) {\n        // step. 初始化Eureka Client\n        try {\n            final String ipAddress = EurekaClientUtils.getLocalIpAddress();\n            instanceConfig = new MyDataCenterInstanceConfig() {\n                /**\n                 * 强制将注册到Eureka的hostName从主机名换成IP地址加端口号的形式\n                 * @param refresh\n                 * @return\n                 */\n                @Override\n                public String getHostName(boolean refresh) {\n                    return ipAddress;\n                }\n\n                /**\n                 * 强制将Eureka上显示的实例名称初始化为ip:appname:port的形式\n                 * @return\n                 */\n                @Override\n                public String getInstanceId() {\n                    return ipAddress.concat(\":\").concat(this.getAppname())\n                            .concat(\":\").concat(String.valueOf(this.getNonSecurePort()));\n                }\n            };\n        } catch (SocketException e) {\n            throw new RuntimeException(\"Eureka Register init process occurred SocketException\", e);\n        }\n        // 初始化Eureka ApplicationInfoManager\n        initializeApplicationInfoManager(instanceConfig);\n        // 初始化Eureka客户端并向Eureka注册\n        initializeEurekaClient(applicationInfoManager, clientConfig);\n        // 注册成功后向Eureka通知注册状态\n        applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);\n    }\n\n    /**\n     * 服务销毁时调用, 注销Eureka\n     * @param servletContextEvent\n     */\n    @Override\n    public void contextDestroyed(ServletContextEvent servletContextEvent) {\n        eurekaClient.shutdown();\n    }\n\n    /**\n     * 初始化Eureka ApplicationInfoManager\n     * @param instanceConfig\n     * @return\n     */\n    private static synchronized ApplicationInfoManager initializeApplicationInfoManager(\n            EurekaInstanceConfig instanceConfig) {\n        if (applicationInfoManager == null) {\n            InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();\n            applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);\n        }\n\n        return applicationInfoManager;\n    }\n\n    /**\n     * 初始化Eureka客户端\n     * @param applicationInfoManager\n     * @param clientConfig\n     * @return\n     */\n    private static synchronized EurekaClient initializeEurekaClient(\n            ApplicationInfoManager applicationInfoManager, EurekaClientConfig clientConfig) {\n        if (eurekaClient == null) {\n            eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig);\n        }\n        return eurekaClient;\n    }\n}\n```\n\n### 非Spring Boot项目客户端接入Eureka\n#### 引入自定义Client\n\n```\n<dependency>\n    <groupId>com.xxx</groupId>\n    <artifactId>my-spring-cloud-starter-netflix-eureka-client</artifactId>\n    <version>${xxx.version}</version>\n</dependency>\n```\n\n#### 在Classpath添加文件：eureka-client.properties\n\n```\n### Eureka Client configuration\n\n# configuration related to reaching the eureka servers\n# 例如：http://eureka-node1:port/eureka/,http://eureka-node2:port/eureka/\neureka.serviceUrl.default=${EUREKA_URI}\n# 输入客户端服务集群的id, 名称需为英文, 例如: xxx-server\neureka.name=${EUREKA-CLIENT-ID}\n# 输入客户端服务端口, 例如8080\neureka.port=${EUREKA-CLIENT-PORT}\n# 向服务发现注册真实ip\neureka.instance.prefer-ip-address=true\n# 心跳时间，即服务续约间隔时间（缺省为30s）\neureka.instance.lease-renewal-interval-in-seconds=5\n# 发呆时间，即服务续约到期时间（缺省为90s）\neureka.instance.lease-expiration-duration-in-seconds=20\n# 客户识别此服务的虚拟主机名\neureka.vipAddress=${eureka.name}\neureka.vitualVipAddress=${eureka.name}\n## configuration related to reaching the eureka servers\neureka.preferSameZone=true\n# 是否要使用基于DNS的查找来确定其他eureka服务器\neureka.shouldUseDns=false\n# 是否注册自身到eureka\neureka.registration.enabled=true\neureka.decoderName=JacksonJson\n```\n\n#### web.xml文件引入Eureka监听器\n\n```\n<listener>\n    <description>Eureka Listener</description>\n    <listener-class>com.xxx.listener.EurekaDiscoveryListener</listener-class>\n</listener>\n    \n```\n\n---\n\n## 分流上线 & 验证\n　　前文所述，我们现有集群架构接入Zuul面临了一些上线问题：\n\n* App端每次更新都要重新发版，时效性差\n* App端接入Zuul后若出现问题，无法及时回滚\n* 旧版本App无法修改接入Zuul\n* 测试与线上环境不一致，上线存在未知的风险\n* 我们的业务模式，无法在线上环境进行全流程测试\n\n　　为了解决上述问题，我们必须做到在前端不进行任何修改的情况下，以一种分流且可验证的形式接入Zuul中。\n\n### 分流方案\n　　　　![Spring Cloud Zuul 02 -1-](/images/15397653100461/Spring%20Cloud%20Zuul%2002%20-1-.jpg)\n　　若想做到前端在前期不做任何修改，意味着Zuul当前必须与前端已有的Nginx域名对接。\n　　我们假设Zuul的域名为：my-zuul.com，旧服务1的域名为old-service-01.com，映射的机器为10.10.10.1，10.10.10.2。\n　　对于分流方案，我们可以直接以Nginx的轮询策略为基准，将my-zuul.com作为类似10.10.10.1的一个节点，通过权重的形式将一部分访问old-service-01.com的流量分发到10.10.10.1，一部分流量分发到my-zuul.com。\n　　但是这里存在一个问题，前端需要将old-service-01.com域名替换为my-zuul.com/service-01，而Nginx的upstream在映射到zuul.com时无法为域名添加/service-01，因此需要引入old-service-01-neiwang.com域名来解决这个问题。\n\n```\n　upstream old-service-01.com {\n　   server 10.10.10.1:8080 fail_timeout=10s max_fails=3 weight 1;\n　   ...\n　   server old-service-01-neiwang.com weight 1;\n　}\n```\n　　然后，在Nginx中针对old-service-01-neiwang.com域名进行redirect，使之转到my-zuul.com/service-01，最终的架构详见下图。\n\n　　![Spring Cloud Zuul 03](/images/15397653100461/Spring%20Cloud%20Zuul%2003.jpg)\n\n\n　　\n### 验证方案\n\n　　通过Nginx我们实现了分流的上线策略，那么便可通过新增Post类型的自定义过滤器，拦截服务之间的请求与响应关键信息，进而通过streaming实时分析日志记录，监测Zuul的访问情况与业务数据的指标范围，来确定上线是否存在异常情形，进而可以逐步提升Zuul在Nginx的分流权重，直至最终将老架构过渡到以Zuul为核心的最终方案。\n\n![](/images/15397653100461/15398532205321.jpg)\n![](/images/15397653100461/15398533229844.jpg)\n\n---\n\n## 总结\n　　本文主要与大家分享一下我们在使用Spring Cloud中关于Zuul的一些实践心得，鉴于作者水平有限，文章中不免会有理解不到位的地方。关于Zuul本身与其他Spring Cloud组件，以及其他微服务架构有非常多的地方值得深入探讨，若您对文章中某些问题存在疑问，或是发现某些内容存在错误、有更好的解决方案、意见以及建议等，欢迎留言，非常希望能与各路大神广泛交流。\n \n---\n## 参考资料\n\n[Spring Cloud官方文档\n](http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html)\n\n[Zuul Github\n](https://github.com/Netflix/zuul)\n\n","slug":"spring-cloud_zuul_01","published":1,"updated":"2019-06-06T05:02:02.561Z","_id":"cjwjetptj00134ezro2iu6s9r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>　　本文主要针对Zuul在实际业务场景中的一些实践心得进行总结，重点围绕Zuul本身关于动态配置缺陷问题、老项目接入及老环境上线问题等方面进行讨论。关于Zuul的一些基本用法，可直接参考<a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud官方文档\n</a>与<a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener\">Zuul Github</a>。\n　　我们使用的Zuul基于Spring官方目前最新版本Spring Cloud Finchley.SR1。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Zuul是什么\"><a href=\"#Zuul是什么\" class=\"headerlink\" title=\"Zuul是什么\"></a>Zuul是什么</h2><p>　　Zuul可以用两个单词总结，即路由和过滤器（Router and Filter），它是Netflix开源，并被Spring所集成，成为当前Spring Cloud最核心的组件之一。它的基本功能可概括如下：</p>\n<ul>\n<li>认证鉴权（Authentication）</li>\n<li>审查（Insights）</li>\n<li>压力测试（Stress Testing）</li>\n<li>金丝雀测试（Canary Testing）</li>\n<li>动态路由（Dynamic Routing）</li>\n<li>服务迁移（Service Migration）</li>\n<li>负载剪裁（Load Shedding）</li>\n<li>安全（Security）</li>\n<li>静态应答处理（Static Response handling）</li>\n<li>Active/Active traffic management</li>\n</ul>\n<hr>\n<h2 id=\"为什么要使用它\"><a href=\"#为什么要使用它\" class=\"headerlink\" title=\"为什么要使用它\"></a>为什么要使用它</h2><p>　　路由是微服务的架构体系当中必不可少的一部分，那么缺少它会带来什么问题呢？这里以公司某业务线实际场景为例：<br><img src=\"/images/15397653100461/Spring%20Cloud%20Zuul%2001.jpg\" alt=\"Spring Cloud Zuul 01\"><br>　　上图是是一个简单的前后端交互架构，来自PC/微信/H5/IOS/Android等客户端将请求发送至Nginx，后由Nginx反向代理到指定后端服务集群中。我们能够很方便的为后端服务集群提供负载均衡，同时通过Nginx的反向代理，可以隐藏后端真实IP，即提供了一定程度的安全保障，也使得前后端服务调用隔离，降低开发成本。<br>　　随着业务规模的不断扩大，后端微服务已从数个服务集群扩展到了数十个，此时Nginx为每一个服务集群都配置了唯一的域名用于反向代理，每当这些服务集群需要扩容或机器迁移时，需要运维投入大量的精力去手动修改配置。此外，这些数十个域名也造成了资源的极度浪费。<br>　　<br>　　<img src=\"/images/15397653100461/15398454116261.jpg\" alt></p>\n<p>　　在近些年火热的微服务浪潮下，我们都热衷于将每一个原子业务单元都拆分成微服务，这对运维来说造成了很多压力，就好像上图中，当你面相这种规模的服务集群时，传统的维护手段已接近于灾难，必须要想办法借助更多的工具来帮助我们。<br>　　相比Nginx，我们可以将Zuul理解为微服务集群的一个可靠的大管家，它是上述问题的解决方案之一。使用它，可以方便的用一个域名来替换掉之前的数十个域名，此外，当服务集群扩容或迁移时，Zull可以做到自动识别，即动态路由，它还具有服务鉴权、服务降级、熔断、分流控制、接口控制等Nginx所不具备的重要功能。</p>\n<hr>\n<h2 id=\"问题与挑战\"><a href=\"#问题与挑战\" class=\"headerlink\" title=\"问题与挑战\"></a>问题与挑战</h2><p>　　Spring Cloud Finchley版本基于Spring Boot2.0构建，按照约定大于配置的思想，我们能够很轻易的上手使用这些开源框架。但是任何开源框架放到实际应用场景中，都不可能百分百的切合我们的实际需求，例如</p>\n<h3 id=\"当前Spring-Cloud-Zuul最新版本不支持路由的动态配置\"><a href=\"#当前Spring-Cloud-Zuul最新版本不支持路由的动态配置\" class=\"headerlink\" title=\"当前Spring Cloud Zuul最新版本不支持路由的动态配置\"></a>当前Spring Cloud Zuul最新版本不支持路由的动态配置</h3><p>　　虽然Zuul能够做到动态路由，但是反向代理的配置信息是需要在application.yml配置文件中维护的，这意味着每一次有新的服务集群需要进行反向代理时，我们需要像重启Nginx一样来重启Zuul，重启意味着增加了上线的风险与成本。</p>\n<h3 id=\"非Spring-Boot项目接入问题\"><a href=\"#非Spring-Boot项目接入问题\" class=\"headerlink\" title=\"非Spring Boot项目接入问题\"></a>非Spring Boot项目接入问题</h3><p>　　对于任何一个Spring Boot项目来说，可以非常简单方便的与Spring Cloud Zuul整合，但是官方并未提供一些工具来支持一些老项目的接入，目前实际业务线大部分服务均是非Spring Boot的老服务，我们需要自己来实现这些通用的工具组件。</p>\n<h3 id=\"老环境上线迁移问题\"><a href=\"#老环境上线迁移问题\" class=\"headerlink\" title=\"老环境上线迁移问题\"></a>老环境上线迁移问题</h3><p>　　长期以来前端业务线一直采用的是Request-Nginx-Server架构。基于前文介绍，我们的Request端分散在各大手机应用市场、微信等合作渠道，对于这些已经集成了数十个不同服务域名的前端来说，接入Zuul会有一系列的问题需要解决：</p>\n<ul>\n<li>App端每次更新都要重新发版，时效性差</li>\n<li>App端接入Zuul后若出现问题，无法及时回滚</li>\n<li>旧版本App无法修改接入Zuul</li>\n</ul>\n<h3 id=\"上线验证问题\"><a href=\"#上线验证问题\" class=\"headerlink\" title=\"上线验证问题\"></a>上线验证问题</h3><ul>\n<li>测试与线上环境不一致，上线存在未知的风险</li>\n<li>我们的业务模式，无法在线上环境进行全流程测试</li>\n</ul>\n<p>　　基于业务模式，系统中有大量节点需要对接第三方机构，无法进行全流程测试，同时，当前我们的测试环境无法做到与线上环境完全一致，对于Zuul的接入来说是一个非常大的挑战。</p>\n<hr>\n<h2 id=\"Zuul的核心架构\"><a href=\"#Zuul的核心架构\" class=\"headerlink\" title=\"Zuul的核心架构\"></a>Zuul的核心架构</h2><p>　　Zuul的核心其实很简单，就是Filter，如下图所示：<br><img src=\"/images/15397653100461/15397741541838.png\" alt></p>\n<p>可以看到，Zuul将过滤器大致分为4类，Pre、Routing、Post/Error</p>\n<p><img src=\"/images/15397653100461/15398306875833.jpg\" alt></p>\n<ul>\n<li>pre： 这种过滤器在请求被路由之前调用，安全与鉴权功能可在此实现。</li>\n<li>routing：通过HttpClient/Ribbon将请求路由到后端服务。</li>\n<li>post：路由后执行，可以接收到后端服务的响应信息，并转发给请求端。</li>\n<li>error：在其他阶段发生错误时执行该过滤器。</li>\n</ul>\n<h4 id=\"Spring-Zuul提供的默认过滤器\"><a href=\"#Spring-Zuul提供的默认过滤器\" class=\"headerlink\" title=\"Spring Zuul提供的默认过滤器\"></a>Spring Zuul提供的默认过滤器</h4><p><img src=\"/images/15397653100461/15399408807599.jpg\" alt></p>\n<p>　　Zuul已经为我们封装好了基本的过滤器，表格中Order是这些过滤器的执行顺序，可见Zuul为我们充分预留了很多空间来对默认过滤器进行增强，例如</p>\n<ul>\n<li>安全/鉴权</li>\n<li>流量控制</li>\n<li>接口控制</li>\n<li>访问统计</li>\n<li>…</li>\n</ul>\n<hr>\n<h2 id=\"动态路由增强，实现路由的动态配置\"><a href=\"#动态路由增强，实现路由的动态配置\" class=\"headerlink\" title=\"动态路由增强，实现路由的动态配置\"></a>动态路由增强，实现路由的动态配置</h2><p>　　Zuul相比较于Nginx的一个很大优势在于其提供的动态路由功能，前文已经介绍过，当服务过多的时候，运维需要大量的时间去手动维护路由的映射关系，极易造成严重的线上问题。<br>　　好在Zuul与Eureka（注册中心）在Spring Cloud中实现了完美的整合，Eureka能够实时管理不同集群的每一个节点信息，Zuul便能够通过注册中心获取每一个服务的详细清单，并通过Ribbon实现负载均衡，从而达到请求到转发的自动路由机制。<br>　　前文提过Zuul并没有实现路由的动态配置，每次新增反向代理规则都需要重启Zuul未免有点尴尬，是否可以修改Zuul来避免重启呢？我们需要看一下Zuul的动态路由的实现原理。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>　　找到spring-cloud-netflix-zuul-2.0.1.RELEASE.jar，看一下路由定位器相关实现：</p>\n<p><img src=\"/images/15239442308370/zuul_locator.jpg\" alt=\"zuul_locato\"></p>\n<ul>\n<li>RouteLocator 路由定位基础接口</li>\n<li>RefreshableRouteLocator 提供刷新接口</li>\n<li>SimpleRouteLocator 基础实现定位器，主要实现了路由定位与路由加载逻辑</li>\n<li>CompositeRouteLocator 复合定位器，提供路由定位、路由刷新功能</li>\n<li>DiscoveryClientRouteLocator 组合静态以及配置好的路由</li>\n</ul>\n<p>　　通过查看Zuul的源码发现，Zuul已经为我们定义好路由定位于刷新的接口标准，RouteLocator接口主要定义了路由定位器，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Ignored route paths (or patterns), if any.</span><br><span class=\"line\"> */</span><br><span class=\"line\">Collection&lt;String&gt; getIgnoredPaths();</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * A map of route path (pattern) to location (e.g. service id or URL).</span><br><span class=\"line\"> */</span><br><span class=\"line\">List&lt;Route&gt; getRoutes();</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Maps a path to an actual route with full metadata.</span><br><span class=\"line\"> */</span><br><span class=\"line\">Route getMatchingRoute(String path);</span><br></pre></td></tr></table></figure>\n\n<p>　　RefreshableRouteLocator接口，只定义了一个路由信息刷新接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void refresh();</span><br></pre></td></tr></table></figure>\n\n<p>　　SimpleRouteLocator，主要实现了RouteLocator接口，在内部引入了ZuulProperties。ZuulProperties的配置是我们在application.yml中配置好的Zuul相关信息，其中包含了反向代理的配置，SimpleRouteLocator是基于静态配置文件的路由定位器的重要实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private ZuulProperties properties;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">\tpublic List&lt;Route&gt; getRoutes() &#123;</span><br><span class=\"line\">\t\tList&lt;Route&gt; values = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tfor (Entry&lt;String, ZuulRoute&gt; entry : getRoutesMap().entrySet()) &#123;</span><br><span class=\"line\">\t\t\tZuulRoute route = entry.getValue();</span><br><span class=\"line\">\t\t\tString path = route.getPath();</span><br><span class=\"line\">\t\t\tvalues.add(getRoute(route, path));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn values;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Route getMatchingRoute(final String path) &#123;</span><br><span class=\"line\">\t\treturn getSimpleMatchingRoute(path);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　接下来再来看看实现了刷新接口的CompositeRouteLocator与DiscoveryClientRouteLocator，DiscoveryClientRouteLocator继承了SimpleRouteLocator，同时实现了RefreshableRouteLocator。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DiscoveryClientRouteLocator extends SimpleRouteLocator</span><br><span class=\"line\">\t\timplements RefreshableRouteLocator &#123;</span><br></pre></td></tr></table></figure>\n\n<p>　　它主要增加了DiscoveryClientRouteLocator方法，用于通过DiscoveryClient（例如Eureka）发现路由信息，以及实现了动态的路由刷新接口，这里的doRefresh仅仅是调用了SimpleRouteLocator的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Calculate all the routes and set up a cache for the values. Subclasses can call</span><br><span class=\"line\"> * this method if they need to implement &#123;@link RefreshableRouteLocator&#125;.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void doRefresh() &#123;</span><br><span class=\"line\">\tthis.routes.set(locateRoutes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　CompositeRouteLocator，其内部维护了routeLocators的集合，并继承了RefreshableRouteLocator方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * RouteLocator that composes multiple RouteLocators.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Johannes Edmeier</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CompositeRouteLocator implements RefreshableRouteLocator &#123;</span><br><span class=\"line\">\tprivate final Collection&lt;? extends RouteLocator&gt; routeLocators;</span><br><span class=\"line\">\tprivate ArrayList&lt;RouteLocator&gt; rl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic CompositeRouteLocator(Collection&lt;? extends RouteLocator&gt; routeLocators) &#123;</span><br><span class=\"line\">\t\tAssert.notNull(routeLocators, &quot;&apos;routeLocators&apos; must not be null&quot;);</span><br><span class=\"line\">\t\trl = new ArrayList&lt;&gt;(routeLocators);</span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(rl);</span><br><span class=\"line\">\t\tthis.routeLocators = rl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Collection&lt;String&gt; getIgnoredPaths() &#123;</span><br><span class=\"line\">\t\tList&lt;String&gt; ignoredPaths = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\tignoredPaths.addAll(locator.getIgnoredPaths());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ignoredPaths;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;Route&gt; getRoutes() &#123;</span><br><span class=\"line\">\t\tList&lt;Route&gt; route = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\troute.addAll(locator.getRoutes());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn route;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Route getMatchingRoute(String path) &#123;</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\tRoute route = locator.getMatchingRoute(path);</span><br><span class=\"line\">\t\t\tif (route != null) &#123;</span><br><span class=\"line\">\t\t\t\treturn route;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void refresh() &#123;</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\tif (locator instanceof RefreshableRouteLocator) &#123;</span><br><span class=\"line\">\t\t\t\t((RefreshableRouteLocator) locator).refresh();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　routeLocators就是我们需要的入口了，如果我们可以自定义一个通过数据库来加载的路由Locator，并自己实现refresh方法，那么就初步实现了路由动态配置最重要的一步。<br>　　如何将自定义Locator添加至routeLocators集合中呢？我们来梳理一下Zuul初始化的过程，在jar中我们能够找到有两个分账关键的配置类，分别是ZuulServerAutoConfiguration与ZuulProxyAutoConfiguration。<br>　　ZuulServerAutoConfiguration，里面初始化了CompositeRouteLocator、SimpleRouteLocator、ZuulController、各种关键默认的Filter、ZuulRefreshListener等，是我们要实现目的的关键入口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　 @Bean</span><br><span class=\"line\">@Primary</span><br><span class=\"line\">public CompositeRouteLocator primaryRouteLocator(</span><br><span class=\"line\">\t\tCollection&lt;RouteLocator&gt; routeLocators) &#123;</span><br><span class=\"line\">\treturn new CompositeRouteLocator(routeLocators);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里是CompositeRouteLocator初始化入口，由此可见我们完全可以将自定义的Locator加载进去。</p>\n<h3 id=\"自定义路由定位器与路由刷新策略\"><a href=\"#自定义路由定位器与路由刷新策略\" class=\"headerlink\" title=\"自定义路由定位器与路由刷新策略\"></a>自定义路由定位器与路由刷新策略</h3><p>　　根据上面的方法，我们便可以将自定义的locator添加进CompositeRouteLocator中的locators集合。<br>　　定义一个MyDynamicRouteLocator，实现RefreshableRouteLocator，Ordered接口，其核心功能有两点，其一是将数据库中配置的路由信息加载，作为路由定位方法判定的基础，其二是实现刷新方法，使之能够识别数据库中变化的配置信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDynamicRouteLocator implements RefreshableRouteLocator, Ordered &#123;</span><br></pre></td></tr></table></figure>\n\n<p>然后，在项目启动时初始化MyDynamicRouteLocator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DynamicRouteConfiguration &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public MyDynamicRouteLocator dynamicRouteLocator() &#123;</span><br><span class=\"line\">       ... </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由动态配置的优化\"><a href=\"#路由动态配置的优化\" class=\"headerlink\" title=\"路由动态配置的优化\"></a>路由动态配置的优化</h3><p>　　Zuul默认会维持心跳每隔30秒调用一次refresh方法来刷新路由信息，如果路由配置发生变更时，我们希望它可以实时生效，如何做呢？<br>　　前面提到ZuulServerAutoConfiguration内部初始化了一个ZuulRefreshListener，它实现了Spring的ApplicationListener接口，当它监听到一些指定的Event时，便最终会调用refresh方法来刷新路由配置信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static class ZuulRefreshListener</span><br><span class=\"line\">\t\timplements ApplicationListener&lt;ApplicationEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate ZuulHandlerMapping zuulHandlerMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate HeartbeatMonitor heartbeatMonitor = new HeartbeatMonitor();</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void onApplicationEvent(ApplicationEvent event) &#123;</span><br><span class=\"line\">\t\tif (event instanceof ContextRefreshedEvent</span><br><span class=\"line\">\t\t\t\t|| event instanceof RefreshScopeRefreshedEvent</span><br><span class=\"line\">\t\t\t\t|| event instanceof RoutesRefreshedEvent</span><br><span class=\"line\">\t\t\t\t|| event instanceof InstanceRegisteredEvent) &#123;</span><br><span class=\"line\">\t\t\treset();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (event instanceof ParentHeartbeatEvent) &#123;</span><br><span class=\"line\">\t\t\tParentHeartbeatEvent e = (ParentHeartbeatEvent) event;</span><br><span class=\"line\">\t\t\tresetIfNeeded(e.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (event instanceof HeartbeatEvent) &#123;</span><br><span class=\"line\">\t\t\tHeartbeatEvent e = (HeartbeatEvent) event;</span><br><span class=\"line\">\t\t\tresetIfNeeded(e.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void resetIfNeeded(Object value) &#123;</span><br><span class=\"line\">\t\tif (this.heartbeatMonitor.update(value)) &#123;</span><br><span class=\"line\">\t\t\treset();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void reset() &#123;</span><br><span class=\"line\">\t\tthis.zuulHandlerMapping.setDirty(true);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　因此，我们可以通过广播-订阅的方式，建立一个Zuul的管理后台，当我们认为将路由配置信息变更时，发送一个广播，在Zuul集群的服务中实时监听该消息，当监听到刷新请求后，通过ApplicationEventPublisher发布RoutesRefreshedEvent，Zuul的事件监听器会自动为我们处理后续流程，从而实现了配置修改的实时刷新。<br>　　<br><img src=\"/images/15397653100461/15398449182455.jpg\" alt></p>\n<p>核心方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 取得订阅的消息后的处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 说明：当接收到路由规则刷新通知时, 发布路由刷新事件</span><br><span class=\"line\"> * @param channel</span><br><span class=\"line\"> * @param message</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onMessage(String channel, String message) &#123;</span><br><span class=\"line\">    // step. 发布路由刷新事件</span><br><span class=\"line\">    this.publisher.publishEvent(new RoutesRefreshedEvent(compositeRouteLocator));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Zuul与非Spring-Boot项目集成\"><a href=\"#Zuul与非Spring-Boot项目集成\" class=\"headerlink\" title=\"Zuul与非Spring Boot项目集成\"></a>Zuul与非Spring Boot项目集成</h2><p>　　前面介绍过，Zuul的动态路由与负载均衡离不开Spring Cloud的Discovery Client（例如Eureka）与Ribbon，对于Spring Boot项目来说，其接入成本即引入一个jar包，添加几行配置与注解即可与Zuul集成。<br>　　对于非Spring Boot项目，我们需要自己封装一个类似的spring-cloud-starter-netflix-eureka-client组件。</p>\n<h3 id=\"自定义非Spring-Boot项目spring-cloud-starter-netflix-eureka-client组件\"><a href=\"#自定义非Spring-Boot项目spring-cloud-starter-netflix-eureka-client组件\" class=\"headerlink\" title=\"自定义非Spring Boot项目spring-cloud-starter-netflix-eureka-client组件\"></a>自定义非Spring Boot项目spring-cloud-starter-netflix-eureka-client组件</h3><p>　　参考官方starter，该组件内部的核心是eureka-client.jar，核心逻辑很简单，即项目启动时将项目的地址、Host等信息注册至Eureka中，并开启Eureka的心跳机制，以便监听服务状态实时更新注册中心。</p>\n<h4 id=\"首先引入eureka-client\"><a href=\"#首先引入eureka-client\" class=\"headerlink\" title=\"首先引入eureka-client\"></a>首先引入eureka-client</h4><p>引入版本需与spring-cloud-starter-netflix-eureka-client所用一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Eureka --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.netflix.eureka&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;eureka.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/exclusion&gt;</span><br><span class=\"line\">    &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>　　这里需要注意一点，由于旧项目所用servlet-api版本不同，因此需要注意组件的依赖关系。</p>\n<h4 id=\"定义Listener\"><a href=\"#定义Listener\" class=\"headerlink\" title=\"定义Listener\"></a>定义Listener</h4><p>Listener必须具有以下功能：</p>\n<ul>\n<li>项目启动时服务信息注册到Eureka，并提供心跳监测　　</li>\n<li>项目销毁时注销Eureka</li>\n<li>维持心跳监测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 用途：Eureka服务注册</span><br><span class=\"line\"> * 说明：</span><br><span class=\"line\"> *      1、项目启动时服务信息注册到Eureka, 并提供心跳监测</span><br><span class=\"line\"> *      2、项目销毁时注销Eureka</span><br><span class=\"line\"> *      3、Eureka客户端默认配置的覆盖选项从Classpath下寻找eureka-client.properties中加载</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Wang Ran &lt;br/&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class EurekaDiscoveryListener implements ServletContextListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static ApplicationInfoManager applicationInfoManager;</span><br><span class=\"line\">    private static EurekaClient eurekaClient;</span><br><span class=\"line\">    private static EurekaInstanceConfig instanceConfig;</span><br><span class=\"line\">    private static EurekaClientConfig clientConfig = new DefaultEurekaClientConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 服务启动时调用, 注册Eureka</span><br><span class=\"line\">     * @param sce</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void contextInitialized(ServletContextEvent servletContextEvent) &#123;</span><br><span class=\"line\">        // step. 初始化Eureka Client</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            final String ipAddress = EurekaClientUtils.getLocalIpAddress();</span><br><span class=\"line\">            instanceConfig = new MyDataCenterInstanceConfig() &#123;</span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * 强制将注册到Eureka的hostName从主机名换成IP地址加端口号的形式</span><br><span class=\"line\">                 * @param refresh</span><br><span class=\"line\">                 * @return</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public String getHostName(boolean refresh) &#123;</span><br><span class=\"line\">                    return ipAddress;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * 强制将Eureka上显示的实例名称初始化为ip:appname:port的形式</span><br><span class=\"line\">                 * @return</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public String getInstanceId() &#123;</span><br><span class=\"line\">                    return ipAddress.concat(&quot;:&quot;).concat(this.getAppname())</span><br><span class=\"line\">                            .concat(&quot;:&quot;).concat(String.valueOf(this.getNonSecurePort()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125; catch (SocketException e) &#123;</span><br><span class=\"line\">            throw new RuntimeException(&quot;Eureka Register init process occurred SocketException&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 初始化Eureka ApplicationInfoManager</span><br><span class=\"line\">        initializeApplicationInfoManager(instanceConfig);</span><br><span class=\"line\">        // 初始化Eureka客户端并向Eureka注册</span><br><span class=\"line\">        initializeEurekaClient(applicationInfoManager, clientConfig);</span><br><span class=\"line\">        // 注册成功后向Eureka通知注册状态</span><br><span class=\"line\">        applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 服务销毁时调用, 注销Eureka</span><br><span class=\"line\">     * @param servletContextEvent</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void contextDestroyed(ServletContextEvent servletContextEvent) &#123;</span><br><span class=\"line\">        eurekaClient.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 初始化Eureka ApplicationInfoManager</span><br><span class=\"line\">     * @param instanceConfig</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static synchronized ApplicationInfoManager initializeApplicationInfoManager(</span><br><span class=\"line\">            EurekaInstanceConfig instanceConfig) &#123;</span><br><span class=\"line\">        if (applicationInfoManager == null) &#123;</span><br><span class=\"line\">            InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();</span><br><span class=\"line\">            applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return applicationInfoManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 初始化Eureka客户端</span><br><span class=\"line\">     * @param applicationInfoManager</span><br><span class=\"line\">     * @param clientConfig</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static synchronized EurekaClient initializeEurekaClient(</span><br><span class=\"line\">            ApplicationInfoManager applicationInfoManager, EurekaClientConfig clientConfig) &#123;</span><br><span class=\"line\">        if (eurekaClient == null) &#123;</span><br><span class=\"line\">            eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return eurekaClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非Spring-Boot项目客户端接入Eureka\"><a href=\"#非Spring-Boot项目客户端接入Eureka\" class=\"headerlink\" title=\"非Spring Boot项目客户端接入Eureka\"></a>非Spring Boot项目客户端接入Eureka</h3><h4 id=\"引入自定义Client\"><a href=\"#引入自定义Client\" class=\"headerlink\" title=\"引入自定义Client\"></a>引入自定义Client</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.xxx&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;my-spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;xxx.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Classpath添加文件：eureka-client-properties\"><a href=\"#在Classpath添加文件：eureka-client-properties\" class=\"headerlink\" title=\"在Classpath添加文件：eureka-client.properties\"></a>在Classpath添加文件：eureka-client.properties</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### Eureka Client configuration</span><br><span class=\"line\"></span><br><span class=\"line\"># configuration related to reaching the eureka servers</span><br><span class=\"line\"># 例如：http://eureka-node1:port/eureka/,http://eureka-node2:port/eureka/</span><br><span class=\"line\">eureka.serviceUrl.default=$&#123;EUREKA_URI&#125;</span><br><span class=\"line\"># 输入客户端服务集群的id, 名称需为英文, 例如: xxx-server</span><br><span class=\"line\">eureka.name=$&#123;EUREKA-CLIENT-ID&#125;</span><br><span class=\"line\"># 输入客户端服务端口, 例如8080</span><br><span class=\"line\">eureka.port=$&#123;EUREKA-CLIENT-PORT&#125;</span><br><span class=\"line\"># 向服务发现注册真实ip</span><br><span class=\"line\">eureka.instance.prefer-ip-address=true</span><br><span class=\"line\"># 心跳时间，即服务续约间隔时间（缺省为30s）</span><br><span class=\"line\">eureka.instance.lease-renewal-interval-in-seconds=5</span><br><span class=\"line\"># 发呆时间，即服务续约到期时间（缺省为90s）</span><br><span class=\"line\">eureka.instance.lease-expiration-duration-in-seconds=20</span><br><span class=\"line\"># 客户识别此服务的虚拟主机名</span><br><span class=\"line\">eureka.vipAddress=$&#123;eureka.name&#125;</span><br><span class=\"line\">eureka.vitualVipAddress=$&#123;eureka.name&#125;</span><br><span class=\"line\">## configuration related to reaching the eureka servers</span><br><span class=\"line\">eureka.preferSameZone=true</span><br><span class=\"line\"># 是否要使用基于DNS的查找来确定其他eureka服务器</span><br><span class=\"line\">eureka.shouldUseDns=false</span><br><span class=\"line\"># 是否注册自身到eureka</span><br><span class=\"line\">eureka.registration.enabled=true</span><br><span class=\"line\">eureka.decoderName=JacksonJson</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"web-xml文件引入Eureka监听器\"><a href=\"#web-xml文件引入Eureka监听器\" class=\"headerlink\" title=\"web.xml文件引入Eureka监听器\"></a>web.xml文件引入Eureka监听器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">    &lt;description&gt;Eureka Listener&lt;/description&gt;</span><br><span class=\"line\">    &lt;listener-class&gt;com.xxx.listener.EurekaDiscoveryListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"分流上线-amp-验证\"><a href=\"#分流上线-amp-验证\" class=\"headerlink\" title=\"分流上线 &amp; 验证\"></a>分流上线 &amp; 验证</h2><p>　　前文所述，我们现有集群架构接入Zuul面临了一些上线问题：</p>\n<ul>\n<li>App端每次更新都要重新发版，时效性差</li>\n<li>App端接入Zuul后若出现问题，无法及时回滚</li>\n<li>旧版本App无法修改接入Zuul</li>\n<li>测试与线上环境不一致，上线存在未知的风险</li>\n<li>我们的业务模式，无法在线上环境进行全流程测试</li>\n</ul>\n<p>　　为了解决上述问题，我们必须做到在前端不进行任何修改的情况下，以一种分流且可验证的形式接入Zuul中。</p>\n<h3 id=\"分流方案\"><a href=\"#分流方案\" class=\"headerlink\" title=\"分流方案\"></a>分流方案</h3><p>　　　　<img src=\"/images/15397653100461/Spring%20Cloud%20Zuul%2002%20-1-.jpg\" alt=\"Spring Cloud Zuul 02 -1-\"><br>　　若想做到前端在前期不做任何修改，意味着Zuul当前必须与前端已有的Nginx域名对接。<br>　　我们假设Zuul的域名为：my-zuul.com，旧服务1的域名为old-service-01.com，映射的机器为10.10.10.1，10.10.10.2。<br>　　对于分流方案，我们可以直接以Nginx的轮询策略为基准，将my-zuul.com作为类似10.10.10.1的一个节点，通过权重的形式将一部分访问old-service-01.com的流量分发到10.10.10.1，一部分流量分发到my-zuul.com。<br>　　但是这里存在一个问题，前端需要将old-service-01.com域名替换为my-zuul.com/service-01，而Nginx的upstream在映射到zuul.com时无法为域名添加/service-01，因此需要引入old-service-01-neiwang.com域名来解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　upstream old-service-01.com &#123;</span><br><span class=\"line\">　   server 10.10.10.1:8080 fail_timeout=10s max_fails=3 weight 1;</span><br><span class=\"line\">　   ...</span><br><span class=\"line\">　   server old-service-01-neiwang.com weight 1;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　然后，在Nginx中针对old-service-01-neiwang.com域名进行redirect，使之转到my-zuul.com/service-01，最终的架构详见下图。</p>\n<p>　　<img src=\"/images/15397653100461/Spring%20Cloud%20Zuul%2003.jpg\" alt=\"Spring Cloud Zuul 03\"></p>\n<p>　　</p>\n<h3 id=\"验证方案\"><a href=\"#验证方案\" class=\"headerlink\" title=\"验证方案\"></a>验证方案</h3><p>　　通过Nginx我们实现了分流的上线策略，那么便可通过新增Post类型的自定义过滤器，拦截服务之间的请求与响应关键信息，进而通过streaming实时分析日志记录，监测Zuul的访问情况与业务数据的指标范围，来确定上线是否存在异常情形，进而可以逐步提升Zuul在Nginx的分流权重，直至最终将老架构过渡到以Zuul为核心的最终方案。</p>\n<p><img src=\"/images/15397653100461/15398532205321.jpg\" alt><br><img src=\"/images/15397653100461/15398533229844.jpg\" alt></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　本文主要与大家分享一下我们在使用Spring Cloud中关于Zuul的一些实践心得，鉴于作者水平有限，文章中不免会有理解不到位的地方。关于Zuul本身与其他Spring Cloud组件，以及其他微服务架构有非常多的地方值得深入探讨，若您对文章中某些问题存在疑问，或是发现某些内容存在错误、有更好的解决方案、意见以及建议等，欢迎留言，非常希望能与各路大神广泛交流。</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud官方文档\n</a></p>\n<p><a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener\">Zuul Github\n</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>　　本文主要针对Zuul在实际业务场景中的一些实践心得进行总结，重点围绕Zuul本身关于动态配置缺陷问题、老项目接入及老环境上线问题等方面进行讨论。关于Zuul的一些基本用法，可直接参考<a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud官方文档\n</a>与<a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener\">Zuul Github</a>。\n　　我们使用的Zuul基于Spring官方目前最新版本Spring Cloud Finchley.SR1。</p>\n<hr>","more":"<h2 id=\"Zuul是什么\"><a href=\"#Zuul是什么\" class=\"headerlink\" title=\"Zuul是什么\"></a>Zuul是什么</h2><p>　　Zuul可以用两个单词总结，即路由和过滤器（Router and Filter），它是Netflix开源，并被Spring所集成，成为当前Spring Cloud最核心的组件之一。它的基本功能可概括如下：</p>\n<ul>\n<li>认证鉴权（Authentication）</li>\n<li>审查（Insights）</li>\n<li>压力测试（Stress Testing）</li>\n<li>金丝雀测试（Canary Testing）</li>\n<li>动态路由（Dynamic Routing）</li>\n<li>服务迁移（Service Migration）</li>\n<li>负载剪裁（Load Shedding）</li>\n<li>安全（Security）</li>\n<li>静态应答处理（Static Response handling）</li>\n<li>Active/Active traffic management</li>\n</ul>\n<hr>\n<h2 id=\"为什么要使用它\"><a href=\"#为什么要使用它\" class=\"headerlink\" title=\"为什么要使用它\"></a>为什么要使用它</h2><p>　　路由是微服务的架构体系当中必不可少的一部分，那么缺少它会带来什么问题呢？这里以公司某业务线实际场景为例：<br><img src=\"/images/15397653100461/Spring%20Cloud%20Zuul%2001.jpg\" alt=\"Spring Cloud Zuul 01\"><br>　　上图是是一个简单的前后端交互架构，来自PC/微信/H5/IOS/Android等客户端将请求发送至Nginx，后由Nginx反向代理到指定后端服务集群中。我们能够很方便的为后端服务集群提供负载均衡，同时通过Nginx的反向代理，可以隐藏后端真实IP，即提供了一定程度的安全保障，也使得前后端服务调用隔离，降低开发成本。<br>　　随着业务规模的不断扩大，后端微服务已从数个服务集群扩展到了数十个，此时Nginx为每一个服务集群都配置了唯一的域名用于反向代理，每当这些服务集群需要扩容或机器迁移时，需要运维投入大量的精力去手动修改配置。此外，这些数十个域名也造成了资源的极度浪费。<br>　　<br>　　<img src=\"/images/15397653100461/15398454116261.jpg\" alt></p>\n<p>　　在近些年火热的微服务浪潮下，我们都热衷于将每一个原子业务单元都拆分成微服务，这对运维来说造成了很多压力，就好像上图中，当你面相这种规模的服务集群时，传统的维护手段已接近于灾难，必须要想办法借助更多的工具来帮助我们。<br>　　相比Nginx，我们可以将Zuul理解为微服务集群的一个可靠的大管家，它是上述问题的解决方案之一。使用它，可以方便的用一个域名来替换掉之前的数十个域名，此外，当服务集群扩容或迁移时，Zull可以做到自动识别，即动态路由，它还具有服务鉴权、服务降级、熔断、分流控制、接口控制等Nginx所不具备的重要功能。</p>\n<hr>\n<h2 id=\"问题与挑战\"><a href=\"#问题与挑战\" class=\"headerlink\" title=\"问题与挑战\"></a>问题与挑战</h2><p>　　Spring Cloud Finchley版本基于Spring Boot2.0构建，按照约定大于配置的思想，我们能够很轻易的上手使用这些开源框架。但是任何开源框架放到实际应用场景中，都不可能百分百的切合我们的实际需求，例如</p>\n<h3 id=\"当前Spring-Cloud-Zuul最新版本不支持路由的动态配置\"><a href=\"#当前Spring-Cloud-Zuul最新版本不支持路由的动态配置\" class=\"headerlink\" title=\"当前Spring Cloud Zuul最新版本不支持路由的动态配置\"></a>当前Spring Cloud Zuul最新版本不支持路由的动态配置</h3><p>　　虽然Zuul能够做到动态路由，但是反向代理的配置信息是需要在application.yml配置文件中维护的，这意味着每一次有新的服务集群需要进行反向代理时，我们需要像重启Nginx一样来重启Zuul，重启意味着增加了上线的风险与成本。</p>\n<h3 id=\"非Spring-Boot项目接入问题\"><a href=\"#非Spring-Boot项目接入问题\" class=\"headerlink\" title=\"非Spring Boot项目接入问题\"></a>非Spring Boot项目接入问题</h3><p>　　对于任何一个Spring Boot项目来说，可以非常简单方便的与Spring Cloud Zuul整合，但是官方并未提供一些工具来支持一些老项目的接入，目前实际业务线大部分服务均是非Spring Boot的老服务，我们需要自己来实现这些通用的工具组件。</p>\n<h3 id=\"老环境上线迁移问题\"><a href=\"#老环境上线迁移问题\" class=\"headerlink\" title=\"老环境上线迁移问题\"></a>老环境上线迁移问题</h3><p>　　长期以来前端业务线一直采用的是Request-Nginx-Server架构。基于前文介绍，我们的Request端分散在各大手机应用市场、微信等合作渠道，对于这些已经集成了数十个不同服务域名的前端来说，接入Zuul会有一系列的问题需要解决：</p>\n<ul>\n<li>App端每次更新都要重新发版，时效性差</li>\n<li>App端接入Zuul后若出现问题，无法及时回滚</li>\n<li>旧版本App无法修改接入Zuul</li>\n</ul>\n<h3 id=\"上线验证问题\"><a href=\"#上线验证问题\" class=\"headerlink\" title=\"上线验证问题\"></a>上线验证问题</h3><ul>\n<li>测试与线上环境不一致，上线存在未知的风险</li>\n<li>我们的业务模式，无法在线上环境进行全流程测试</li>\n</ul>\n<p>　　基于业务模式，系统中有大量节点需要对接第三方机构，无法进行全流程测试，同时，当前我们的测试环境无法做到与线上环境完全一致，对于Zuul的接入来说是一个非常大的挑战。</p>\n<hr>\n<h2 id=\"Zuul的核心架构\"><a href=\"#Zuul的核心架构\" class=\"headerlink\" title=\"Zuul的核心架构\"></a>Zuul的核心架构</h2><p>　　Zuul的核心其实很简单，就是Filter，如下图所示：<br><img src=\"/images/15397653100461/15397741541838.png\" alt></p>\n<p>可以看到，Zuul将过滤器大致分为4类，Pre、Routing、Post/Error</p>\n<p><img src=\"/images/15397653100461/15398306875833.jpg\" alt></p>\n<ul>\n<li>pre： 这种过滤器在请求被路由之前调用，安全与鉴权功能可在此实现。</li>\n<li>routing：通过HttpClient/Ribbon将请求路由到后端服务。</li>\n<li>post：路由后执行，可以接收到后端服务的响应信息，并转发给请求端。</li>\n<li>error：在其他阶段发生错误时执行该过滤器。</li>\n</ul>\n<h4 id=\"Spring-Zuul提供的默认过滤器\"><a href=\"#Spring-Zuul提供的默认过滤器\" class=\"headerlink\" title=\"Spring Zuul提供的默认过滤器\"></a>Spring Zuul提供的默认过滤器</h4><p><img src=\"/images/15397653100461/15399408807599.jpg\" alt></p>\n<p>　　Zuul已经为我们封装好了基本的过滤器，表格中Order是这些过滤器的执行顺序，可见Zuul为我们充分预留了很多空间来对默认过滤器进行增强，例如</p>\n<ul>\n<li>安全/鉴权</li>\n<li>流量控制</li>\n<li>接口控制</li>\n<li>访问统计</li>\n<li>…</li>\n</ul>\n<hr>\n<h2 id=\"动态路由增强，实现路由的动态配置\"><a href=\"#动态路由增强，实现路由的动态配置\" class=\"headerlink\" title=\"动态路由增强，实现路由的动态配置\"></a>动态路由增强，实现路由的动态配置</h2><p>　　Zuul相比较于Nginx的一个很大优势在于其提供的动态路由功能，前文已经介绍过，当服务过多的时候，运维需要大量的时间去手动维护路由的映射关系，极易造成严重的线上问题。<br>　　好在Zuul与Eureka（注册中心）在Spring Cloud中实现了完美的整合，Eureka能够实时管理不同集群的每一个节点信息，Zuul便能够通过注册中心获取每一个服务的详细清单，并通过Ribbon实现负载均衡，从而达到请求到转发的自动路由机制。<br>　　前文提过Zuul并没有实现路由的动态配置，每次新增反向代理规则都需要重启Zuul未免有点尴尬，是否可以修改Zuul来避免重启呢？我们需要看一下Zuul的动态路由的实现原理。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>　　找到spring-cloud-netflix-zuul-2.0.1.RELEASE.jar，看一下路由定位器相关实现：</p>\n<p><img src=\"/images/15239442308370/zuul_locator.jpg\" alt=\"zuul_locato\"></p>\n<ul>\n<li>RouteLocator 路由定位基础接口</li>\n<li>RefreshableRouteLocator 提供刷新接口</li>\n<li>SimpleRouteLocator 基础实现定位器，主要实现了路由定位与路由加载逻辑</li>\n<li>CompositeRouteLocator 复合定位器，提供路由定位、路由刷新功能</li>\n<li>DiscoveryClientRouteLocator 组合静态以及配置好的路由</li>\n</ul>\n<p>　　通过查看Zuul的源码发现，Zuul已经为我们定义好路由定位于刷新的接口标准，RouteLocator接口主要定义了路由定位器，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Ignored route paths (or patterns), if any.</span><br><span class=\"line\"> */</span><br><span class=\"line\">Collection&lt;String&gt; getIgnoredPaths();</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * A map of route path (pattern) to location (e.g. service id or URL).</span><br><span class=\"line\"> */</span><br><span class=\"line\">List&lt;Route&gt; getRoutes();</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Maps a path to an actual route with full metadata.</span><br><span class=\"line\"> */</span><br><span class=\"line\">Route getMatchingRoute(String path);</span><br></pre></td></tr></table></figure>\n\n<p>　　RefreshableRouteLocator接口，只定义了一个路由信息刷新接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void refresh();</span><br></pre></td></tr></table></figure>\n\n<p>　　SimpleRouteLocator，主要实现了RouteLocator接口，在内部引入了ZuulProperties。ZuulProperties的配置是我们在application.yml中配置好的Zuul相关信息，其中包含了反向代理的配置，SimpleRouteLocator是基于静态配置文件的路由定位器的重要实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private ZuulProperties properties;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">\tpublic List&lt;Route&gt; getRoutes() &#123;</span><br><span class=\"line\">\t\tList&lt;Route&gt; values = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tfor (Entry&lt;String, ZuulRoute&gt; entry : getRoutesMap().entrySet()) &#123;</span><br><span class=\"line\">\t\t\tZuulRoute route = entry.getValue();</span><br><span class=\"line\">\t\t\tString path = route.getPath();</span><br><span class=\"line\">\t\t\tvalues.add(getRoute(route, path));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn values;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Route getMatchingRoute(final String path) &#123;</span><br><span class=\"line\">\t\treturn getSimpleMatchingRoute(path);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　接下来再来看看实现了刷新接口的CompositeRouteLocator与DiscoveryClientRouteLocator，DiscoveryClientRouteLocator继承了SimpleRouteLocator，同时实现了RefreshableRouteLocator。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DiscoveryClientRouteLocator extends SimpleRouteLocator</span><br><span class=\"line\">\t\timplements RefreshableRouteLocator &#123;</span><br></pre></td></tr></table></figure>\n\n<p>　　它主要增加了DiscoveryClientRouteLocator方法，用于通过DiscoveryClient（例如Eureka）发现路由信息，以及实现了动态的路由刷新接口，这里的doRefresh仅仅是调用了SimpleRouteLocator的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Calculate all the routes and set up a cache for the values. Subclasses can call</span><br><span class=\"line\"> * this method if they need to implement &#123;@link RefreshableRouteLocator&#125;.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void doRefresh() &#123;</span><br><span class=\"line\">\tthis.routes.set(locateRoutes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　CompositeRouteLocator，其内部维护了routeLocators的集合，并继承了RefreshableRouteLocator方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * RouteLocator that composes multiple RouteLocators.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Johannes Edmeier</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CompositeRouteLocator implements RefreshableRouteLocator &#123;</span><br><span class=\"line\">\tprivate final Collection&lt;? extends RouteLocator&gt; routeLocators;</span><br><span class=\"line\">\tprivate ArrayList&lt;RouteLocator&gt; rl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic CompositeRouteLocator(Collection&lt;? extends RouteLocator&gt; routeLocators) &#123;</span><br><span class=\"line\">\t\tAssert.notNull(routeLocators, &quot;&apos;routeLocators&apos; must not be null&quot;);</span><br><span class=\"line\">\t\trl = new ArrayList&lt;&gt;(routeLocators);</span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(rl);</span><br><span class=\"line\">\t\tthis.routeLocators = rl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Collection&lt;String&gt; getIgnoredPaths() &#123;</span><br><span class=\"line\">\t\tList&lt;String&gt; ignoredPaths = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\tignoredPaths.addAll(locator.getIgnoredPaths());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ignoredPaths;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;Route&gt; getRoutes() &#123;</span><br><span class=\"line\">\t\tList&lt;Route&gt; route = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\troute.addAll(locator.getRoutes());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn route;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Route getMatchingRoute(String path) &#123;</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\tRoute route = locator.getMatchingRoute(path);</span><br><span class=\"line\">\t\t\tif (route != null) &#123;</span><br><span class=\"line\">\t\t\t\treturn route;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void refresh() &#123;</span><br><span class=\"line\">\t\tfor (RouteLocator locator : routeLocators) &#123;</span><br><span class=\"line\">\t\t\tif (locator instanceof RefreshableRouteLocator) &#123;</span><br><span class=\"line\">\t\t\t\t((RefreshableRouteLocator) locator).refresh();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　routeLocators就是我们需要的入口了，如果我们可以自定义一个通过数据库来加载的路由Locator，并自己实现refresh方法，那么就初步实现了路由动态配置最重要的一步。<br>　　如何将自定义Locator添加至routeLocators集合中呢？我们来梳理一下Zuul初始化的过程，在jar中我们能够找到有两个分账关键的配置类，分别是ZuulServerAutoConfiguration与ZuulProxyAutoConfiguration。<br>　　ZuulServerAutoConfiguration，里面初始化了CompositeRouteLocator、SimpleRouteLocator、ZuulController、各种关键默认的Filter、ZuulRefreshListener等，是我们要实现目的的关键入口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　 @Bean</span><br><span class=\"line\">@Primary</span><br><span class=\"line\">public CompositeRouteLocator primaryRouteLocator(</span><br><span class=\"line\">\t\tCollection&lt;RouteLocator&gt; routeLocators) &#123;</span><br><span class=\"line\">\treturn new CompositeRouteLocator(routeLocators);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里是CompositeRouteLocator初始化入口，由此可见我们完全可以将自定义的Locator加载进去。</p>\n<h3 id=\"自定义路由定位器与路由刷新策略\"><a href=\"#自定义路由定位器与路由刷新策略\" class=\"headerlink\" title=\"自定义路由定位器与路由刷新策略\"></a>自定义路由定位器与路由刷新策略</h3><p>　　根据上面的方法，我们便可以将自定义的locator添加进CompositeRouteLocator中的locators集合。<br>　　定义一个MyDynamicRouteLocator，实现RefreshableRouteLocator，Ordered接口，其核心功能有两点，其一是将数据库中配置的路由信息加载，作为路由定位方法判定的基础，其二是实现刷新方法，使之能够识别数据库中变化的配置信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDynamicRouteLocator implements RefreshableRouteLocator, Ordered &#123;</span><br></pre></td></tr></table></figure>\n\n<p>然后，在项目启动时初始化MyDynamicRouteLocator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DynamicRouteConfiguration &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public MyDynamicRouteLocator dynamicRouteLocator() &#123;</span><br><span class=\"line\">       ... </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由动态配置的优化\"><a href=\"#路由动态配置的优化\" class=\"headerlink\" title=\"路由动态配置的优化\"></a>路由动态配置的优化</h3><p>　　Zuul默认会维持心跳每隔30秒调用一次refresh方法来刷新路由信息，如果路由配置发生变更时，我们希望它可以实时生效，如何做呢？<br>　　前面提到ZuulServerAutoConfiguration内部初始化了一个ZuulRefreshListener，它实现了Spring的ApplicationListener接口，当它监听到一些指定的Event时，便最终会调用refresh方法来刷新路由配置信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static class ZuulRefreshListener</span><br><span class=\"line\">\t\timplements ApplicationListener&lt;ApplicationEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate ZuulHandlerMapping zuulHandlerMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate HeartbeatMonitor heartbeatMonitor = new HeartbeatMonitor();</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void onApplicationEvent(ApplicationEvent event) &#123;</span><br><span class=\"line\">\t\tif (event instanceof ContextRefreshedEvent</span><br><span class=\"line\">\t\t\t\t|| event instanceof RefreshScopeRefreshedEvent</span><br><span class=\"line\">\t\t\t\t|| event instanceof RoutesRefreshedEvent</span><br><span class=\"line\">\t\t\t\t|| event instanceof InstanceRegisteredEvent) &#123;</span><br><span class=\"line\">\t\t\treset();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (event instanceof ParentHeartbeatEvent) &#123;</span><br><span class=\"line\">\t\t\tParentHeartbeatEvent e = (ParentHeartbeatEvent) event;</span><br><span class=\"line\">\t\t\tresetIfNeeded(e.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (event instanceof HeartbeatEvent) &#123;</span><br><span class=\"line\">\t\t\tHeartbeatEvent e = (HeartbeatEvent) event;</span><br><span class=\"line\">\t\t\tresetIfNeeded(e.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void resetIfNeeded(Object value) &#123;</span><br><span class=\"line\">\t\tif (this.heartbeatMonitor.update(value)) &#123;</span><br><span class=\"line\">\t\t\treset();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void reset() &#123;</span><br><span class=\"line\">\t\tthis.zuulHandlerMapping.setDirty(true);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　因此，我们可以通过广播-订阅的方式，建立一个Zuul的管理后台，当我们认为将路由配置信息变更时，发送一个广播，在Zuul集群的服务中实时监听该消息，当监听到刷新请求后，通过ApplicationEventPublisher发布RoutesRefreshedEvent，Zuul的事件监听器会自动为我们处理后续流程，从而实现了配置修改的实时刷新。<br>　　<br><img src=\"/images/15397653100461/15398449182455.jpg\" alt></p>\n<p>核心方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 取得订阅的消息后的处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 说明：当接收到路由规则刷新通知时, 发布路由刷新事件</span><br><span class=\"line\"> * @param channel</span><br><span class=\"line\"> * @param message</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onMessage(String channel, String message) &#123;</span><br><span class=\"line\">    // step. 发布路由刷新事件</span><br><span class=\"line\">    this.publisher.publishEvent(new RoutesRefreshedEvent(compositeRouteLocator));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Zuul与非Spring-Boot项目集成\"><a href=\"#Zuul与非Spring-Boot项目集成\" class=\"headerlink\" title=\"Zuul与非Spring Boot项目集成\"></a>Zuul与非Spring Boot项目集成</h2><p>　　前面介绍过，Zuul的动态路由与负载均衡离不开Spring Cloud的Discovery Client（例如Eureka）与Ribbon，对于Spring Boot项目来说，其接入成本即引入一个jar包，添加几行配置与注解即可与Zuul集成。<br>　　对于非Spring Boot项目，我们需要自己封装一个类似的spring-cloud-starter-netflix-eureka-client组件。</p>\n<h3 id=\"自定义非Spring-Boot项目spring-cloud-starter-netflix-eureka-client组件\"><a href=\"#自定义非Spring-Boot项目spring-cloud-starter-netflix-eureka-client组件\" class=\"headerlink\" title=\"自定义非Spring Boot项目spring-cloud-starter-netflix-eureka-client组件\"></a>自定义非Spring Boot项目spring-cloud-starter-netflix-eureka-client组件</h3><p>　　参考官方starter，该组件内部的核心是eureka-client.jar，核心逻辑很简单，即项目启动时将项目的地址、Host等信息注册至Eureka中，并开启Eureka的心跳机制，以便监听服务状态实时更新注册中心。</p>\n<h4 id=\"首先引入eureka-client\"><a href=\"#首先引入eureka-client\" class=\"headerlink\" title=\"首先引入eureka-client\"></a>首先引入eureka-client</h4><p>引入版本需与spring-cloud-starter-netflix-eureka-client所用一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Eureka --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.netflix.eureka&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;eureka.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/exclusion&gt;</span><br><span class=\"line\">    &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>　　这里需要注意一点，由于旧项目所用servlet-api版本不同，因此需要注意组件的依赖关系。</p>\n<h4 id=\"定义Listener\"><a href=\"#定义Listener\" class=\"headerlink\" title=\"定义Listener\"></a>定义Listener</h4><p>Listener必须具有以下功能：</p>\n<ul>\n<li>项目启动时服务信息注册到Eureka，并提供心跳监测　　</li>\n<li>项目销毁时注销Eureka</li>\n<li>维持心跳监测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 用途：Eureka服务注册</span><br><span class=\"line\"> * 说明：</span><br><span class=\"line\"> *      1、项目启动时服务信息注册到Eureka, 并提供心跳监测</span><br><span class=\"line\"> *      2、项目销毁时注销Eureka</span><br><span class=\"line\"> *      3、Eureka客户端默认配置的覆盖选项从Classpath下寻找eureka-client.properties中加载</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Wang Ran &lt;br/&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class EurekaDiscoveryListener implements ServletContextListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static ApplicationInfoManager applicationInfoManager;</span><br><span class=\"line\">    private static EurekaClient eurekaClient;</span><br><span class=\"line\">    private static EurekaInstanceConfig instanceConfig;</span><br><span class=\"line\">    private static EurekaClientConfig clientConfig = new DefaultEurekaClientConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 服务启动时调用, 注册Eureka</span><br><span class=\"line\">     * @param sce</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void contextInitialized(ServletContextEvent servletContextEvent) &#123;</span><br><span class=\"line\">        // step. 初始化Eureka Client</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            final String ipAddress = EurekaClientUtils.getLocalIpAddress();</span><br><span class=\"line\">            instanceConfig = new MyDataCenterInstanceConfig() &#123;</span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * 强制将注册到Eureka的hostName从主机名换成IP地址加端口号的形式</span><br><span class=\"line\">                 * @param refresh</span><br><span class=\"line\">                 * @return</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public String getHostName(boolean refresh) &#123;</span><br><span class=\"line\">                    return ipAddress;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                /**</span><br><span class=\"line\">                 * 强制将Eureka上显示的实例名称初始化为ip:appname:port的形式</span><br><span class=\"line\">                 * @return</span><br><span class=\"line\">                 */</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public String getInstanceId() &#123;</span><br><span class=\"line\">                    return ipAddress.concat(&quot;:&quot;).concat(this.getAppname())</span><br><span class=\"line\">                            .concat(&quot;:&quot;).concat(String.valueOf(this.getNonSecurePort()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125; catch (SocketException e) &#123;</span><br><span class=\"line\">            throw new RuntimeException(&quot;Eureka Register init process occurred SocketException&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 初始化Eureka ApplicationInfoManager</span><br><span class=\"line\">        initializeApplicationInfoManager(instanceConfig);</span><br><span class=\"line\">        // 初始化Eureka客户端并向Eureka注册</span><br><span class=\"line\">        initializeEurekaClient(applicationInfoManager, clientConfig);</span><br><span class=\"line\">        // 注册成功后向Eureka通知注册状态</span><br><span class=\"line\">        applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 服务销毁时调用, 注销Eureka</span><br><span class=\"line\">     * @param servletContextEvent</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void contextDestroyed(ServletContextEvent servletContextEvent) &#123;</span><br><span class=\"line\">        eurekaClient.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 初始化Eureka ApplicationInfoManager</span><br><span class=\"line\">     * @param instanceConfig</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static synchronized ApplicationInfoManager initializeApplicationInfoManager(</span><br><span class=\"line\">            EurekaInstanceConfig instanceConfig) &#123;</span><br><span class=\"line\">        if (applicationInfoManager == null) &#123;</span><br><span class=\"line\">            InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();</span><br><span class=\"line\">            applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return applicationInfoManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 初始化Eureka客户端</span><br><span class=\"line\">     * @param applicationInfoManager</span><br><span class=\"line\">     * @param clientConfig</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static synchronized EurekaClient initializeEurekaClient(</span><br><span class=\"line\">            ApplicationInfoManager applicationInfoManager, EurekaClientConfig clientConfig) &#123;</span><br><span class=\"line\">        if (eurekaClient == null) &#123;</span><br><span class=\"line\">            eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return eurekaClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非Spring-Boot项目客户端接入Eureka\"><a href=\"#非Spring-Boot项目客户端接入Eureka\" class=\"headerlink\" title=\"非Spring Boot项目客户端接入Eureka\"></a>非Spring Boot项目客户端接入Eureka</h3><h4 id=\"引入自定义Client\"><a href=\"#引入自定义Client\" class=\"headerlink\" title=\"引入自定义Client\"></a>引入自定义Client</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.xxx&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;my-spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;xxx.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Classpath添加文件：eureka-client-properties\"><a href=\"#在Classpath添加文件：eureka-client-properties\" class=\"headerlink\" title=\"在Classpath添加文件：eureka-client.properties\"></a>在Classpath添加文件：eureka-client.properties</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### Eureka Client configuration</span><br><span class=\"line\"></span><br><span class=\"line\"># configuration related to reaching the eureka servers</span><br><span class=\"line\"># 例如：http://eureka-node1:port/eureka/,http://eureka-node2:port/eureka/</span><br><span class=\"line\">eureka.serviceUrl.default=$&#123;EUREKA_URI&#125;</span><br><span class=\"line\"># 输入客户端服务集群的id, 名称需为英文, 例如: xxx-server</span><br><span class=\"line\">eureka.name=$&#123;EUREKA-CLIENT-ID&#125;</span><br><span class=\"line\"># 输入客户端服务端口, 例如8080</span><br><span class=\"line\">eureka.port=$&#123;EUREKA-CLIENT-PORT&#125;</span><br><span class=\"line\"># 向服务发现注册真实ip</span><br><span class=\"line\">eureka.instance.prefer-ip-address=true</span><br><span class=\"line\"># 心跳时间，即服务续约间隔时间（缺省为30s）</span><br><span class=\"line\">eureka.instance.lease-renewal-interval-in-seconds=5</span><br><span class=\"line\"># 发呆时间，即服务续约到期时间（缺省为90s）</span><br><span class=\"line\">eureka.instance.lease-expiration-duration-in-seconds=20</span><br><span class=\"line\"># 客户识别此服务的虚拟主机名</span><br><span class=\"line\">eureka.vipAddress=$&#123;eureka.name&#125;</span><br><span class=\"line\">eureka.vitualVipAddress=$&#123;eureka.name&#125;</span><br><span class=\"line\">## configuration related to reaching the eureka servers</span><br><span class=\"line\">eureka.preferSameZone=true</span><br><span class=\"line\"># 是否要使用基于DNS的查找来确定其他eureka服务器</span><br><span class=\"line\">eureka.shouldUseDns=false</span><br><span class=\"line\"># 是否注册自身到eureka</span><br><span class=\"line\">eureka.registration.enabled=true</span><br><span class=\"line\">eureka.decoderName=JacksonJson</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"web-xml文件引入Eureka监听器\"><a href=\"#web-xml文件引入Eureka监听器\" class=\"headerlink\" title=\"web.xml文件引入Eureka监听器\"></a>web.xml文件引入Eureka监听器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">    &lt;description&gt;Eureka Listener&lt;/description&gt;</span><br><span class=\"line\">    &lt;listener-class&gt;com.xxx.listener.EurekaDiscoveryListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"分流上线-amp-验证\"><a href=\"#分流上线-amp-验证\" class=\"headerlink\" title=\"分流上线 &amp; 验证\"></a>分流上线 &amp; 验证</h2><p>　　前文所述，我们现有集群架构接入Zuul面临了一些上线问题：</p>\n<ul>\n<li>App端每次更新都要重新发版，时效性差</li>\n<li>App端接入Zuul后若出现问题，无法及时回滚</li>\n<li>旧版本App无法修改接入Zuul</li>\n<li>测试与线上环境不一致，上线存在未知的风险</li>\n<li>我们的业务模式，无法在线上环境进行全流程测试</li>\n</ul>\n<p>　　为了解决上述问题，我们必须做到在前端不进行任何修改的情况下，以一种分流且可验证的形式接入Zuul中。</p>\n<h3 id=\"分流方案\"><a href=\"#分流方案\" class=\"headerlink\" title=\"分流方案\"></a>分流方案</h3><p>　　　　<img src=\"/images/15397653100461/Spring%20Cloud%20Zuul%2002%20-1-.jpg\" alt=\"Spring Cloud Zuul 02 -1-\"><br>　　若想做到前端在前期不做任何修改，意味着Zuul当前必须与前端已有的Nginx域名对接。<br>　　我们假设Zuul的域名为：my-zuul.com，旧服务1的域名为old-service-01.com，映射的机器为10.10.10.1，10.10.10.2。<br>　　对于分流方案，我们可以直接以Nginx的轮询策略为基准，将my-zuul.com作为类似10.10.10.1的一个节点，通过权重的形式将一部分访问old-service-01.com的流量分发到10.10.10.1，一部分流量分发到my-zuul.com。<br>　　但是这里存在一个问题，前端需要将old-service-01.com域名替换为my-zuul.com/service-01，而Nginx的upstream在映射到zuul.com时无法为域名添加/service-01，因此需要引入old-service-01-neiwang.com域名来解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　upstream old-service-01.com &#123;</span><br><span class=\"line\">　   server 10.10.10.1:8080 fail_timeout=10s max_fails=3 weight 1;</span><br><span class=\"line\">　   ...</span><br><span class=\"line\">　   server old-service-01-neiwang.com weight 1;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　然后，在Nginx中针对old-service-01-neiwang.com域名进行redirect，使之转到my-zuul.com/service-01，最终的架构详见下图。</p>\n<p>　　<img src=\"/images/15397653100461/Spring%20Cloud%20Zuul%2003.jpg\" alt=\"Spring Cloud Zuul 03\"></p>\n<p>　　</p>\n<h3 id=\"验证方案\"><a href=\"#验证方案\" class=\"headerlink\" title=\"验证方案\"></a>验证方案</h3><p>　　通过Nginx我们实现了分流的上线策略，那么便可通过新增Post类型的自定义过滤器，拦截服务之间的请求与响应关键信息，进而通过streaming实时分析日志记录，监测Zuul的访问情况与业务数据的指标范围，来确定上线是否存在异常情形，进而可以逐步提升Zuul在Nginx的分流权重，直至最终将老架构过渡到以Zuul为核心的最终方案。</p>\n<p><img src=\"/images/15397653100461/15398532205321.jpg\" alt><br><img src=\"/images/15397653100461/15398533229844.jpg\" alt></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　本文主要与大家分享一下我们在使用Spring Cloud中关于Zuul的一些实践心得，鉴于作者水平有限，文章中不免会有理解不到位的地方。关于Zuul本身与其他Spring Cloud组件，以及其他微服务架构有非常多的地方值得深入探讨，若您对文章中某些问题存在疑问，或是发现某些内容存在错误、有更好的解决方案、意见以及建议等，欢迎留言，非常希望能与各路大神广泛交流。</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.SR1/single/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">Spring Cloud官方文档\n</a></p>\n<p><a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener\">Zuul Github\n</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwjetpr200014ezrbrg4qlsu","category_id":"cjwjetpra00044ezrh2hi1le8","_id":"cjwjetprj000c4ezrfytiuh8x"},{"post_id":"cjwjetpr800034ezrqkz1vy5h","category_id":"cjwjetprg00094ezrpg0h7lvs","_id":"cjwjetprl000g4ezrlw7gc5pa"},{"post_id":"cjwjetprd00064ezryslrcb2i","category_id":"cjwjetprj000d4ezrjk8sg121","_id":"cjwjetpro000l4ezr8g5jsswj"},{"post_id":"cjwjetpre00074ezrx28w74og","category_id":"cjwjetprj000d4ezrjk8sg121","_id":"cjwjetprp000o4ezrx2xwgmtp"},{"post_id":"cjwjetprf00084ezrmtbihjlq","category_id":"cjwjetprj000d4ezrjk8sg121","_id":"cjwjetprp000q4ezroifkc7gy"},{"post_id":"cjwjetps8000r4ezr6xldkfc8","category_id":"cjwjetprj000d4ezrjk8sg121","_id":"cjwjetpsh000u4ezr2jrxd2pe"},{"post_id":"cjwjetpsp000w4ezr3vyuqf0t","category_id":"cjwjetprj000d4ezrjk8sg121","_id":"cjwjetpss00104ezrl2u4i3py"},{"post_id":"cjwjetpsn000v4ezrefmfhr5a","category_id":"cjwjetpsq000x4ezrih0qtwhc","_id":"cjwjetpst00124ezrnkhkzd1m"},{"post_id":"cjwjetptj00134ezro2iu6s9r","category_id":"cjwjetptl00144ezr6qjl1r6y","_id":"cjwjetptm00174ezrbb87iwxz"}],"PostTag":[{"post_id":"cjwjetpr200014ezrbrg4qlsu","tag_id":"cjwjetprc00054ezrlilrcowd","_id":"cjwjetprh000b4ezru2u2kohn"},{"post_id":"cjwjetpr800034ezrqkz1vy5h","tag_id":"cjwjetprg000a4ezras7aawqh","_id":"cjwjetprk000f4ezrbh6o43hu"},{"post_id":"cjwjetprd00064ezryslrcb2i","tag_id":"cjwjetprj000e4ezrvqoaiolo","_id":"cjwjetprn000j4ezr6bg7gvzc"},{"post_id":"cjwjetpre00074ezrx28w74og","tag_id":"cjwjetprj000e4ezrvqoaiolo","_id":"cjwjetprp000n4ezrozdaraj4"},{"post_id":"cjwjetprf00084ezrmtbihjlq","tag_id":"cjwjetprj000e4ezrvqoaiolo","_id":"cjwjetprp000p4ezr9g3mxnl6"},{"post_id":"cjwjetps8000r4ezr6xldkfc8","tag_id":"cjwjetprj000e4ezrvqoaiolo","_id":"cjwjetpsf000t4ezrsb3lv9v0"},{"post_id":"cjwjetpsp000w4ezr3vyuqf0t","tag_id":"cjwjetprj000e4ezrvqoaiolo","_id":"cjwjetpsr000z4ezrz25am092"},{"post_id":"cjwjetpsn000v4ezrefmfhr5a","tag_id":"cjwjetpsq000y4ezryg2o4yay","_id":"cjwjetpss00114ezrnz3eof3j"},{"post_id":"cjwjetptj00134ezro2iu6s9r","tag_id":"cjwjetptl00154ezrfkys1knl","_id":"cjwjetptm00164ezrqodrpeh7"}],"Tag":[{"name":"数据库","_id":"cjwjetprc00054ezrlilrcowd"},{"name":"TCP","_id":"cjwjetprg000a4ezras7aawqh"},{"name":"Zookeeper","_id":"cjwjetprj000e4ezrvqoaiolo"},{"name":"Github","_id":"cjwjetpsq000y4ezryg2o4yay"},{"name":"Zuul","_id":"cjwjetptl00154ezrfkys1knl"}]}}